
rxd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005690  08005690  00006690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b8  080057b8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080057b8  080057b8  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b8  080057b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  080057cc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080057cc  00007210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bbf  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b95  00000000  00000000  00017bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6c  00000000  00000000  0001b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016484  00000000  00000000  0001bf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b51  00000000  00000000  00032408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088876  00000000  00000000  00044f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd7cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe4  00000000  00000000  000cd814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d07f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005678 	.word	0x08005678

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005678 	.word	0x08005678

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_ddiv>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	46de      	mov	lr, fp
 80003f0:	4645      	mov	r5, r8
 80003f2:	4657      	mov	r7, sl
 80003f4:	464e      	mov	r6, r9
 80003f6:	b5e0      	push	{r5, r6, r7, lr}
 80003f8:	b087      	sub	sp, #28
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	030b      	lsls	r3, r1, #12
 8000400:	0b1b      	lsrs	r3, r3, #12
 8000402:	469b      	mov	fp, r3
 8000404:	0fca      	lsrs	r2, r1, #31
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	0004      	movs	r4, r0
 800040a:	4680      	mov	r8, r0
 800040c:	0d5b      	lsrs	r3, r3, #21
 800040e:	9202      	str	r2, [sp, #8]
 8000410:	d100      	bne.n	8000414 <__aeabi_ddiv+0x28>
 8000412:	e16a      	b.n	80006ea <__aeabi_ddiv+0x2fe>
 8000414:	4ad4      	ldr	r2, [pc, #848]	@ (8000768 <__aeabi_ddiv+0x37c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d100      	bne.n	800041c <__aeabi_ddiv+0x30>
 800041a:	e18c      	b.n	8000736 <__aeabi_ddiv+0x34a>
 800041c:	4659      	mov	r1, fp
 800041e:	0f42      	lsrs	r2, r0, #29
 8000420:	00c9      	lsls	r1, r1, #3
 8000422:	430a      	orrs	r2, r1
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0409      	lsls	r1, r1, #16
 8000428:	4311      	orrs	r1, r2
 800042a:	00c2      	lsls	r2, r0, #3
 800042c:	4690      	mov	r8, r2
 800042e:	4acf      	ldr	r2, [pc, #828]	@ (800076c <__aeabi_ddiv+0x380>)
 8000430:	4689      	mov	r9, r1
 8000432:	4692      	mov	sl, r2
 8000434:	449a      	add	sl, r3
 8000436:	2300      	movs	r3, #0
 8000438:	2400      	movs	r4, #0
 800043a:	9303      	str	r3, [sp, #12]
 800043c:	9e00      	ldr	r6, [sp, #0]
 800043e:	9f01      	ldr	r7, [sp, #4]
 8000440:	033b      	lsls	r3, r7, #12
 8000442:	0b1b      	lsrs	r3, r3, #12
 8000444:	469b      	mov	fp, r3
 8000446:	007b      	lsls	r3, r7, #1
 8000448:	0030      	movs	r0, r6
 800044a:	0d5b      	lsrs	r3, r3, #21
 800044c:	0ffd      	lsrs	r5, r7, #31
 800044e:	2b00      	cmp	r3, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_ddiv+0x68>
 8000452:	e128      	b.n	80006a6 <__aeabi_ddiv+0x2ba>
 8000454:	4ac4      	ldr	r2, [pc, #784]	@ (8000768 <__aeabi_ddiv+0x37c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d100      	bne.n	800045c <__aeabi_ddiv+0x70>
 800045a:	e177      	b.n	800074c <__aeabi_ddiv+0x360>
 800045c:	4659      	mov	r1, fp
 800045e:	0f72      	lsrs	r2, r6, #29
 8000460:	00c9      	lsls	r1, r1, #3
 8000462:	430a      	orrs	r2, r1
 8000464:	2180      	movs	r1, #128	@ 0x80
 8000466:	0409      	lsls	r1, r1, #16
 8000468:	4311      	orrs	r1, r2
 800046a:	468b      	mov	fp, r1
 800046c:	49bf      	ldr	r1, [pc, #764]	@ (800076c <__aeabi_ddiv+0x380>)
 800046e:	00f2      	lsls	r2, r6, #3
 8000470:	468c      	mov	ip, r1
 8000472:	4651      	mov	r1, sl
 8000474:	4463      	add	r3, ip
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	469a      	mov	sl, r3
 800047a:	2300      	movs	r3, #0
 800047c:	9e02      	ldr	r6, [sp, #8]
 800047e:	406e      	eors	r6, r5
 8000480:	2c0f      	cmp	r4, #15
 8000482:	d827      	bhi.n	80004d4 <__aeabi_ddiv+0xe8>
 8000484:	49ba      	ldr	r1, [pc, #744]	@ (8000770 <__aeabi_ddiv+0x384>)
 8000486:	00a4      	lsls	r4, r4, #2
 8000488:	5909      	ldr	r1, [r1, r4]
 800048a:	468f      	mov	pc, r1
 800048c:	46cb      	mov	fp, r9
 800048e:	4642      	mov	r2, r8
 8000490:	9e02      	ldr	r6, [sp, #8]
 8000492:	9b03      	ldr	r3, [sp, #12]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d016      	beq.n	80004c6 <__aeabi_ddiv+0xda>
 8000498:	2b03      	cmp	r3, #3
 800049a:	d100      	bne.n	800049e <__aeabi_ddiv+0xb2>
 800049c:	e2a6      	b.n	80009ec <__aeabi_ddiv+0x600>
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d000      	beq.n	80004a4 <__aeabi_ddiv+0xb8>
 80004a2:	e0df      	b.n	8000664 <__aeabi_ddiv+0x278>
 80004a4:	2200      	movs	r2, #0
 80004a6:	2300      	movs	r3, #0
 80004a8:	2400      	movs	r4, #0
 80004aa:	4690      	mov	r8, r2
 80004ac:	051b      	lsls	r3, r3, #20
 80004ae:	4323      	orrs	r3, r4
 80004b0:	07f6      	lsls	r6, r6, #31
 80004b2:	4333      	orrs	r3, r6
 80004b4:	4640      	mov	r0, r8
 80004b6:	0019      	movs	r1, r3
 80004b8:	b007      	add	sp, #28
 80004ba:	bcf0      	pop	{r4, r5, r6, r7}
 80004bc:	46bb      	mov	fp, r7
 80004be:	46b2      	mov	sl, r6
 80004c0:	46a9      	mov	r9, r5
 80004c2:	46a0      	mov	r8, r4
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	2200      	movs	r2, #0
 80004c8:	2400      	movs	r4, #0
 80004ca:	4690      	mov	r8, r2
 80004cc:	4ba6      	ldr	r3, [pc, #664]	@ (8000768 <__aeabi_ddiv+0x37c>)
 80004ce:	e7ed      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80004d0:	002e      	movs	r6, r5
 80004d2:	e7df      	b.n	8000494 <__aeabi_ddiv+0xa8>
 80004d4:	45cb      	cmp	fp, r9
 80004d6:	d200      	bcs.n	80004da <__aeabi_ddiv+0xee>
 80004d8:	e1d4      	b.n	8000884 <__aeabi_ddiv+0x498>
 80004da:	d100      	bne.n	80004de <__aeabi_ddiv+0xf2>
 80004dc:	e1cf      	b.n	800087e <__aeabi_ddiv+0x492>
 80004de:	2301      	movs	r3, #1
 80004e0:	425b      	negs	r3, r3
 80004e2:	469c      	mov	ip, r3
 80004e4:	4644      	mov	r4, r8
 80004e6:	4648      	mov	r0, r9
 80004e8:	2700      	movs	r7, #0
 80004ea:	44e2      	add	sl, ip
 80004ec:	465b      	mov	r3, fp
 80004ee:	0e15      	lsrs	r5, r2, #24
 80004f0:	021b      	lsls	r3, r3, #8
 80004f2:	431d      	orrs	r5, r3
 80004f4:	0c19      	lsrs	r1, r3, #16
 80004f6:	042b      	lsls	r3, r5, #16
 80004f8:	0212      	lsls	r2, r2, #8
 80004fa:	9500      	str	r5, [sp, #0]
 80004fc:	0c1d      	lsrs	r5, r3, #16
 80004fe:	4691      	mov	r9, r2
 8000500:	9102      	str	r1, [sp, #8]
 8000502:	9503      	str	r5, [sp, #12]
 8000504:	f7ff fe82 	bl	800020c <__aeabi_uidivmod>
 8000508:	0002      	movs	r2, r0
 800050a:	436a      	muls	r2, r5
 800050c:	040b      	lsls	r3, r1, #16
 800050e:	0c21      	lsrs	r1, r4, #16
 8000510:	4680      	mov	r8, r0
 8000512:	4319      	orrs	r1, r3
 8000514:	428a      	cmp	r2, r1
 8000516:	d909      	bls.n	800052c <__aeabi_ddiv+0x140>
 8000518:	9d00      	ldr	r5, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	46ac      	mov	ip, r5
 800051e:	425b      	negs	r3, r3
 8000520:	4461      	add	r1, ip
 8000522:	469c      	mov	ip, r3
 8000524:	44e0      	add	r8, ip
 8000526:	428d      	cmp	r5, r1
 8000528:	d800      	bhi.n	800052c <__aeabi_ddiv+0x140>
 800052a:	e1fb      	b.n	8000924 <__aeabi_ddiv+0x538>
 800052c:	1a88      	subs	r0, r1, r2
 800052e:	9902      	ldr	r1, [sp, #8]
 8000530:	f7ff fe6c 	bl	800020c <__aeabi_uidivmod>
 8000534:	9a03      	ldr	r2, [sp, #12]
 8000536:	0424      	lsls	r4, r4, #16
 8000538:	4342      	muls	r2, r0
 800053a:	0409      	lsls	r1, r1, #16
 800053c:	0c24      	lsrs	r4, r4, #16
 800053e:	0003      	movs	r3, r0
 8000540:	430c      	orrs	r4, r1
 8000542:	42a2      	cmp	r2, r4
 8000544:	d906      	bls.n	8000554 <__aeabi_ddiv+0x168>
 8000546:	9900      	ldr	r1, [sp, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	468c      	mov	ip, r1
 800054c:	4464      	add	r4, ip
 800054e:	42a1      	cmp	r1, r4
 8000550:	d800      	bhi.n	8000554 <__aeabi_ddiv+0x168>
 8000552:	e1e1      	b.n	8000918 <__aeabi_ddiv+0x52c>
 8000554:	1aa0      	subs	r0, r4, r2
 8000556:	4642      	mov	r2, r8
 8000558:	0412      	lsls	r2, r2, #16
 800055a:	431a      	orrs	r2, r3
 800055c:	4693      	mov	fp, r2
 800055e:	464b      	mov	r3, r9
 8000560:	4659      	mov	r1, fp
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	001d      	movs	r5, r3
 8000566:	9304      	str	r3, [sp, #16]
 8000568:	040b      	lsls	r3, r1, #16
 800056a:	4649      	mov	r1, r9
 800056c:	0409      	lsls	r1, r1, #16
 800056e:	0c09      	lsrs	r1, r1, #16
 8000570:	000c      	movs	r4, r1
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	435c      	muls	r4, r3
 8000576:	0c12      	lsrs	r2, r2, #16
 8000578:	436b      	muls	r3, r5
 800057a:	4688      	mov	r8, r1
 800057c:	4351      	muls	r1, r2
 800057e:	436a      	muls	r2, r5
 8000580:	0c25      	lsrs	r5, r4, #16
 8000582:	46ac      	mov	ip, r5
 8000584:	185b      	adds	r3, r3, r1
 8000586:	4463      	add	r3, ip
 8000588:	4299      	cmp	r1, r3
 800058a:	d903      	bls.n	8000594 <__aeabi_ddiv+0x1a8>
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0249      	lsls	r1, r1, #9
 8000590:	468c      	mov	ip, r1
 8000592:	4462      	add	r2, ip
 8000594:	0c19      	lsrs	r1, r3, #16
 8000596:	0424      	lsls	r4, r4, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c24      	lsrs	r4, r4, #16
 800059c:	188a      	adds	r2, r1, r2
 800059e:	191c      	adds	r4, r3, r4
 80005a0:	4290      	cmp	r0, r2
 80005a2:	d302      	bcc.n	80005aa <__aeabi_ddiv+0x1be>
 80005a4:	d116      	bne.n	80005d4 <__aeabi_ddiv+0x1e8>
 80005a6:	42a7      	cmp	r7, r4
 80005a8:	d214      	bcs.n	80005d4 <__aeabi_ddiv+0x1e8>
 80005aa:	465b      	mov	r3, fp
 80005ac:	9d00      	ldr	r5, [sp, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	444f      	add	r7, r9
 80005b2:	9305      	str	r3, [sp, #20]
 80005b4:	454f      	cmp	r7, r9
 80005b6:	419b      	sbcs	r3, r3
 80005b8:	46ac      	mov	ip, r5
 80005ba:	425b      	negs	r3, r3
 80005bc:	4463      	add	r3, ip
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	4285      	cmp	r5, r0
 80005c2:	d300      	bcc.n	80005c6 <__aeabi_ddiv+0x1da>
 80005c4:	e1a1      	b.n	800090a <__aeabi_ddiv+0x51e>
 80005c6:	4282      	cmp	r2, r0
 80005c8:	d900      	bls.n	80005cc <__aeabi_ddiv+0x1e0>
 80005ca:	e1f6      	b.n	80009ba <__aeabi_ddiv+0x5ce>
 80005cc:	d100      	bne.n	80005d0 <__aeabi_ddiv+0x1e4>
 80005ce:	e1f1      	b.n	80009b4 <__aeabi_ddiv+0x5c8>
 80005d0:	9b05      	ldr	r3, [sp, #20]
 80005d2:	469b      	mov	fp, r3
 80005d4:	1b3c      	subs	r4, r7, r4
 80005d6:	42a7      	cmp	r7, r4
 80005d8:	41bf      	sbcs	r7, r7
 80005da:	9d00      	ldr	r5, [sp, #0]
 80005dc:	1a80      	subs	r0, r0, r2
 80005de:	427f      	negs	r7, r7
 80005e0:	1bc0      	subs	r0, r0, r7
 80005e2:	4285      	cmp	r5, r0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_ddiv+0x1fc>
 80005e6:	e1d0      	b.n	800098a <__aeabi_ddiv+0x59e>
 80005e8:	9902      	ldr	r1, [sp, #8]
 80005ea:	f7ff fe0f 	bl	800020c <__aeabi_uidivmod>
 80005ee:	9a03      	ldr	r2, [sp, #12]
 80005f0:	040b      	lsls	r3, r1, #16
 80005f2:	4342      	muls	r2, r0
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	0007      	movs	r7, r0
 80005f8:	4319      	orrs	r1, r3
 80005fa:	428a      	cmp	r2, r1
 80005fc:	d900      	bls.n	8000600 <__aeabi_ddiv+0x214>
 80005fe:	e178      	b.n	80008f2 <__aeabi_ddiv+0x506>
 8000600:	1a88      	subs	r0, r1, r2
 8000602:	9902      	ldr	r1, [sp, #8]
 8000604:	f7ff fe02 	bl	800020c <__aeabi_uidivmod>
 8000608:	9a03      	ldr	r2, [sp, #12]
 800060a:	0424      	lsls	r4, r4, #16
 800060c:	4342      	muls	r2, r0
 800060e:	0409      	lsls	r1, r1, #16
 8000610:	0c24      	lsrs	r4, r4, #16
 8000612:	0003      	movs	r3, r0
 8000614:	430c      	orrs	r4, r1
 8000616:	42a2      	cmp	r2, r4
 8000618:	d900      	bls.n	800061c <__aeabi_ddiv+0x230>
 800061a:	e15d      	b.n	80008d8 <__aeabi_ddiv+0x4ec>
 800061c:	4641      	mov	r1, r8
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	043a      	lsls	r2, r7, #16
 8000622:	431a      	orrs	r2, r3
 8000624:	9d04      	ldr	r5, [sp, #16]
 8000626:	0413      	lsls	r3, r2, #16
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	4359      	muls	r1, r3
 800062c:	4647      	mov	r7, r8
 800062e:	436b      	muls	r3, r5
 8000630:	469c      	mov	ip, r3
 8000632:	0c10      	lsrs	r0, r2, #16
 8000634:	4347      	muls	r7, r0
 8000636:	0c0b      	lsrs	r3, r1, #16
 8000638:	44bc      	add	ip, r7
 800063a:	4463      	add	r3, ip
 800063c:	4368      	muls	r0, r5
 800063e:	429f      	cmp	r7, r3
 8000640:	d903      	bls.n	800064a <__aeabi_ddiv+0x25e>
 8000642:	2580      	movs	r5, #128	@ 0x80
 8000644:	026d      	lsls	r5, r5, #9
 8000646:	46ac      	mov	ip, r5
 8000648:	4460      	add	r0, ip
 800064a:	0c1f      	lsrs	r7, r3, #16
 800064c:	0409      	lsls	r1, r1, #16
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	0c09      	lsrs	r1, r1, #16
 8000652:	183f      	adds	r7, r7, r0
 8000654:	185b      	adds	r3, r3, r1
 8000656:	42bc      	cmp	r4, r7
 8000658:	d200      	bcs.n	800065c <__aeabi_ddiv+0x270>
 800065a:	e102      	b.n	8000862 <__aeabi_ddiv+0x476>
 800065c:	d100      	bne.n	8000660 <__aeabi_ddiv+0x274>
 800065e:	e0fd      	b.n	800085c <__aeabi_ddiv+0x470>
 8000660:	2301      	movs	r3, #1
 8000662:	431a      	orrs	r2, r3
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <__aeabi_ddiv+0x388>)
 8000666:	4453      	add	r3, sl
 8000668:	2b00      	cmp	r3, #0
 800066a:	dc00      	bgt.n	800066e <__aeabi_ddiv+0x282>
 800066c:	e0ae      	b.n	80007cc <__aeabi_ddiv+0x3e0>
 800066e:	0751      	lsls	r1, r2, #29
 8000670:	d000      	beq.n	8000674 <__aeabi_ddiv+0x288>
 8000672:	e198      	b.n	80009a6 <__aeabi_ddiv+0x5ba>
 8000674:	4659      	mov	r1, fp
 8000676:	01c9      	lsls	r1, r1, #7
 8000678:	d506      	bpl.n	8000688 <__aeabi_ddiv+0x29c>
 800067a:	4659      	mov	r1, fp
 800067c:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <__aeabi_ddiv+0x38c>)
 800067e:	4019      	ands	r1, r3
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	468b      	mov	fp, r1
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4453      	add	r3, sl
 8000688:	493c      	ldr	r1, [pc, #240]	@ (800077c <__aeabi_ddiv+0x390>)
 800068a:	428b      	cmp	r3, r1
 800068c:	dd00      	ble.n	8000690 <__aeabi_ddiv+0x2a4>
 800068e:	e71a      	b.n	80004c6 <__aeabi_ddiv+0xda>
 8000690:	4659      	mov	r1, fp
 8000692:	08d2      	lsrs	r2, r2, #3
 8000694:	0749      	lsls	r1, r1, #29
 8000696:	4311      	orrs	r1, r2
 8000698:	465a      	mov	r2, fp
 800069a:	055b      	lsls	r3, r3, #21
 800069c:	0254      	lsls	r4, r2, #9
 800069e:	4688      	mov	r8, r1
 80006a0:	0b24      	lsrs	r4, r4, #12
 80006a2:	0d5b      	lsrs	r3, r3, #21
 80006a4:	e702      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80006a6:	465a      	mov	r2, fp
 80006a8:	9b00      	ldr	r3, [sp, #0]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x2c4>
 80006ae:	e07e      	b.n	80007ae <__aeabi_ddiv+0x3c2>
 80006b0:	465b      	mov	r3, fp
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_ddiv+0x2cc>
 80006b6:	e100      	b.n	80008ba <__aeabi_ddiv+0x4ce>
 80006b8:	4658      	mov	r0, fp
 80006ba:	f000 fa1b 	bl	8000af4 <__clzsi2>
 80006be:	0002      	movs	r2, r0
 80006c0:	0003      	movs	r3, r0
 80006c2:	3a0b      	subs	r2, #11
 80006c4:	271d      	movs	r7, #29
 80006c6:	9e00      	ldr	r6, [sp, #0]
 80006c8:	1aba      	subs	r2, r7, r2
 80006ca:	0019      	movs	r1, r3
 80006cc:	4658      	mov	r0, fp
 80006ce:	40d6      	lsrs	r6, r2
 80006d0:	3908      	subs	r1, #8
 80006d2:	4088      	lsls	r0, r1
 80006d4:	0032      	movs	r2, r6
 80006d6:	4302      	orrs	r2, r0
 80006d8:	4693      	mov	fp, r2
 80006da:	9a00      	ldr	r2, [sp, #0]
 80006dc:	408a      	lsls	r2, r1
 80006de:	4928      	ldr	r1, [pc, #160]	@ (8000780 <__aeabi_ddiv+0x394>)
 80006e0:	4453      	add	r3, sl
 80006e2:	468a      	mov	sl, r1
 80006e4:	449a      	add	sl, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	e6c8      	b.n	800047c <__aeabi_ddiv+0x90>
 80006ea:	465b      	mov	r3, fp
 80006ec:	4303      	orrs	r3, r0
 80006ee:	4699      	mov	r9, r3
 80006f0:	d056      	beq.n	80007a0 <__aeabi_ddiv+0x3b4>
 80006f2:	465b      	mov	r3, fp
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_ddiv+0x30e>
 80006f8:	e0cd      	b.n	8000896 <__aeabi_ddiv+0x4aa>
 80006fa:	4658      	mov	r0, fp
 80006fc:	f000 f9fa 	bl	8000af4 <__clzsi2>
 8000700:	230b      	movs	r3, #11
 8000702:	425b      	negs	r3, r3
 8000704:	469c      	mov	ip, r3
 8000706:	0002      	movs	r2, r0
 8000708:	4484      	add	ip, r0
 800070a:	4666      	mov	r6, ip
 800070c:	231d      	movs	r3, #29
 800070e:	1b9b      	subs	r3, r3, r6
 8000710:	0026      	movs	r6, r4
 8000712:	0011      	movs	r1, r2
 8000714:	4658      	mov	r0, fp
 8000716:	40de      	lsrs	r6, r3
 8000718:	3908      	subs	r1, #8
 800071a:	4088      	lsls	r0, r1
 800071c:	0033      	movs	r3, r6
 800071e:	4303      	orrs	r3, r0
 8000720:	4699      	mov	r9, r3
 8000722:	0023      	movs	r3, r4
 8000724:	408b      	lsls	r3, r1
 8000726:	4698      	mov	r8, r3
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <__aeabi_ddiv+0x398>)
 800072a:	2400      	movs	r4, #0
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	469a      	mov	sl, r3
 8000730:	2300      	movs	r3, #0
 8000732:	9303      	str	r3, [sp, #12]
 8000734:	e682      	b.n	800043c <__aeabi_ddiv+0x50>
 8000736:	465a      	mov	r2, fp
 8000738:	4302      	orrs	r2, r0
 800073a:	4691      	mov	r9, r2
 800073c:	d12a      	bne.n	8000794 <__aeabi_ddiv+0x3a8>
 800073e:	2200      	movs	r2, #0
 8000740:	469a      	mov	sl, r3
 8000742:	2302      	movs	r3, #2
 8000744:	4690      	mov	r8, r2
 8000746:	2408      	movs	r4, #8
 8000748:	9303      	str	r3, [sp, #12]
 800074a:	e677      	b.n	800043c <__aeabi_ddiv+0x50>
 800074c:	465a      	mov	r2, fp
 800074e:	9b00      	ldr	r3, [sp, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <__aeabi_ddiv+0x39c>)
 8000754:	469c      	mov	ip, r3
 8000756:	44e2      	add	sl, ip
 8000758:	2a00      	cmp	r2, #0
 800075a:	d117      	bne.n	800078c <__aeabi_ddiv+0x3a0>
 800075c:	2302      	movs	r3, #2
 800075e:	431c      	orrs	r4, r3
 8000760:	2300      	movs	r3, #0
 8000762:	469b      	mov	fp, r3
 8000764:	3302      	adds	r3, #2
 8000766:	e689      	b.n	800047c <__aeabi_ddiv+0x90>
 8000768:	000007ff 	.word	0x000007ff
 800076c:	fffffc01 	.word	0xfffffc01
 8000770:	080056f0 	.word	0x080056f0
 8000774:	000003ff 	.word	0x000003ff
 8000778:	feffffff 	.word	0xfeffffff
 800077c:	000007fe 	.word	0x000007fe
 8000780:	000003f3 	.word	0x000003f3
 8000784:	fffffc0d 	.word	0xfffffc0d
 8000788:	fffff801 	.word	0xfffff801
 800078c:	2303      	movs	r3, #3
 800078e:	0032      	movs	r2, r6
 8000790:	431c      	orrs	r4, r3
 8000792:	e673      	b.n	800047c <__aeabi_ddiv+0x90>
 8000794:	469a      	mov	sl, r3
 8000796:	2303      	movs	r3, #3
 8000798:	46d9      	mov	r9, fp
 800079a:	240c      	movs	r4, #12
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	e64d      	b.n	800043c <__aeabi_ddiv+0x50>
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	469a      	mov	sl, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	2404      	movs	r4, #4
 80007aa:	9303      	str	r3, [sp, #12]
 80007ac:	e646      	b.n	800043c <__aeabi_ddiv+0x50>
 80007ae:	2301      	movs	r3, #1
 80007b0:	431c      	orrs	r4, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	469b      	mov	fp, r3
 80007b6:	3301      	adds	r3, #1
 80007b8:	e660      	b.n	800047c <__aeabi_ddiv+0x90>
 80007ba:	2300      	movs	r3, #0
 80007bc:	2480      	movs	r4, #128	@ 0x80
 80007be:	4698      	mov	r8, r3
 80007c0:	2600      	movs	r6, #0
 80007c2:	4b92      	ldr	r3, [pc, #584]	@ (8000a0c <__aeabi_ddiv+0x620>)
 80007c4:	0324      	lsls	r4, r4, #12
 80007c6:	e671      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80007c8:	2201      	movs	r2, #1
 80007ca:	4252      	negs	r2, r2
 80007cc:	2101      	movs	r1, #1
 80007ce:	1ac9      	subs	r1, r1, r3
 80007d0:	2938      	cmp	r1, #56	@ 0x38
 80007d2:	dd00      	ble.n	80007d6 <__aeabi_ddiv+0x3ea>
 80007d4:	e666      	b.n	80004a4 <__aeabi_ddiv+0xb8>
 80007d6:	291f      	cmp	r1, #31
 80007d8:	dc00      	bgt.n	80007dc <__aeabi_ddiv+0x3f0>
 80007da:	e0ab      	b.n	8000934 <__aeabi_ddiv+0x548>
 80007dc:	201f      	movs	r0, #31
 80007de:	4240      	negs	r0, r0
 80007e0:	1ac3      	subs	r3, r0, r3
 80007e2:	4658      	mov	r0, fp
 80007e4:	40d8      	lsrs	r0, r3
 80007e6:	0003      	movs	r3, r0
 80007e8:	2920      	cmp	r1, #32
 80007ea:	d004      	beq.n	80007f6 <__aeabi_ddiv+0x40a>
 80007ec:	4658      	mov	r0, fp
 80007ee:	4988      	ldr	r1, [pc, #544]	@ (8000a10 <__aeabi_ddiv+0x624>)
 80007f0:	4451      	add	r1, sl
 80007f2:	4088      	lsls	r0, r1
 80007f4:	4302      	orrs	r2, r0
 80007f6:	1e51      	subs	r1, r2, #1
 80007f8:	418a      	sbcs	r2, r1
 80007fa:	431a      	orrs	r2, r3
 80007fc:	2307      	movs	r3, #7
 80007fe:	0019      	movs	r1, r3
 8000800:	2400      	movs	r4, #0
 8000802:	4011      	ands	r1, r2
 8000804:	4213      	tst	r3, r2
 8000806:	d00c      	beq.n	8000822 <__aeabi_ddiv+0x436>
 8000808:	230f      	movs	r3, #15
 800080a:	4013      	ands	r3, r2
 800080c:	2b04      	cmp	r3, #4
 800080e:	d100      	bne.n	8000812 <__aeabi_ddiv+0x426>
 8000810:	e0f9      	b.n	8000a06 <__aeabi_ddiv+0x61a>
 8000812:	1d11      	adds	r1, r2, #4
 8000814:	4291      	cmp	r1, r2
 8000816:	419b      	sbcs	r3, r3
 8000818:	000a      	movs	r2, r1
 800081a:	425b      	negs	r3, r3
 800081c:	0759      	lsls	r1, r3, #29
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	0b1c      	lsrs	r4, r3, #12
 8000822:	08d2      	lsrs	r2, r2, #3
 8000824:	430a      	orrs	r2, r1
 8000826:	4690      	mov	r8, r2
 8000828:	2300      	movs	r3, #0
 800082a:	e63f      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800082c:	2480      	movs	r4, #128	@ 0x80
 800082e:	464b      	mov	r3, r9
 8000830:	0324      	lsls	r4, r4, #12
 8000832:	4223      	tst	r3, r4
 8000834:	d009      	beq.n	800084a <__aeabi_ddiv+0x45e>
 8000836:	465b      	mov	r3, fp
 8000838:	4223      	tst	r3, r4
 800083a:	d106      	bne.n	800084a <__aeabi_ddiv+0x45e>
 800083c:	431c      	orrs	r4, r3
 800083e:	0324      	lsls	r4, r4, #12
 8000840:	002e      	movs	r6, r5
 8000842:	4690      	mov	r8, r2
 8000844:	4b71      	ldr	r3, [pc, #452]	@ (8000a0c <__aeabi_ddiv+0x620>)
 8000846:	0b24      	lsrs	r4, r4, #12
 8000848:	e630      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800084a:	2480      	movs	r4, #128	@ 0x80
 800084c:	464b      	mov	r3, r9
 800084e:	0324      	lsls	r4, r4, #12
 8000850:	431c      	orrs	r4, r3
 8000852:	0324      	lsls	r4, r4, #12
 8000854:	9e02      	ldr	r6, [sp, #8]
 8000856:	4b6d      	ldr	r3, [pc, #436]	@ (8000a0c <__aeabi_ddiv+0x620>)
 8000858:	0b24      	lsrs	r4, r4, #12
 800085a:	e627      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_ddiv+0x476>
 8000860:	e700      	b.n	8000664 <__aeabi_ddiv+0x278>
 8000862:	9800      	ldr	r0, [sp, #0]
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	4684      	mov	ip, r0
 8000868:	4464      	add	r4, ip
 800086a:	4284      	cmp	r4, r0
 800086c:	d200      	bcs.n	8000870 <__aeabi_ddiv+0x484>
 800086e:	e084      	b.n	800097a <__aeabi_ddiv+0x58e>
 8000870:	42bc      	cmp	r4, r7
 8000872:	d200      	bcs.n	8000876 <__aeabi_ddiv+0x48a>
 8000874:	e0ae      	b.n	80009d4 <__aeabi_ddiv+0x5e8>
 8000876:	d100      	bne.n	800087a <__aeabi_ddiv+0x48e>
 8000878:	e0c1      	b.n	80009fe <__aeabi_ddiv+0x612>
 800087a:	000a      	movs	r2, r1
 800087c:	e6f0      	b.n	8000660 <__aeabi_ddiv+0x274>
 800087e:	4542      	cmp	r2, r8
 8000880:	d900      	bls.n	8000884 <__aeabi_ddiv+0x498>
 8000882:	e62c      	b.n	80004de <__aeabi_ddiv+0xf2>
 8000884:	464b      	mov	r3, r9
 8000886:	07dc      	lsls	r4, r3, #31
 8000888:	0858      	lsrs	r0, r3, #1
 800088a:	4643      	mov	r3, r8
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	431c      	orrs	r4, r3
 8000890:	4643      	mov	r3, r8
 8000892:	07df      	lsls	r7, r3, #31
 8000894:	e62a      	b.n	80004ec <__aeabi_ddiv+0x100>
 8000896:	f000 f92d 	bl	8000af4 <__clzsi2>
 800089a:	2315      	movs	r3, #21
 800089c:	469c      	mov	ip, r3
 800089e:	4484      	add	ip, r0
 80008a0:	0002      	movs	r2, r0
 80008a2:	4663      	mov	r3, ip
 80008a4:	3220      	adds	r2, #32
 80008a6:	2b1c      	cmp	r3, #28
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_ddiv+0x4c0>
 80008aa:	e72e      	b.n	800070a <__aeabi_ddiv+0x31e>
 80008ac:	0023      	movs	r3, r4
 80008ae:	3808      	subs	r0, #8
 80008b0:	4083      	lsls	r3, r0
 80008b2:	4699      	mov	r9, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	4698      	mov	r8, r3
 80008b8:	e736      	b.n	8000728 <__aeabi_ddiv+0x33c>
 80008ba:	f000 f91b 	bl	8000af4 <__clzsi2>
 80008be:	0002      	movs	r2, r0
 80008c0:	0003      	movs	r3, r0
 80008c2:	3215      	adds	r2, #21
 80008c4:	3320      	adds	r3, #32
 80008c6:	2a1c      	cmp	r2, #28
 80008c8:	dc00      	bgt.n	80008cc <__aeabi_ddiv+0x4e0>
 80008ca:	e6fb      	b.n	80006c4 <__aeabi_ddiv+0x2d8>
 80008cc:	9900      	ldr	r1, [sp, #0]
 80008ce:	3808      	subs	r0, #8
 80008d0:	4081      	lsls	r1, r0
 80008d2:	2200      	movs	r2, #0
 80008d4:	468b      	mov	fp, r1
 80008d6:	e702      	b.n	80006de <__aeabi_ddiv+0x2f2>
 80008d8:	9900      	ldr	r1, [sp, #0]
 80008da:	3b01      	subs	r3, #1
 80008dc:	468c      	mov	ip, r1
 80008de:	4464      	add	r4, ip
 80008e0:	42a1      	cmp	r1, r4
 80008e2:	d900      	bls.n	80008e6 <__aeabi_ddiv+0x4fa>
 80008e4:	e69a      	b.n	800061c <__aeabi_ddiv+0x230>
 80008e6:	42a2      	cmp	r2, r4
 80008e8:	d800      	bhi.n	80008ec <__aeabi_ddiv+0x500>
 80008ea:	e697      	b.n	800061c <__aeabi_ddiv+0x230>
 80008ec:	1e83      	subs	r3, r0, #2
 80008ee:	4464      	add	r4, ip
 80008f0:	e694      	b.n	800061c <__aeabi_ddiv+0x230>
 80008f2:	46ac      	mov	ip, r5
 80008f4:	4461      	add	r1, ip
 80008f6:	3f01      	subs	r7, #1
 80008f8:	428d      	cmp	r5, r1
 80008fa:	d900      	bls.n	80008fe <__aeabi_ddiv+0x512>
 80008fc:	e680      	b.n	8000600 <__aeabi_ddiv+0x214>
 80008fe:	428a      	cmp	r2, r1
 8000900:	d800      	bhi.n	8000904 <__aeabi_ddiv+0x518>
 8000902:	e67d      	b.n	8000600 <__aeabi_ddiv+0x214>
 8000904:	1e87      	subs	r7, r0, #2
 8000906:	4461      	add	r1, ip
 8000908:	e67a      	b.n	8000600 <__aeabi_ddiv+0x214>
 800090a:	4285      	cmp	r5, r0
 800090c:	d000      	beq.n	8000910 <__aeabi_ddiv+0x524>
 800090e:	e65f      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 8000910:	45b9      	cmp	r9, r7
 8000912:	d900      	bls.n	8000916 <__aeabi_ddiv+0x52a>
 8000914:	e65c      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 8000916:	e656      	b.n	80005c6 <__aeabi_ddiv+0x1da>
 8000918:	42a2      	cmp	r2, r4
 800091a:	d800      	bhi.n	800091e <__aeabi_ddiv+0x532>
 800091c:	e61a      	b.n	8000554 <__aeabi_ddiv+0x168>
 800091e:	1e83      	subs	r3, r0, #2
 8000920:	4464      	add	r4, ip
 8000922:	e617      	b.n	8000554 <__aeabi_ddiv+0x168>
 8000924:	428a      	cmp	r2, r1
 8000926:	d800      	bhi.n	800092a <__aeabi_ddiv+0x53e>
 8000928:	e600      	b.n	800052c <__aeabi_ddiv+0x140>
 800092a:	46ac      	mov	ip, r5
 800092c:	1e83      	subs	r3, r0, #2
 800092e:	4698      	mov	r8, r3
 8000930:	4461      	add	r1, ip
 8000932:	e5fb      	b.n	800052c <__aeabi_ddiv+0x140>
 8000934:	4837      	ldr	r0, [pc, #220]	@ (8000a14 <__aeabi_ddiv+0x628>)
 8000936:	0014      	movs	r4, r2
 8000938:	4450      	add	r0, sl
 800093a:	4082      	lsls	r2, r0
 800093c:	465b      	mov	r3, fp
 800093e:	0017      	movs	r7, r2
 8000940:	4083      	lsls	r3, r0
 8000942:	40cc      	lsrs	r4, r1
 8000944:	1e7a      	subs	r2, r7, #1
 8000946:	4197      	sbcs	r7, r2
 8000948:	4323      	orrs	r3, r4
 800094a:	433b      	orrs	r3, r7
 800094c:	001a      	movs	r2, r3
 800094e:	465b      	mov	r3, fp
 8000950:	40cb      	lsrs	r3, r1
 8000952:	0751      	lsls	r1, r2, #29
 8000954:	d009      	beq.n	800096a <__aeabi_ddiv+0x57e>
 8000956:	210f      	movs	r1, #15
 8000958:	4011      	ands	r1, r2
 800095a:	2904      	cmp	r1, #4
 800095c:	d005      	beq.n	800096a <__aeabi_ddiv+0x57e>
 800095e:	1d11      	adds	r1, r2, #4
 8000960:	4291      	cmp	r1, r2
 8000962:	4192      	sbcs	r2, r2
 8000964:	4252      	negs	r2, r2
 8000966:	189b      	adds	r3, r3, r2
 8000968:	000a      	movs	r2, r1
 800096a:	0219      	lsls	r1, r3, #8
 800096c:	d400      	bmi.n	8000970 <__aeabi_ddiv+0x584>
 800096e:	e755      	b.n	800081c <__aeabi_ddiv+0x430>
 8000970:	2200      	movs	r2, #0
 8000972:	2301      	movs	r3, #1
 8000974:	2400      	movs	r4, #0
 8000976:	4690      	mov	r8, r2
 8000978:	e598      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800097a:	000a      	movs	r2, r1
 800097c:	42bc      	cmp	r4, r7
 800097e:	d000      	beq.n	8000982 <__aeabi_ddiv+0x596>
 8000980:	e66e      	b.n	8000660 <__aeabi_ddiv+0x274>
 8000982:	454b      	cmp	r3, r9
 8000984:	d000      	beq.n	8000988 <__aeabi_ddiv+0x59c>
 8000986:	e66b      	b.n	8000660 <__aeabi_ddiv+0x274>
 8000988:	e66c      	b.n	8000664 <__aeabi_ddiv+0x278>
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <__aeabi_ddiv+0x62c>)
 800098c:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <__aeabi_ddiv+0x630>)
 800098e:	4453      	add	r3, sl
 8000990:	4592      	cmp	sl, r2
 8000992:	da00      	bge.n	8000996 <__aeabi_ddiv+0x5aa>
 8000994:	e718      	b.n	80007c8 <__aeabi_ddiv+0x3dc>
 8000996:	2101      	movs	r1, #1
 8000998:	4249      	negs	r1, r1
 800099a:	1d0a      	adds	r2, r1, #4
 800099c:	428a      	cmp	r2, r1
 800099e:	4189      	sbcs	r1, r1
 80009a0:	4249      	negs	r1, r1
 80009a2:	448b      	add	fp, r1
 80009a4:	e666      	b.n	8000674 <__aeabi_ddiv+0x288>
 80009a6:	210f      	movs	r1, #15
 80009a8:	4011      	ands	r1, r2
 80009aa:	2904      	cmp	r1, #4
 80009ac:	d100      	bne.n	80009b0 <__aeabi_ddiv+0x5c4>
 80009ae:	e661      	b.n	8000674 <__aeabi_ddiv+0x288>
 80009b0:	0011      	movs	r1, r2
 80009b2:	e7f2      	b.n	800099a <__aeabi_ddiv+0x5ae>
 80009b4:	42bc      	cmp	r4, r7
 80009b6:	d800      	bhi.n	80009ba <__aeabi_ddiv+0x5ce>
 80009b8:	e60a      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 80009ba:	2302      	movs	r3, #2
 80009bc:	425b      	negs	r3, r3
 80009be:	469c      	mov	ip, r3
 80009c0:	9900      	ldr	r1, [sp, #0]
 80009c2:	444f      	add	r7, r9
 80009c4:	454f      	cmp	r7, r9
 80009c6:	419b      	sbcs	r3, r3
 80009c8:	44e3      	add	fp, ip
 80009ca:	468c      	mov	ip, r1
 80009cc:	425b      	negs	r3, r3
 80009ce:	4463      	add	r3, ip
 80009d0:	18c0      	adds	r0, r0, r3
 80009d2:	e5ff      	b.n	80005d4 <__aeabi_ddiv+0x1e8>
 80009d4:	4649      	mov	r1, r9
 80009d6:	9d00      	ldr	r5, [sp, #0]
 80009d8:	0048      	lsls	r0, r1, #1
 80009da:	4548      	cmp	r0, r9
 80009dc:	4189      	sbcs	r1, r1
 80009de:	46ac      	mov	ip, r5
 80009e0:	4249      	negs	r1, r1
 80009e2:	4461      	add	r1, ip
 80009e4:	4681      	mov	r9, r0
 80009e6:	3a02      	subs	r2, #2
 80009e8:	1864      	adds	r4, r4, r1
 80009ea:	e7c7      	b.n	800097c <__aeabi_ddiv+0x590>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	465b      	mov	r3, fp
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	431c      	orrs	r4, r3
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	4690      	mov	r8, r2
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__aeabi_ddiv+0x620>)
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	e556      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80009fe:	4599      	cmp	r9, r3
 8000a00:	d3e8      	bcc.n	80009d4 <__aeabi_ddiv+0x5e8>
 8000a02:	000a      	movs	r2, r1
 8000a04:	e7bd      	b.n	8000982 <__aeabi_ddiv+0x596>
 8000a06:	2300      	movs	r3, #0
 8000a08:	e708      	b.n	800081c <__aeabi_ddiv+0x430>
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	0000043e 	.word	0x0000043e
 8000a14:	0000041e 	.word	0x0000041e
 8000a18:	000003ff 	.word	0x000003ff
 8000a1c:	fffffc02 	.word	0xfffffc02

08000a20 <__aeabi_d2iz>:
 8000a20:	000b      	movs	r3, r1
 8000a22:	0002      	movs	r2, r0
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4d16      	ldr	r5, [pc, #88]	@ (8000a80 <__aeabi_d2iz+0x60>)
 8000a28:	030c      	lsls	r4, r1, #12
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	0049      	lsls	r1, r1, #1
 8000a2e:	2000      	movs	r0, #0
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	0b24      	lsrs	r4, r4, #12
 8000a36:	0d49      	lsrs	r1, r1, #21
 8000a38:	0fde      	lsrs	r6, r3, #31
 8000a3a:	42a9      	cmp	r1, r5
 8000a3c:	dd04      	ble.n	8000a48 <__aeabi_d2iz+0x28>
 8000a3e:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <__aeabi_d2iz+0x64>)
 8000a40:	4281      	cmp	r1, r0
 8000a42:	dd03      	ble.n	8000a4c <__aeabi_d2iz+0x2c>
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <__aeabi_d2iz+0x68>)
 8000a46:	18f0      	adds	r0, r6, r3
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	2080      	movs	r0, #128	@ 0x80
 8000a4e:	0340      	lsls	r0, r0, #13
 8000a50:	4320      	orrs	r0, r4
 8000a52:	4c0e      	ldr	r4, [pc, #56]	@ (8000a8c <__aeabi_d2iz+0x6c>)
 8000a54:	1a64      	subs	r4, r4, r1
 8000a56:	2c1f      	cmp	r4, #31
 8000a58:	dd08      	ble.n	8000a6c <__aeabi_d2iz+0x4c>
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <__aeabi_d2iz+0x70>)
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	40d8      	lsrs	r0, r3
 8000a60:	0003      	movs	r3, r0
 8000a62:	4258      	negs	r0, r3
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d1ef      	bne.n	8000a48 <__aeabi_d2iz+0x28>
 8000a68:	0018      	movs	r0, r3
 8000a6a:	e7ed      	b.n	8000a48 <__aeabi_d2iz+0x28>
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <__aeabi_d2iz+0x74>)
 8000a6e:	9a00      	ldr	r2, [sp, #0]
 8000a70:	469c      	mov	ip, r3
 8000a72:	0003      	movs	r3, r0
 8000a74:	4461      	add	r1, ip
 8000a76:	408b      	lsls	r3, r1
 8000a78:	40e2      	lsrs	r2, r4
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	e7f1      	b.n	8000a62 <__aeabi_d2iz+0x42>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000003fe 	.word	0x000003fe
 8000a84:	0000041d 	.word	0x0000041d
 8000a88:	7fffffff 	.word	0x7fffffff
 8000a8c:	00000433 	.word	0x00000433
 8000a90:	00000413 	.word	0x00000413
 8000a94:	fffffbed 	.word	0xfffffbed

08000a98 <__aeabi_i2d>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d016      	beq.n	8000acc <__aeabi_i2d+0x34>
 8000a9e:	17c3      	asrs	r3, r0, #31
 8000aa0:	18c5      	adds	r5, r0, r3
 8000aa2:	405d      	eors	r5, r3
 8000aa4:	0fc4      	lsrs	r4, r0, #31
 8000aa6:	0028      	movs	r0, r5
 8000aa8:	f000 f824 	bl	8000af4 <__clzsi2>
 8000aac:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <__aeabi_i2d+0x58>)
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	055b      	lsls	r3, r3, #21
 8000ab2:	0d5b      	lsrs	r3, r3, #21
 8000ab4:	280a      	cmp	r0, #10
 8000ab6:	dc14      	bgt.n	8000ae2 <__aeabi_i2d+0x4a>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	002e      	movs	r6, r5
 8000abc:	3215      	adds	r2, #21
 8000abe:	4096      	lsls	r6, r2
 8000ac0:	220b      	movs	r2, #11
 8000ac2:	1a12      	subs	r2, r2, r0
 8000ac4:	40d5      	lsrs	r5, r2
 8000ac6:	032d      	lsls	r5, r5, #12
 8000ac8:	0b2d      	lsrs	r5, r5, #12
 8000aca:	e003      	b.n	8000ad4 <__aeabi_i2d+0x3c>
 8000acc:	2400      	movs	r4, #0
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	051b      	lsls	r3, r3, #20
 8000ad6:	432b      	orrs	r3, r5
 8000ad8:	07e4      	lsls	r4, r4, #31
 8000ada:	4323      	orrs	r3, r4
 8000adc:	0030      	movs	r0, r6
 8000ade:	0019      	movs	r1, r3
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	380b      	subs	r0, #11
 8000ae4:	4085      	lsls	r5, r0
 8000ae6:	032d      	lsls	r5, r5, #12
 8000ae8:	2600      	movs	r6, #0
 8000aea:	0b2d      	lsrs	r5, r5, #12
 8000aec:	e7f2      	b.n	8000ad4 <__aeabi_i2d+0x3c>
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	0000041e 	.word	0x0000041e

08000af4 <__clzsi2>:
 8000af4:	211c      	movs	r1, #28
 8000af6:	2301      	movs	r3, #1
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d301      	bcc.n	8000b02 <__clzsi2+0xe>
 8000afe:	0c00      	lsrs	r0, r0, #16
 8000b00:	3910      	subs	r1, #16
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d301      	bcc.n	8000b0c <__clzsi2+0x18>
 8000b08:	0a00      	lsrs	r0, r0, #8
 8000b0a:	3908      	subs	r1, #8
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d301      	bcc.n	8000b16 <__clzsi2+0x22>
 8000b12:	0900      	lsrs	r0, r0, #4
 8000b14:	3904      	subs	r1, #4
 8000b16:	a202      	add	r2, pc, #8	@ (adr r2, 8000b20 <__clzsi2+0x2c>)
 8000b18:	5c10      	ldrb	r0, [r2, r0]
 8000b1a:	1840      	adds	r0, r0, r1
 8000b1c:	4770      	bx	lr
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	02020304 	.word	0x02020304
 8000b24:	01010101 	.word	0x01010101
	...

08000b30 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b08f      	sub	sp, #60	@ 0x3c
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000b38:	200c      	movs	r0, #12
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	22b2      	movs	r2, #178	@ 0xb2
 8000b3e:	32ff      	adds	r2, #255	@ 0xff
 8000b40:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 8000b42:	183b      	adds	r3, r7, r0
 8000b44:	2224      	movs	r2, #36	@ 0x24
 8000b46:	2107      	movs	r1, #7
 8000b48:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000b4a:	183b      	adds	r3, r7, r0
 8000b4c:	2225      	movs	r2, #37	@ 0x25
 8000b4e:	2107      	movs	r1, #7
 8000b50:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8000b52:	183b      	adds	r3, r7, r0
 8000b54:	2226      	movs	r2, #38	@ 0x26
 8000b56:	2101      	movs	r1, #1
 8000b58:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 8000b5a:	183b      	adds	r3, r7, r0
 8000b5c:	222a      	movs	r2, #42	@ 0x2a
 8000b5e:	21ff      	movs	r1, #255	@ 0xff
 8000b60:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8000b62:	183b      	adds	r3, r7, r0
 8000b64:	222b      	movs	r2, #43	@ 0x2b
 8000b66:	2164      	movs	r1, #100	@ 0x64
 8000b68:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 8000b6a:	0001      	movs	r1, r0
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2208      	movs	r2, #8
 8000b70:	851a      	strh	r2, [r3, #40]	@ 0x28

	return new_LoRa;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	187a      	adds	r2, r7, r1
 8000b76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b78:	c313      	stmia	r3!, {r0, r1, r4}
 8000b7a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b7c:	c313      	stmia	r3!, {r0, r1, r4}
 8000b7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b80:	c313      	stmia	r3!, {r0, r1, r4}
 8000b82:	ca03      	ldmia	r2!, {r0, r1}
 8000b84:	c303      	stmia	r3!, {r0, r1}
}
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b00f      	add	sp, #60	@ 0x3c
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000b8e:	b5b0      	push	{r4, r5, r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000b98:	250e      	movs	r5, #14
 8000b9a:	197c      	adds	r4, r7, r5
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fa59 	bl	8001058 <LoRa_read>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	7023      	strb	r3, [r4, #0]
	data = read;
 8000baa:	200f      	movs	r0, #15
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	0029      	movs	r1, r5
 8000bb0:	187a      	adds	r2, r7, r1
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d109      	bne.n	8000bd0 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8000bbc:	183b      	adds	r3, r7, r0
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
 8000bce:	e04e      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d110      	bne.n	8000bf8 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000bd6:	230e      	movs	r3, #14
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	2207      	movs	r2, #7
 8000be0:	4393      	bics	r3, r2
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	2201      	movs	r2, #1
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	230f      	movs	r3, #15
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	61da      	str	r2, [r3, #28]
 8000bf6:	e03a      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d110      	bne.n	8000c20 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8000bfe:	230e      	movs	r3, #14
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	2207      	movs	r2, #7
 8000c08:	4393      	bics	r3, r2
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	230f      	movs	r3, #15
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	61da      	str	r2, [r3, #28]
 8000c1e:	e026      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d110      	bne.n	8000c48 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 8000c26:	230e      	movs	r3, #14
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	2207      	movs	r2, #7
 8000c30:	4393      	bics	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	2205      	movs	r2, #5
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2205      	movs	r2, #5
 8000c44:	61da      	str	r2, [r3, #28]
 8000c46:	e012      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d10f      	bne.n	8000c6e <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 8000c4e:	230e      	movs	r3, #14
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	2207      	movs	r2, #7
 8000c58:	4393      	bics	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	2206      	movs	r2, #6
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b25a      	sxtb	r2, r3
 8000c62:	230f      	movs	r3, #15
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2101      	movs	r1, #1
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fa0b 	bl	8001094 <LoRa_write>
	//HAL_Delay(10);
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bdb0      	pop	{r4, r5, r7, pc}

08000c86 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000c86:	b590      	push	{r4, r7, lr}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	889b      	ldrh	r3, [r3, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	f002 f98c 	bl	8002fbe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6998      	ldr	r0, [r3, #24]
 8000caa:	23fa      	movs	r3, #250	@ 0xfa
 8000cac:	00dc      	lsls	r4, r3, #3
 8000cae:	1dbb      	adds	r3, r7, #6
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	0023      	movs	r3, r4
 8000cb6:	f003 f883 	bl	8003dc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f003 fd11 	bl	80046e8 <HAL_SPI_GetState>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d1f7      	bne.n	8000cbc <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6998      	ldr	r0, [r3, #24]
 8000cd0:	23fa      	movs	r3, #250	@ 0xfa
 8000cd2:	00dc      	lsls	r4, r3, #3
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	6839      	ldr	r1, [r7, #0]
 8000cdc:	0023      	movs	r3, r4
 8000cde:	f003 f9cf 	bl	8004080 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f003 fcfd 	bl	80046e8 <HAL_SPI_GetState>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d1f7      	bne.n	8000ce4 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	889b      	ldrh	r3, [r3, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	0019      	movs	r1, r3
 8000d00:	f002 f95d 	bl	8002fbe <HAL_GPIO_WritePin>
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b005      	add	sp, #20
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	889b      	ldrh	r3, [r3, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f002 f949 	bl	8002fbe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	23fa      	movs	r3, #250	@ 0xfa
 8000d32:	00dc      	lsls	r4, r3, #3
 8000d34:	1dbb      	adds	r3, r7, #6
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	0023      	movs	r3, r4
 8000d3c:	f003 f840 	bl	8003dc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	0018      	movs	r0, r3
 8000d48:	f003 fcce 	bl	80046e8 <HAL_SPI_GetState>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1f7      	bne.n	8000d42 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6998      	ldr	r0, [r3, #24]
 8000d56:	23fa      	movs	r3, #250	@ 0xfa
 8000d58:	00dc      	lsls	r4, r3, #3
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	0023      	movs	r3, r4
 8000d64:	f003 f82c 	bl	8003dc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f003 fcba 	bl	80046e8 <HAL_SPI_GetState>
 8000d74:	0003      	movs	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d1f7      	bne.n	8000d6a <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	889b      	ldrh	r3, [r3, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	0019      	movs	r1, r3
 8000d86:	f002 f91a 	bl	8002fbe <HAL_GPIO_WritePin>
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b005      	add	sp, #20
 8000d90:	bd90      	pop	{r4, r7, pc}

08000d92 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000d92:	b5b0      	push	{r4, r5, r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	1cfb      	adds	r3, r7, #3
 8000d9e:	701a      	strb	r2, [r3, #0]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000da0:	250e      	movs	r5, #14
 8000da2:	197c      	adds	r4, r7, r5
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2126      	movs	r1, #38	@ 0x26
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f955 	bl	8001058 <LoRa_read>
 8000dae:	0003      	movs	r3, r0
 8000db0:	7023      	strb	r3, [r4, #0]
	
	if(value)
 8000db2:	1cfb      	adds	r3, r7, #3
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <LoRa_setLowDaraRateOptimization+0x38>
		data = read | 0x08;
 8000dba:	230f      	movs	r3, #15
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	197a      	adds	r2, r7, r5
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <LoRa_setLowDaraRateOptimization+0x48>
	else
		data = read & 0xF7;
 8000dca:	230f      	movs	r3, #15
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	220e      	movs	r2, #14
 8000dd0:	18ba      	adds	r2, r7, r2
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	438a      	bics	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2126      	movs	r1, #38	@ 0x26
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 f955 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8000dea:	200a      	movs	r0, #10
 8000dec:	f001 f85a 	bl	8001ea4 <HAL_Delay>
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b004      	add	sp, #16
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}

08000df8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b097      	sub	sp, #92	@ 0x5c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000e00:	2408      	movs	r4, #8
 8000e02:	193a      	adds	r2, r7, r4
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <LoRa_setAutoLDO+0x70>)
 8000e06:	0010      	movs	r0, r2
 8000e08:	0019      	movs	r1, r3
 8000e0a:	2350      	movs	r3, #80	@ 0x50
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	f004 fc29 	bl	8005664 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2224      	movs	r2, #36	@ 0x24
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fe3a 	bl	8000a98 <__aeabi_i2d>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2225      	movs	r2, #37	@ 0x25
 8000e28:	5c9b      	ldrb	r3, [r3, r2]
 8000e2a:	193a      	adds	r2, r7, r4
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f7ff fada 	bl	80003ec <__aeabi_ddiv>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	000b      	movs	r3, r1
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	0019      	movs	r1, r3
 8000e40:	f7ff fdee 	bl	8000a20 <__aeabi_d2iz>
 8000e44:	0003      	movs	r3, r0
 8000e46:	2201      	movs	r2, #1
 8000e48:	2b10      	cmp	r3, #16
 8000e4a:	dc01      	bgt.n	8000e50 <LoRa_setAutoLDO+0x58>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	1c1a      	adds	r2, r3, #0
 8000e50:	b2d3      	uxtb	r3, r2
 8000e52:	001a      	movs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff9a 	bl	8000d92 <LoRa_setLowDaraRateOptimization>
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b017      	add	sp, #92	@ 0x5c
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	08005690 	.word	0x08005690

08000e6c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	04db      	lsls	r3, r3, #19
 8000e7a:	115b      	asrs	r3, r3, #5
 8000e7c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	0c1a      	lsrs	r2, r3, #16
 8000e82:	240b      	movs	r4, #11
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2106      	movs	r1, #6
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f8ff 	bl	8001094 <LoRa_write>
	HAL_Delay(5);
 8000e96:	2005      	movs	r0, #5
 8000e98:	f001 f804 	bl	8001ea4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	0a1a      	lsrs	r2, r3, #8
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2107      	movs	r1, #7
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 f8f1 	bl	8001094 <LoRa_write>
	HAL_Delay(5);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f000 fff6 	bl	8001ea4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f8e4 	bl	8001094 <LoRa_write>
	HAL_Delay(5);
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f000 ffe9 	bl	8001ea4 <HAL_Delay>
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b005      	add	sp, #20
 8000ed8:	bd90      	pop	{r4, r7, pc}

08000eda <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000eda:	b5b0      	push	{r4, r5, r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	dd01      	ble.n	8000eee <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000eea:	230c      	movs	r3, #12
 8000eec:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	dc01      	bgt.n	8000ef8 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000ef8:	250f      	movs	r5, #15
 8000efa:	197c      	adds	r4, r7, r5
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	211e      	movs	r1, #30
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 f8a9 	bl	8001058 <LoRa_read>
 8000f06:	0003      	movs	r3, r0
 8000f08:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f000 ffca 	bl	8001ea4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	b2d9      	uxtb	r1, r3
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	4013      	ands	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	200e      	movs	r0, #14
 8000f24:	183b      	adds	r3, r7, r0
 8000f26:	188a      	adds	r2, r1, r2
 8000f28:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	211e      	movs	r1, #30
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f8ae 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f000 ffb3 	bl	8001ea4 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff59 	bl	8000df8 <LoRa_setAutoLDO>
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}

08000f4e <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	000a      	movs	r2, r1
 8000f58:	1cfb      	adds	r3, r7, #3
 8000f5a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000f5c:	1cfb      	adds	r3, r7, #3
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2109      	movs	r1, #9
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 f895 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f000 ff9a 	bl	8001ea4 <HAL_Delay>
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	000a      	movs	r2, r1
 8000f82:	1cfb      	adds	r3, r7, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8000f8e:	1cfb      	adds	r3, r7, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f94:	d802      	bhi.n	8000f9c <LoRa_setOCP+0x24>
		current = 45;
 8000f96:	1cfb      	adds	r3, r7, #3
 8000f98:	222d      	movs	r2, #45	@ 0x2d
 8000f9a:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8000f9c:	1cfb      	adds	r3, r7, #3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fa2:	d902      	bls.n	8000faa <LoRa_setOCP+0x32>
		current = 240;
 8000fa4:	1cfb      	adds	r3, r7, #3
 8000fa6:	22f0      	movs	r2, #240	@ 0xf0
 8000fa8:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000faa:	1cfb      	adds	r3, r7, #3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b78      	cmp	r3, #120	@ 0x78
 8000fb0:	d80c      	bhi.n	8000fcc <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000fb2:	1cfb      	adds	r3, r7, #3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3b2d      	subs	r3, #45	@ 0x2d
 8000fb8:	2105      	movs	r1, #5
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff f92a 	bl	8000214 <__divsi3>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e00f      	b.n	8000fec <LoRa_setOCP+0x74>
	else if(current <= 240)
 8000fcc:	1cfb      	adds	r3, r7, #3
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fd2:	d80b      	bhi.n	8000fec <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8000fd4:	1cfb      	adds	r3, r7, #3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	331e      	adds	r3, #30
 8000fda:	210a      	movs	r1, #10
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f919 	bl	8000214 <__divsi3>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8000fec:	210f      	movs	r1, #15
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	187a      	adds	r2, r7, r1
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	3220      	adds	r2, #32
 8000ff6:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	210b      	movs	r1, #11
 8001000:	0018      	movs	r0, r3
 8001002:	f000 f847 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f000 ff4c 	bl	8001ea4 <HAL_Delay>
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}

08001014 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800101c:	250f      	movs	r5, #15
 800101e:	197c      	adds	r4, r7, r5
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	211e      	movs	r1, #30
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f817 	bl	8001058 <LoRa_read>
 800102a:	0003      	movs	r3, r0
 800102c:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 800102e:	200e      	movs	r0, #14
 8001030:	183b      	adds	r3, r7, r0
 8001032:	197a      	adds	r2, r7, r5
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	2107      	movs	r1, #7
 8001038:	430a      	orrs	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800103c:	183b      	adds	r3, r7, r0
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	211e      	movs	r1, #30
 8001044:	0018      	movs	r0, r3
 8001046:	f000 f825 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f000 ff2a 	bl	8001ea4 <HAL_Delay>
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bdb0      	pop	{r4, r5, r7, pc}

08001058 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	000a      	movs	r2, r1
 8001062:	1cfb      	adds	r3, r7, #3
 8001064:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	227f      	movs	r2, #127	@ 0x7f
 800106c:	4013      	ands	r3, r2
 800106e:	b2da      	uxtb	r2, r3
 8001070:	210e      	movs	r1, #14
 8001072:	187b      	adds	r3, r7, r1
 8001074:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001076:	240f      	movs	r4, #15
 8001078:	193b      	adds	r3, r7, r4
 800107a:	1879      	adds	r1, r7, r1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	9200      	str	r2, [sp, #0]
 8001082:	2201      	movs	r2, #1
 8001084:	f7ff fdff 	bl	8000c86 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b005      	add	sp, #20
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cfb      	adds	r3, r7, #3
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80010ac:	1cfb      	adds	r3, r7, #3
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	4252      	negs	r2, r2
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	210e      	movs	r1, #14
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	data = value;
 80010be:	200f      	movs	r0, #15
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	1cba      	adds	r2, r7, #2
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80010c8:	183b      	adds	r3, r7, r0
 80010ca:	1879      	adds	r1, r7, r1
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f7ff fe1a 	bl	8000d0c <LoRa_writeReg>
	//HAL_Delay(5);
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b004      	add	sp, #16
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	0008      	movs	r0, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	0019      	movs	r1, r3
 80010ee:	240b      	movs	r4, #11
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	230a      	movs	r3, #10
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	1c0a      	adds	r2, r1, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	4252      	negs	r2, r2
 8001106:	4313      	orrs	r3, r2
 8001108:	b2da      	uxtb	r2, r3
 800110a:	2417      	movs	r4, #23
 800110c:	193b      	adds	r3, r7, r4
 800110e:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	889b      	ldrh	r3, [r3, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	0019      	movs	r1, r3
 800111c:	f001 ff4f 	bl	8002fbe <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6998      	ldr	r0, [r3, #24]
 8001124:	23fa      	movs	r3, #250	@ 0xfa
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1939      	adds	r1, r7, r4
 800112a:	2201      	movs	r2, #1
 800112c:	f002 fe48 	bl	8003dc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	0018      	movs	r0, r3
 8001138:	f003 fad6 	bl	80046e8 <HAL_SPI_GetState>
 800113c:	0003      	movs	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d1f7      	bne.n	8001132 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6998      	ldr	r0, [r3, #24]
 8001146:	230a      	movs	r3, #10
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29a      	uxth	r2, r3
 800114e:	23fa      	movs	r3, #250	@ 0xfa
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f002 fe34 	bl	8003dc0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	0018      	movs	r0, r3
 8001160:	f003 fac2 	bl	80046e8 <HAL_SPI_GetState>
 8001164:	0003      	movs	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d1f7      	bne.n	800115a <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	0019      	movs	r1, r3
 8001176:	f001 ff22 	bl	8002fbe <HAL_GPIO_WritePin>
}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b007      	add	sp, #28
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

	return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	0019      	movs	r1, r3
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	1c0a      	adds	r2, r1, #0
 80011a8:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2101      	movs	r1, #1
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff fcea 	bl	8000b8e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80011ba:	2513      	movs	r5, #19
 80011bc:	197c      	adds	r4, r7, r5
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	210e      	movs	r1, #14
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ff48 	bl	8001058 <LoRa_read>
 80011c8:	0003      	movs	r3, r0
 80011ca:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80011cc:	197b      	adds	r3, r7, r5
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	210d      	movs	r1, #13
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2122      	movs	r1, #34	@ 0x22
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff56 	bl	8001094 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	2100      	movs	r1, #0
 80011f2:	f7ff ff75 	bl	80010e0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2103      	movs	r1, #3
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fcc7 	bl	8000b8e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001200:	2513      	movs	r5, #19
 8001202:	197c      	adds	r4, r7, r5
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2112      	movs	r1, #18
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ff25 	bl	8001058 <LoRa_read>
 800120e:	0003      	movs	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8001212:	197b      	adds	r3, r7, r5
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2208      	movs	r2, #8
 8001218:	4013      	ands	r3, r2
 800121a:	d00d      	beq.n	8001238 <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	22ff      	movs	r2, #255	@ 0xff
 8001220:	2112      	movs	r1, #18
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff36 	bl	8001094 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fcad 	bl	8000b8e <LoRa_gotoMode>
			return 1;
 8001234:	2301      	movs	r3, #1
 8001236:	e014      	b.n	8001262 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	1d3a      	adds	r2, r7, #4
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	3a01      	subs	r2, #1
 8001240:	801a      	strh	r2, [r3, #0]
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fc9c 	bl	8000b8e <LoRa_gotoMode>
				return 0;
 8001256:	2300      	movs	r3, #0
 8001258:	e003      	b.n	8001262 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 fe22 	bl	8001ea4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001260:	e7ce      	b.n	8001200 <LoRa_transmit+0x6c>
	}
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b006      	add	sp, #24
 8001268:	bdb0      	pop	{r4, r5, r7, pc}

0800126a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2105      	movs	r1, #5
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff fc89 	bl	8000b8e <LoRa_gotoMode>
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	889b      	ldrh	r3, [r3, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	0019      	movs	r1, r3
 8001298:	f001 fe91 	bl	8002fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LoRa->DIO0_port, _LoRa->DIO0_pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2201      	movs	r2, #1
 80012a6:	0019      	movs	r1, r3
 80012a8:	f001 fe89 	bl	8002fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6898      	ldr	r0, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	899b      	ldrh	r3, [r3, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	0019      	movs	r1, r3
 80012b8:	f001 fe81 	bl	8002fbe <HAL_GPIO_WritePin>
	if(LoRa_isvalid(_LoRa)){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff5f 	bl	8001182 <LoRa_isvalid>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d100      	bne.n	80012ca <LoRa_init+0x46>
 80012c8:	e0c9      	b.n	800145e <LoRa_init+0x1da>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff fc5d 	bl	8000b8e <LoRa_gotoMode>
			HAL_Delay(10);
 80012d4:	200a      	movs	r0, #10
 80012d6:	f000 fde5 	bl	8001ea4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80012da:	260f      	movs	r6, #15
 80012dc:	19bc      	adds	r4, r7, r6
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2101      	movs	r1, #1
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff feb8 	bl	8001058 <LoRa_read>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f000 fdd9 	bl	8001ea4 <HAL_Delay>
			data = read | 0x80;
 80012f2:	250e      	movs	r5, #14
 80012f4:	197b      	adds	r3, r7, r5
 80012f6:	19ba      	adds	r2, r7, r6
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	4249      	negs	r1, r1
 80012fe:	430a      	orrs	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8001302:	197b      	adds	r3, r7, r5
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2101      	movs	r1, #1
 800130a:	0018      	movs	r0, r3
 800130c:	f7ff fec2 	bl	8001094 <LoRa_write>
			HAL_Delay(100);
 8001310:	2064      	movs	r0, #100	@ 0x64
 8001312:	f000 fdc7 	bl	8001ea4 <HAL_Delay>
			read = LoRa_read(_LoRa, 0x02);
 8001316:	19bc      	adds	r4, r7, r6
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2102      	movs	r1, #2
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fe9b 	bl	8001058 <LoRa_read>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	@ 0x64
 8001328:	f000 fdbc 	bl	8001ea4 <HAL_Delay>
			data = LoRa_read(_LoRa, 0x03);
 800132c:	197c      	adds	r4, r7, r5
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2103      	movs	r1, #3
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fe90 	bl	8001058 <LoRa_read>
 8001338:	0003      	movs	r3, r0
 800133a:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 800133c:	2064      	movs	r0, #100	@ 0x64
 800133e:	f000 fdb1 	bl	8001ea4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0011      	movs	r1, r2
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fd8e 	bl	8000e6c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	222a      	movs	r2, #42	@ 0x2a
 8001354:	5c9a      	ldrb	r2, [r3, r2]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fdf7 	bl	8000f4e <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	222b      	movs	r2, #43	@ 0x2b
 8001364:	5c9a      	ldrb	r2, [r3, r2]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff fe04 	bl	8000f78 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2223      	movs	r2, #35	@ 0x23
 8001374:	210c      	movs	r1, #12
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fe8c 	bl	8001094 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fe48 	bl	8001014 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	5c9b      	ldrb	r3, [r3, r2]
 800138a:	001a      	movs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fda2 	bl	8000eda <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	211f      	movs	r1, #31
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fe79 	bl	8001094 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80013a2:	197b      	adds	r3, r7, r5
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2225      	movs	r2, #37	@ 0x25
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	b2d9      	uxtb	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2226      	movs	r2, #38	@ 0x26
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	18db      	adds	r3, r3, r3
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	197b      	adds	r3, r7, r5
 80013be:	188a      	adds	r2, r1, r2
 80013c0:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	211d      	movs	r1, #29
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fe62 	bl	8001094 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fd10 	bl	8000df8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2120      	movs	r1, #32
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe54 	bl	8001094 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2121      	movs	r1, #33	@ 0x21
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fe4c 	bl	8001094 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80013fc:	19bc      	adds	r4, r7, r6
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fe28 	bl	8001058 <LoRa_read>
 8001408:	0003      	movs	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 800140c:	197b      	adds	r3, r7, r5
 800140e:	19ba      	adds	r2, r7, r6
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	213f      	movs	r1, #63	@ 0x3f
 8001414:	430a      	orrs	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001418:	197b      	adds	r3, r7, r5
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2140      	movs	r1, #64	@ 0x40
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fe37 	bl	8001094 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2101      	movs	r1, #1
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fbaf 	bl	8000b8e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f000 fd34 	bl	8001ea4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800143c:	19bc      	adds	r4, r7, r6
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2142      	movs	r1, #66	@ 0x42
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fe08 	bl	8001058 <LoRa_read>
 8001448:	0003      	movs	r3, r0
 800144a:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 800144c:	19bb      	adds	r3, r7, r6
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d101      	bne.n	8001458 <LoRa_init+0x1d4>
				return LORA_OK;
 8001454:	23c8      	movs	r3, #200	@ 0xc8
 8001456:	e004      	b.n	8001462 <LoRa_init+0x1de>
			else
				return LORA_NOT_FOUND;
 8001458:	23ca      	movs	r3, #202	@ 0xca
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	e001      	b.n	8001462 <LoRa_init+0x1de>
	}
	else {
		return LORA_UNAVAILABLE;
 800145e:	23f8      	movs	r3, #248	@ 0xf8
 8001460:	33ff      	adds	r3, #255	@ 0xff
	}
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b005      	add	sp, #20
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800146c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	0018      	movs	r0, r3
 8001476:	230c      	movs	r3, #12
 8001478:	001a      	movs	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	f004 f8c6 	bl	800560c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <MX_ADC1_Init+0xc8>)
 8001484:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001488:	22c0      	movs	r2, #192	@ 0xc0
 800148a:	0612      	lsls	r2, r2, #24
 800148c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148e:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <MX_ADC1_Init+0xc4>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014a2:	2204      	movs	r2, #4
 80014a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014cc:	222c      	movs	r2, #44	@ 0x2c
 80014ce:	2101      	movs	r1, #1
 80014d0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014e6:	223c      	movs	r2, #60	@ 0x3c
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f000 fdf7 	bl	80020e8 <HAL_ADC_Init>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80014fe:	f000 fa90 	bl	8001a22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	1d3a      	adds	r2, r7, #4
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f000 ff8c 	bl	8002438 <HAL_ADC_ConfigChannel>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001524:	f000 fa7d 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001528:	46c0      	nop			@ (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000028 	.word	0x20000028
 8001534:	40012400 	.word	0x40012400

08001538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	2414      	movs	r4, #20
 8001542:	193b      	adds	r3, r7, r4
 8001544:	0018      	movs	r0, r3
 8001546:	2314      	movs	r3, #20
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f004 f85e 	bl	800560c <memset>
  if(adcHandle->Instance==ADC1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <HAL_ADC_MspInit+0xd4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d154      	bne.n	8001604 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 800155c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 8001560:	2180      	movs	r1, #128	@ 0x80
 8001562:	0349      	lsls	r1, r1, #13
 8001564:	430a      	orrs	r2, r1
 8001566:	641a      	str	r2, [r3, #64]	@ 0x40
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 800156a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	035b      	lsls	r3, r3, #13
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 8001578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
 8001582:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2203      	movs	r2, #3
 8001598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	193b      	adds	r3, r7, r4
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	193a      	adds	r2, r7, r4
 80015a2:	23a0      	movs	r3, #160	@ 0xa0
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f001 fb87 	bl	8002cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_ADC_MspInit+0xe0>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015b6:	2205      	movs	r2, #5
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015c8:	2280      	movs	r2, #128	@ 0x80
 80015ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015de:	2220      	movs	r2, #32
 80015e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 f9da 	bl	80029a4 <HAL_DMA_Init>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80015f4:	f000 fa15 	bl	8001a22 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001604:	46c0      	nop			@ (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b00b      	add	sp, #44	@ 0x2c
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40012400 	.word	0x40012400
 8001610:	40021000 	.word	0x40021000
 8001614:	2000008c 	.word	0x2000008c
 8001618:	40020008 	.word	0x40020008

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_DMA_Init+0x38>)
 8001624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_DMA_Init+0x38>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	639a      	str	r2, [r3, #56]	@ 0x38
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_DMA_Init+0x38>)
 8001630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2009      	movs	r0, #9
 8001640:	f001 f97e 	bl	8002940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001644:	2009      	movs	r0, #9
 8001646:	f001 f990 	bl	800296a <HAL_NVIC_EnableIRQ>

}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	40021000 	.word	0x40021000

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	240c      	movs	r4, #12
 8001660:	193b      	adds	r3, r7, r4
 8001662:	0018      	movs	r0, r3
 8001664:	2314      	movs	r3, #20
 8001666:	001a      	movs	r2, r3
 8001668:	2100      	movs	r1, #0
 800166a:	f003 ffcf 	bl	800560c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b43      	ldr	r3, [pc, #268]	@ (800177c <MX_GPIO_Init+0x124>)
 8001670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001672:	4b42      	ldr	r3, [pc, #264]	@ (800177c <MX_GPIO_Init+0x124>)
 8001674:	2102      	movs	r1, #2
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
 800167a:	4b40      	ldr	r3, [pc, #256]	@ (800177c <MX_GPIO_Init+0x124>)
 800167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <MX_GPIO_Init+0x124>)
 8001688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168a:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <MX_GPIO_Init+0x124>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
 8001692:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <MX_GPIO_Init+0x124>)
 8001694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <MX_GPIO_Init+0x124>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a2:	4b36      	ldr	r3, [pc, #216]	@ (800177c <MX_GPIO_Init+0x124>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016aa:	4b34      	ldr	r3, [pc, #208]	@ (800177c <MX_GPIO_Init+0x124>)
 80016ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_RST_Pin|COMMON_CONTROL_Pin, GPIO_PIN_RESET);
 80016b6:	4932      	ldr	r1, [pc, #200]	@ (8001780 <MX_GPIO_Init+0x128>)
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <MX_GPIO_Init+0x12c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	0018      	movs	r0, r3
 80016be:	f001 fc7e 	bl	8002fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_D0_GPIO_Port, RF_D0_Pin, GPIO_PIN_RESET);
 80016c2:	2380      	movs	r3, #128	@ 0x80
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	4830      	ldr	r0, [pc, #192]	@ (8001788 <MX_GPIO_Init+0x130>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	0019      	movs	r1, r3
 80016cc:	f001 fc77 	bl	8002fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEART_BEAT_Pin|RF_CS_Pin, GPIO_PIN_RESET);
 80016d0:	492e      	ldr	r1, [pc, #184]	@ (800178c <MX_GPIO_Init+0x134>)
 80016d2:	23a0      	movs	r3, #160	@ 0xa0
 80016d4:	05db      	lsls	r3, r3, #23
 80016d6:	2200      	movs	r2, #0
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 fc70 	bl	8002fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RF_RST_Pin|COMMON_CONTROL_Pin;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	4a27      	ldr	r2, [pc, #156]	@ (8001780 <MX_GPIO_Init+0x128>)
 80016e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	2201      	movs	r2, #1
 80016e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <MX_GPIO_Init+0x12c>)
 80016fa:	0019      	movs	r1, r3
 80016fc:	0010      	movs	r0, r2
 80016fe:	f001 fadd 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_D0_Pin;
 8001702:	0021      	movs	r1, r4
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2280      	movs	r2, #128	@ 0x80
 8001708:	0212      	lsls	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	000c      	movs	r4, r1
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2201      	movs	r2, #1
 8001712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	193b      	adds	r3, r7, r4
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	193b      	adds	r3, r7, r4
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RF_D0_GPIO_Port, &GPIO_InitStruct);
 8001720:	193b      	adds	r3, r7, r4
 8001722:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <MX_GPIO_Init+0x130>)
 8001724:	0019      	movs	r1, r3
 8001726:	0010      	movs	r0, r2
 8001728:	f001 fac8 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = HEART_BEAT_Pin|RF_CS_Pin;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <MX_GPIO_Init+0x134>)
 8001730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2201      	movs	r2, #1
 8001736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	193a      	adds	r2, r7, r4
 8001746:	23a0      	movs	r3, #160	@ 0xa0
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f001 fab5 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEVEL1_Pin|LEVEL2_Pin|LEVEL3_Pin|LEVEL4_Pin;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	22f0      	movs	r2, #240	@ 0xf0
 8001756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2201      	movs	r2, #1
 8001762:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	193a      	adds	r2, r7, r4
 8001766:	23a0      	movs	r3, #160	@ 0xa0
 8001768:	05db      	lsls	r3, r3, #23
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f001 faa5 	bl	8002cbc <HAL_GPIO_Init>

}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b009      	add	sp, #36	@ 0x24
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	40021000 	.word	0x40021000
 8001780:	00000201 	.word	0x00000201
 8001784:	50000400 	.word	0x50000400
 8001788:	50000800 	.word	0x50000800
 800178c:	00001008 	.word	0x00001008

08001790 <readLevel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t readLevel(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(COMMON_CONTROL_GPIO_Port, COMMON_CONTROL_Pin, 0);
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <readLevel+0xb4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	0018      	movs	r0, r3
 80017a4:	f001 fc0b 	bl	8002fbe <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80017a8:	2396      	movs	r3, #150	@ 0x96
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 fb79 	bl	8001ea4 <HAL_Delay>
	if(!HAL_GPIO_ReadPin(LEVEL1_GPIO_Port, LEVEL1_Pin))
 80017b2:	23a0      	movs	r3, #160	@ 0xa0
 80017b4:	05db      	lsls	r3, r3, #23
 80017b6:	2110      	movs	r1, #16
 80017b8:	0018      	movs	r0, r3
 80017ba:	f001 fbe3 	bl	8002f84 <HAL_GPIO_ReadPin>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d105      	bne.n	80017ce <readLevel+0x3e>
		ret |= 0x01;
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	1dfa      	adds	r2, r7, #7
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(LEVEL2_GPIO_Port, LEVEL2_Pin))
 80017ce:	23a0      	movs	r3, #160	@ 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	2120      	movs	r1, #32
 80017d4:	0018      	movs	r0, r3
 80017d6:	f001 fbd5 	bl	8002f84 <HAL_GPIO_ReadPin>
 80017da:	1e03      	subs	r3, r0, #0
 80017dc:	d105      	bne.n	80017ea <readLevel+0x5a>
		ret |= 0x02;
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	1dfa      	adds	r2, r7, #7
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	2102      	movs	r1, #2
 80017e6:	430a      	orrs	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(LEVEL3_GPIO_Port, LEVEL3_Pin))
 80017ea:	23a0      	movs	r3, #160	@ 0xa0
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	2140      	movs	r1, #64	@ 0x40
 80017f0:	0018      	movs	r0, r3
 80017f2:	f001 fbc7 	bl	8002f84 <HAL_GPIO_ReadPin>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d105      	bne.n	8001806 <readLevel+0x76>
		ret |= 0x04;
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	1dfa      	adds	r2, r7, #7
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	2104      	movs	r1, #4
 8001802:	430a      	orrs	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(LEVEL4_GPIO_Port, LEVEL4_Pin))
 8001806:	23a0      	movs	r3, #160	@ 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	0018      	movs	r0, r3
 800180e:	f001 fbb9 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d105      	bne.n	8001822 <readLevel+0x92>
		ret |= 0x08;
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	1dfa      	adds	r2, r7, #7
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	2108      	movs	r1, #8
 800181e:	430a      	orrs	r2, r1
 8001820:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(COMMON_CONTROL_GPIO_Port, COMMON_CONTROL_Pin, 1);
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <readLevel+0xb4>)
 8001824:	2201      	movs	r2, #1
 8001826:	2101      	movs	r1, #1
 8001828:	0018      	movs	r0, r3
 800182a:	f001 fbc8 	bl	8002fbe <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800182e:	2396      	movs	r3, #150	@ 0x96
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fb36 	bl	8001ea4 <HAL_Delay>
	return ret;
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	781b      	ldrb	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	50000400 	.word	0x50000400

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b090      	sub	sp, #64	@ 0x40
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f000 faa3 	bl	8001d98 <HAL_Init>

  /* USER CODE BEGIN Init */
  myLoRa = newLoRa();
 8001852:	4c48      	ldr	r4, [pc, #288]	@ (8001974 <main+0x12c>)
 8001854:	003b      	movs	r3, r7
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff f96a 	bl	8000b30 <newLoRa>
 800185c:	003a      	movs	r2, r7
 800185e:	0023      	movs	r3, r4
 8001860:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001862:	c313      	stmia	r3!, {r0, r1, r4}
 8001864:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001866:	c313      	stmia	r3!, {r0, r1, r4}
 8001868:	ca13      	ldmia	r2!, {r0, r1, r4}
 800186a:	c313      	stmia	r3!, {r0, r1, r4}
 800186c:	ca03      	ldmia	r2!, {r0, r1}
 800186e:	c303      	stmia	r3!, {r0, r1}
  myLoRa.CS_port         = RF_CS_GPIO_Port;
 8001870:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <main+0x12c>)
 8001872:	22a0      	movs	r2, #160	@ 0xa0
 8001874:	05d2      	lsls	r2, r2, #23
 8001876:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = RF_CS_Pin;
 8001878:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <main+0x12c>)
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	0152      	lsls	r2, r2, #5
 800187e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RF_RST_GPIO_Port;
 8001880:	4b3c      	ldr	r3, [pc, #240]	@ (8001974 <main+0x12c>)
 8001882:	4a3d      	ldr	r2, [pc, #244]	@ (8001978 <main+0x130>)
 8001884:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RF_RST_Pin;
 8001886:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <main+0x12c>)
 8001888:	2280      	movs	r2, #128	@ 0x80
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = RF_D0_GPIO_Port;
 800188e:	4b39      	ldr	r3, [pc, #228]	@ (8001974 <main+0x12c>)
 8001890:	4a3a      	ldr	r2, [pc, #232]	@ (800197c <main+0x134>)
 8001892:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = RF_D0_Pin;
 8001894:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <main+0x12c>)
 8001896:	4a3a      	ldr	r2, [pc, #232]	@ (8001980 <main+0x138>)
 8001898:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 800189a:	4b36      	ldr	r3, [pc, #216]	@ (8001974 <main+0x12c>)
 800189c:	4a39      	ldr	r2, [pc, #228]	@ (8001984 <main+0x13c>)
 800189e:	619a      	str	r2, [r3, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f876 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f7ff fed8 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a8:	f7ff feb8 	bl	800161c <MX_DMA_Init>
  MX_SPI1_Init();
 80018ac:	f000 f8c0 	bl	8001a30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018b0:	f000 f998 	bl	8001be4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018b4:	f7ff fdda 	bl	800146c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LoRa_init(&myLoRa);
 80018b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <main+0x12c>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fce2 	bl	8001284 <LoRa_init>
  HAL_Delay(500);
 80018c0:	23fa      	movs	r3, #250	@ 0xfa
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 faed 	bl	8001ea4 <HAL_Delay>
  LoRa_startReceiving(&myLoRa);
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <main+0x12c>)
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff fccc 	bl	800126a <LoRa_startReceiving>
  uint8_t packet_size = 0;*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (const uint8_t *)"Level Tx unit", 13, 100);
 80018d2:	492d      	ldr	r1, [pc, #180]	@ (8001988 <main+0x140>)
 80018d4:	482d      	ldr	r0, [pc, #180]	@ (800198c <main+0x144>)
 80018d6:	2364      	movs	r3, #100	@ 0x64
 80018d8:	220d      	movs	r2, #13
 80018da:	f003 f93b 	bl	8004b54 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i < 3; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018e2:	e01a      	b.n	800191a <main+0xd2>
		  //packet_size = LoRa_receive(&myLoRa, received_data, 20);
		  /*if(packet_size > 0)
		  {
			  HAL_UART_Transmit(&huart1, (const uint8_t *)received_data, packet_size, 100);
		  }*/
		  HAL_GPIO_WritePin(HEART_BEAT_GPIO_Port, HEART_BEAT_Pin, 0);
 80018e4:	23a0      	movs	r3, #160	@ 0xa0
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	2200      	movs	r2, #0
 80018ea:	2108      	movs	r1, #8
 80018ec:	0018      	movs	r0, r3
 80018ee:	f001 fb66 	bl	8002fbe <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80018f2:	23fa      	movs	r3, #250	@ 0xfa
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fad4 	bl	8001ea4 <HAL_Delay>
		  HAL_GPIO_WritePin(HEART_BEAT_GPIO_Port, HEART_BEAT_Pin, 1);
 80018fc:	23a0      	movs	r3, #160	@ 0xa0
 80018fe:	05db      	lsls	r3, r3, #23
 8001900:	2201      	movs	r2, #1
 8001902:	2108      	movs	r1, #8
 8001904:	0018      	movs	r0, r3
 8001906:	f001 fb5a 	bl	8002fbe <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800190a:	23fa      	movs	r3, #250	@ 0xfa
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	0018      	movs	r0, r3
 8001910:	f000 fac8 	bl	8001ea4 <HAL_Delay>
	  for(int i = 0; i < 3; i++)
 8001914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001916:	3301      	adds	r3, #1
 8001918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800191a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800191c:	2b02      	cmp	r3, #2
 800191e:	dde1      	ble.n	80018e4 <main+0x9c>
	  }
	  levelVar = readLevel();
 8001920:	253b      	movs	r5, #59	@ 0x3b
 8001922:	197c      	adds	r4, r7, r5
 8001924:	f7ff ff34 	bl	8001790 <readLevel>
 8001928:	0003      	movs	r3, r0
 800192a:	7023      	strb	r3, [r4, #0]
	  bufTx[0] = (levelVar/10)|0x30;
 800192c:	002c      	movs	r4, r5
 800192e:	193b      	adds	r3, r7, r4
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	210a      	movs	r1, #10
 8001934:	0018      	movs	r0, r3
 8001936:	f7fe fbe3 	bl	8000100 <__udivsi3>
 800193a:	0003      	movs	r3, r0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2230      	movs	r2, #48	@ 0x30
 8001940:	4313      	orrs	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	2534      	movs	r5, #52	@ 0x34
 8001946:	197b      	adds	r3, r7, r5
 8001948:	701a      	strb	r2, [r3, #0]
	  bufTx[1] = (levelVar%10)|0x30;
 800194a:	193b      	adds	r3, r7, r4
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	210a      	movs	r1, #10
 8001950:	0018      	movs	r0, r3
 8001952:	f7fe fc5b 	bl	800020c <__aeabi_uidivmod>
 8001956:	000b      	movs	r3, r1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2230      	movs	r2, #48	@ 0x30
 800195c:	4313      	orrs	r3, r2
 800195e:	b2da      	uxtb	r2, r3
 8001960:	197b      	adds	r3, r7, r5
 8001962:	705a      	strb	r2, [r3, #1]
	  LoRa_transmit(&myLoRa, (uint8_t*)bufTx, 2, 100);
 8001964:	1979      	adds	r1, r7, r5
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <main+0x12c>)
 8001968:	2364      	movs	r3, #100	@ 0x64
 800196a:	2202      	movs	r2, #2
 800196c:	f7ff fc12 	bl	8001194 <LoRa_transmit>
	  for(int i = 0; i < 3; i++)
 8001970:	e7b5      	b.n	80018de <main+0x96>
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	200000e8 	.word	0x200000e8
 8001978:	50000400 	.word	0x50000400
 800197c:	50000800 	.word	0x50000800
 8001980:	ffff8000 	.word	0xffff8000
 8001984:	20000114 	.word	0x20000114
 8001988:	080056e0 	.word	0x080056e0
 800198c:	20000178 	.word	0x20000178

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b093      	sub	sp, #76	@ 0x4c
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	2414      	movs	r4, #20
 8001998:	193b      	adds	r3, r7, r4
 800199a:	0018      	movs	r0, r3
 800199c:	2334      	movs	r3, #52	@ 0x34
 800199e:	001a      	movs	r2, r3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f003 fe33 	bl	800560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	0018      	movs	r0, r3
 80019aa:	2310      	movs	r3, #16
 80019ac:	001a      	movs	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f003 fe2c 	bl	800560c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	0018      	movs	r0, r3
 80019ba:	f001 fb1d 	bl	8002ff8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	0052      	lsls	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV8;
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	22c0      	movs	r2, #192	@ 0xc0
 80019d0:	0152      	lsls	r2, r2, #5
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2240      	movs	r2, #64	@ 0x40
 80019d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	0018      	movs	r0, r3
 80019e4:	f001 fb54 	bl	8003090 <HAL_RCC_OscConfig>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80019ec:	f000 f819 	bl	8001a22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2207      	movs	r2, #7
 80019f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f001 fe4f 	bl	80036b0 <HAL_RCC_ClockConfig>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a16:	f000 f804 	bl	8001a22 <Error_Handler>
  }
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b013      	add	sp, #76	@ 0x4c
 8001a20:	bd90      	pop	{r4, r7, pc}

08001a22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	e7fd      	b.n	8001a2a <Error_Handler+0x8>
	...

08001a30 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <MX_SPI1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a3c:	2282      	movs	r2, #130	@ 0x82
 8001a3e:	0052      	lsls	r2, r2, #1
 8001a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a48:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a4a:	22e0      	movs	r2, #224	@ 0xe0
 8001a4c:	00d2      	lsls	r2, r2, #3
 8001a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a7e:	2207      	movs	r2, #7
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <MX_SPI1_Init+0x74>)
 8001a90:	0018      	movs	r0, r3
 8001a92:	f002 f8dd 	bl	8003c50 <HAL_SPI_Init>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f7ff ffc2 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000114 	.word	0x20000114
 8001aa8:	40013000 	.word	0x40013000

08001aac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b08b      	sub	sp, #44	@ 0x2c
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	2414      	movs	r4, #20
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	0018      	movs	r0, r3
 8001aba:	2314      	movs	r3, #20
 8001abc:	001a      	movs	r2, r3
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f003 fda4 	bl	800560c <memset>
  if(spiHandle->Instance==SPI1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <HAL_SPI_MspInit+0x8c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d130      	bne.n	8001b30 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_SPI_MspInit+0x90>)
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <HAL_SPI_MspInit+0x90>)
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	0149      	lsls	r1, r1, #5
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <HAL_SPI_MspInit+0x90>)
 8001ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_SPI_MspInit+0x90>)
 8001aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_SPI_MspInit+0x90>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_SPI_MspInit+0x90>)
 8001af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afa:	2201      	movs	r2, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8001b02:	0021      	movs	r1, r4
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <HAL_SPI_MspInit+0x94>)
 8001b08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	187a      	adds	r2, r7, r1
 8001b24:	23a0      	movs	r3, #160	@ 0xa0
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	0011      	movs	r1, r2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f001 f8c6 	bl	8002cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b00b      	add	sp, #44	@ 0x2c
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	00000806 	.word	0x00000806

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	430a      	orrs	r2, r1
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b66:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_MspInit+0x44>)
 8001b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	055b      	lsls	r3, r3, #21
 8001b78:	4013      	ands	r3, r2
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ba0:	46c0      	nop			@ (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 f95a 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <DMA1_Channel1_IRQHandler+0x14>)
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 ff76 	bl	8002ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	2000008c 	.word	0x2000008c

08001bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be8:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001bea:	4a24      	ldr	r2, [pc, #144]	@ (8001c7c <MX_USART1_UART_Init+0x98>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bee:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001bf0:	22e1      	movs	r2, #225	@ 0xe1
 8001bf2:	0252      	lsls	r2, r2, #9
 8001bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f002 ff3a 	bl	8004aa8 <HAL_UART_Init>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c38:	f7ff fef3 	bl	8001a22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	0018      	movs	r0, r3
 8001c42:	f003 fc03 	bl	800544c <HAL_UARTEx_SetTxFifoThreshold>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c4a:	f7ff feea 	bl	8001a22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	0018      	movs	r0, r3
 8001c54:	f003 fc3a 	bl	80054cc <HAL_UARTEx_SetRxFifoThreshold>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c5c:	f7ff fee1 	bl	8001a22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <MX_USART1_UART_Init+0x94>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f003 fbb8 	bl	80053d8 <HAL_UARTEx_DisableFifoMode>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c6c:	f7ff fed9 	bl	8001a22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	20000178 	.word	0x20000178
 8001c7c:	40013800 	.word	0x40013800

08001c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b091      	sub	sp, #68	@ 0x44
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	232c      	movs	r3, #44	@ 0x2c
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	2314      	movs	r3, #20
 8001c90:	001a      	movs	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	f003 fcba 	bl	800560c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	2414      	movs	r4, #20
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	2318      	movs	r3, #24
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f003 fcb2 	bl	800560c <memset>
  if(uartHandle->Instance==USART1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_UART_MspInit+0xb8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d13d      	bne.n	8001d2e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cb2:	193b      	adds	r3, r7, r4
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cb8:	193b      	adds	r3, r7, r4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f001 fe9f 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cca:	f7ff feaa 	bl	8001a22 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_UART_MspInit+0xbc>)
 8001cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_UART_MspInit+0xbc>)
 8001cd4:	2180      	movs	r1, #128	@ 0x80
 8001cd6:	01c9      	lsls	r1, r1, #7
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <HAL_UART_MspInit+0xbc>)
 8001cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	01db      	lsls	r3, r3, #7
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_UART_MspInit+0xbc>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cee:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <HAL_UART_MspInit+0xbc>)
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_UART_MspInit+0xbc>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001d02:	212c      	movs	r1, #44	@ 0x2c
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	22c0      	movs	r2, #192	@ 0xc0
 8001d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	4a06      	ldr	r2, [pc, #24]	@ (8001d40 <HAL_UART_MspInit+0xc0>)
 8001d26:	0019      	movs	r1, r3
 8001d28:	0010      	movs	r0, r2
 8001d2a:	f000 ffc7 	bl	8002cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b011      	add	sp, #68	@ 0x44
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	50000400 	.word	0x50000400

08001d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d44:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d48:	f7ff ff46 	bl	8001bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d4e:	490d      	ldr	r1, [pc, #52]	@ (8001d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <LoopForever+0xe>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d64:	4c0a      	ldr	r4, [pc, #40]	@ (8001d90 <LoopForever+0x16>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d72:	f003 fc53 	bl	800561c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d76:	f7ff fd67 	bl	8001848 <main>

08001d7a <LoopForever>:

LoopForever:
  b LoopForever
 8001d7a:	e7fe      	b.n	8001d7a <LoopForever>
  ldr   r0, =_estack
 8001d7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d88:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 8001d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d90:	20000210 	.word	0x20000210

08001d94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_Init+0x3c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_Init+0x3c>)
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	0049      	lsls	r1, r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db2:	2003      	movs	r0, #3
 8001db4:	f000 f810 	bl	8001dd8 <HAL_InitTick>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e001      	b.n	8001dc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff febe 	bl	8001b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	781b      	ldrb	r3, [r3, #0]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40022000 	.word	0x40022000

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_InitTick+0x88>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d02b      	beq.n	8001e48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_InitTick+0x8c>)
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_InitTick+0x88>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	0019      	movs	r1, r3
 8001dfa:	23fa      	movs	r3, #250	@ 0xfa
 8001dfc:	0098      	lsls	r0, r3, #2
 8001dfe:	f7fe f97f 	bl	8000100 <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	0019      	movs	r1, r3
 8001e06:	0020      	movs	r0, r4
 8001e08:	f7fe f97a 	bl	8000100 <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fdbb 	bl	800298a <HAL_SYSTICK_Config>
 8001e14:	1e03      	subs	r3, r0, #0
 8001e16:	d112      	bne.n	8001e3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d80a      	bhi.n	8001e34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	2301      	movs	r3, #1
 8001e22:	425b      	negs	r3, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fd8a 	bl	8002940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_InitTick+0x90>)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e00d      	b.n	8001e50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e34:	230f      	movs	r3, #15
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e008      	b.n	8001e50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e3e:	230f      	movs	r3, #15
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e003      	b.n	8001e50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e48:	230f      	movs	r3, #15
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b005      	add	sp, #20
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_IncTick+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	001a      	movs	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	18d2      	adds	r2, r2, r3
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	2000020c 	.word	0x2000020c

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b02      	ldr	r3, [pc, #8]	@ (8001ea0 <HAL_GetTick+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	2000020c 	.word	0x2000020c

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	189b      	adds	r3, r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	f7ff ffe0 	bl	8001e90 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	20000008 	.word	0x20000008

08001eec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001efc:	401a      	ands	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	fe3fffff 	.word	0xfe3fffff

08001f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	23e0      	movs	r3, #224	@ 0xe0
 8001f22:	045b      	lsls	r3, r3, #17
 8001f24:	4013      	ands	r3, r2
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	2104      	movs	r1, #4
 8001f42:	400a      	ands	r2, r1
 8001f44:	2107      	movs	r1, #7
 8001f46:	4091      	lsls	r1, r2
 8001f48:	000a      	movs	r2, r1
 8001f4a:	43d2      	mvns	r2, r2
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2104      	movs	r1, #4
 8001f52:	400b      	ands	r3, r1
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4099      	lsls	r1, r3
 8001f58:	000b      	movs	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	2104      	movs	r1, #4
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	2107      	movs	r1, #7
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2104      	movs	r1, #4
 8001f88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f8a:	40da      	lsrs	r2, r3
 8001f8c:	0013      	movs	r3, r2
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	211f      	movs	r1, #31
 8001faa:	400a      	ands	r2, r1
 8001fac:	210f      	movs	r1, #15
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	43d2      	mvns	r2, r2
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	210f      	movs	r1, #15
 8001fbc:	4019      	ands	r1, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	201f      	movs	r0, #31
 8001fc2:	4003      	ands	r3, r0
 8001fc4:	4099      	lsls	r1, r3
 8001fc6:	000b      	movs	r3, r1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	035b      	lsls	r3, r3, #13
 8001fe8:	0b5b      	lsrs	r3, r3, #13
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	0352      	lsls	r2, r2, #13
 800200a:	0b52      	lsrs	r2, r2, #13
 800200c:	43d2      	mvns	r2, r2
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	43d2      	mvns	r2, r2
 8002032:	401a      	ands	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	400b      	ands	r3, r1
 800203c:	4904      	ldr	r1, [pc, #16]	@ (8002050 <LL_ADC_SetChannelSamplingTime+0x34>)
 800203e:	400b      	ands	r3, r1
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	07ffff00 	.word	0x07ffff00

08002054 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <LL_ADC_EnableInternalRegulator+0x24>)
 8002062:	4013      	ands	r3, r2
 8002064:	2280      	movs	r2, #128	@ 0x80
 8002066:	0552      	lsls	r2, r2, #21
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	6fffffe8 	.word	0x6fffffe8

0800207c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	401a      	ands	r2, r3
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	055b      	lsls	r3, r3, #21
 8002092:	429a      	cmp	r2, r3
 8002094:	d101      	bne.n	800209a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800209a:	2300      	movs	r3, #0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <LL_ADC_IsEnabled+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_IsEnabled+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2204      	movs	r2, #4
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d101      	bne.n	80020de <LL_ADC_REG_IsConversionOngoing+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	231f      	movs	r3, #31
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e17f      	b.n	800240e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff fa0d 	bl	8001538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2254      	movs	r2, #84	@ 0x54
 8002128:	2100      	movs	r1, #0
 800212a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ffa3 	bl	800207c <LL_ADC_IsInternalRegulatorEnabled>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d115      	bne.n	8002166 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff ff88 	bl	8002054 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002144:	4bb4      	ldr	r3, [pc, #720]	@ (8002418 <HAL_ADC_Init+0x330>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	49b4      	ldr	r1, [pc, #720]	@ (800241c <HAL_ADC_Init+0x334>)
 800214a:	0018      	movs	r0, r3
 800214c:	f7fd ffd8 	bl	8000100 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	3301      	adds	r3, #1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002158:	e002      	b.n	8002160 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3b01      	subs	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0018      	movs	r0, r3
 800216c:	f7ff ff86 	bl	800207c <LL_ADC_IsInternalRegulatorEnabled>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d10f      	bne.n	8002194 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	2210      	movs	r2, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002184:	2201      	movs	r2, #1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800218c:	231f      	movs	r3, #31
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0018      	movs	r0, r3
 800219a:	f7ff ff94 	bl	80020c6 <LL_ADC_REG_IsConversionOngoing>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	2210      	movs	r2, #16
 80021a8:	4013      	ands	r3, r2
 80021aa:	d000      	beq.n	80021ae <HAL_ADC_Init+0xc6>
 80021ac:	e122      	b.n	80023f4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d000      	beq.n	80021b6 <HAL_ADC_Init+0xce>
 80021b4:	e11e      	b.n	80023f4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	4a99      	ldr	r2, [pc, #612]	@ (8002420 <HAL_ADC_Init+0x338>)
 80021bc:	4013      	ands	r3, r2
 80021be:	2202      	movs	r2, #2
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff ff6a 	bl	80020a4 <LL_ADC_IsEnabled>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d000      	beq.n	80021d6 <HAL_ADC_Init+0xee>
 80021d4:	e0ad      	b.n	8002332 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7e1b      	ldrb	r3, [r3, #24]
 80021de:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021e0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e5b      	ldrb	r3, [r3, #25]
 80021e6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021e8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e9b      	ldrb	r3, [r3, #26]
 80021ee:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_ADC_Init+0x118>
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	e000      	b.n	8002202 <HAL_ADC_Init+0x11a>
 8002200:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002202:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002208:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da04      	bge.n	800221c <HAL_ADC_Init+0x134>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	e001      	b.n	8002220 <HAL_ADC_Init+0x138>
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002220:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	212c      	movs	r1, #44	@ 0x2c
 8002226:	5c5b      	ldrb	r3, [r3, r1]
 8002228:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800222a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	5c9b      	ldrb	r3, [r3, r2]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d115      	bne.n	8002268 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7e9b      	ldrb	r3, [r3, #26]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	0252      	lsls	r2, r2, #9
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	e00b      	b.n	8002268 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	2220      	movs	r2, #32
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002260:	2201      	movs	r2, #1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002274:	23e0      	movs	r3, #224	@ 0xe0
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800227e:	4313      	orrs	r3, r2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a65      	ldr	r2, [pc, #404]	@ (8002424 <HAL_ADC_Init+0x33c>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	430a      	orrs	r2, r1
 800229a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0f9b      	lsrs	r3, r3, #30
 80022a2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022a8:	4313      	orrs	r3, r2
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	223c      	movs	r2, #60	@ 0x3c
 80022b4:	5c9b      	ldrb	r3, [r3, r2]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d111      	bne.n	80022de <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0f9b      	lsrs	r3, r3, #30
 80022c0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022c6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80022cc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80022d2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	2201      	movs	r2, #1
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4a50      	ldr	r2, [pc, #320]	@ (8002428 <HAL_ADC_Init+0x340>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	23c0      	movs	r3, #192	@ 0xc0
 80022fa:	061b      	lsls	r3, r3, #24
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d018      	beq.n	8002332 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	05db      	lsls	r3, r3, #23
 8002308:	429a      	cmp	r2, r3
 800230a:	d012      	beq.n	8002332 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	429a      	cmp	r2, r3
 8002316:	d00c      	beq.n	8002332 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002318:	4b44      	ldr	r3, [pc, #272]	@ (800242c <HAL_ADC_Init+0x344>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a44      	ldr	r2, [pc, #272]	@ (8002430 <HAL_ADC_Init+0x348>)
 800231e:	4013      	ands	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	23f0      	movs	r3, #240	@ 0xf0
 8002328:	039b      	lsls	r3, r3, #14
 800232a:	401a      	ands	r2, r3
 800232c:	4b3f      	ldr	r3, [pc, #252]	@ (800242c <HAL_ADC_Init+0x344>)
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233a:	001a      	movs	r2, r3
 800233c:	2100      	movs	r1, #0
 800233e:	f7ff fdf6 	bl	8001f2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	493a      	ldr	r1, [pc, #232]	@ (8002434 <HAL_ADC_Init+0x34c>)
 800234c:	001a      	movs	r2, r3
 800234e:	f7ff fdee 	bl	8001f2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2110      	movs	r1, #16
 8002366:	4249      	negs	r1, r1
 8002368:	430a      	orrs	r2, r1
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
 800236c:	e018      	b.n	80023a0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	039b      	lsls	r3, r3, #14
 8002376:	429a      	cmp	r2, r3
 8002378:	d112      	bne.n	80023a0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	3b01      	subs	r3, #1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	221c      	movs	r2, #28
 800238a:	4013      	ands	r3, r2
 800238c:	2210      	movs	r2, #16
 800238e:	4252      	negs	r2, r2
 8002390:	409a      	lsls	r2, r3
 8002392:	0011      	movs	r1, r2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2100      	movs	r1, #0
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff fdde 	bl	8001f68 <LL_ADC_GetSamplingTimeCommonChannels>
 80023ac:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d10b      	bne.n	80023ce <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	2203      	movs	r2, #3
 80023c2:	4393      	bics	r3, r2
 80023c4:	2201      	movs	r2, #1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023cc:	e01c      	b.n	8002408 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	2212      	movs	r2, #18
 80023d4:	4393      	bics	r3, r2
 80023d6:	2210      	movs	r2, #16
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	2201      	movs	r2, #1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80023ea:	231f      	movs	r3, #31
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023f2:	e009      	b.n	8002408 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	2210      	movs	r2, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b008      	add	sp, #32
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	20000000 	.word	0x20000000
 800241c:	00030d40 	.word	0x00030d40
 8002420:	fffffefd 	.word	0xfffffefd
 8002424:	ffde0201 	.word	0xffde0201
 8002428:	1ffffc02 	.word	0x1ffffc02
 800242c:	40012708 	.word	0x40012708
 8002430:	ffc3ffff 	.word	0xffc3ffff
 8002434:	07ffff04 	.word	0x07ffff04

08002438 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002442:	2317      	movs	r3, #23
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2254      	movs	r2, #84	@ 0x54
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x24>
 8002458:	2302      	movs	r3, #2
 800245a:	e1c0      	b.n	80027de <HAL_ADC_ConfigChannel+0x3a6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2254      	movs	r2, #84	@ 0x54
 8002460:	2101      	movs	r1, #1
 8002462:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff fe2c 	bl	80020c6 <LL_ADC_REG_IsConversionOngoing>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d000      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x3c>
 8002472:	e1a3      	b.n	80027bc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d100      	bne.n	800247e <HAL_ADC_ConfigChannel+0x46>
 800247c:	e143      	b.n	8002706 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	429a      	cmp	r2, r3
 8002488:	d004      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800248e:	4ac1      	ldr	r2, [pc, #772]	@ (8002794 <HAL_ADC_ConfigChannel+0x35c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0019      	movs	r1, r3
 800249e:	0010      	movs	r0, r2
 80024a0:	f7ff fd99 	bl	8001fd6 <LL_ADC_REG_SetSequencerChAdd>
 80024a4:	e0c9      	b.n	800263a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	211f      	movs	r1, #31
 80024b0:	400b      	ands	r3, r1
 80024b2:	210f      	movs	r1, #15
 80024b4:	4099      	lsls	r1, r3
 80024b6:	000b      	movs	r3, r1
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	035b      	lsls	r3, r3, #13
 80024c4:	0b5b      	lsrs	r3, r3, #13
 80024c6:	d105      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x9c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	221f      	movs	r2, #31
 80024d0:	4013      	ands	r3, r2
 80024d2:	e098      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d000      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0xa8>
 80024de:	e091      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1cc>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d000      	beq.n	80024ec <HAL_ADC_ConfigChannel+0xb4>
 80024ea:	e089      	b.n	8002600 <HAL_ADC_ConfigChannel+0x1c8>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2204      	movs	r2, #4
 80024f2:	4013      	ands	r3, r2
 80024f4:	d000      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0xc0>
 80024f6:	e081      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1c4>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	4013      	ands	r3, r2
 8002500:	d000      	beq.n	8002504 <HAL_ADC_ConfigChannel+0xcc>
 8002502:	e079      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x1c0>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	4013      	ands	r3, r2
 800250c:	d000      	beq.n	8002510 <HAL_ADC_ConfigChannel+0xd8>
 800250e:	e071      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x1bc>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2220      	movs	r2, #32
 8002516:	4013      	ands	r3, r2
 8002518:	d000      	beq.n	800251c <HAL_ADC_ConfigChannel+0xe4>
 800251a:	e069      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x1b8>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	4013      	ands	r3, r2
 8002524:	d000      	beq.n	8002528 <HAL_ADC_ConfigChannel+0xf0>
 8002526:	e061      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1b4>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2280      	movs	r2, #128	@ 0x80
 800252e:	4013      	ands	r3, r2
 8002530:	d000      	beq.n	8002534 <HAL_ADC_ConfigChannel+0xfc>
 8002532:	e059      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x1b0>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d151      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1ac>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d149      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1a8>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4013      	ands	r3, r2
 8002556:	d141      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1a4>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	4013      	ands	r3, r2
 8002562:	d139      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1a0>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	015b      	lsls	r3, r3, #5
 800256c:	4013      	ands	r3, r2
 800256e:	d131      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x19c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	019b      	lsls	r3, r3, #6
 8002578:	4013      	ands	r3, r2
 800257a:	d129      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x198>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	01db      	lsls	r3, r3, #7
 8002584:	4013      	ands	r3, r2
 8002586:	d121      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x194>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4013      	ands	r3, r2
 8002592:	d119      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x190>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	025b      	lsls	r3, r3, #9
 800259c:	4013      	ands	r3, r2
 800259e:	d111      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x18c>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	d109      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x188>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	02db      	lsls	r3, r3, #11
 80025b4:	4013      	ands	r3, r2
 80025b6:	d001      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x184>
 80025b8:	2312      	movs	r3, #18
 80025ba:	e024      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025bc:	2300      	movs	r3, #0
 80025be:	e022      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025c0:	2311      	movs	r3, #17
 80025c2:	e020      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025c4:	2310      	movs	r3, #16
 80025c6:	e01e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025c8:	230f      	movs	r3, #15
 80025ca:	e01c      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025cc:	230e      	movs	r3, #14
 80025ce:	e01a      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025d0:	230d      	movs	r3, #13
 80025d2:	e018      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025d4:	230c      	movs	r3, #12
 80025d6:	e016      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025d8:	230b      	movs	r3, #11
 80025da:	e014      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025dc:	230a      	movs	r3, #10
 80025de:	e012      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025e0:	2309      	movs	r3, #9
 80025e2:	e010      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025e4:	2308      	movs	r3, #8
 80025e6:	e00e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025e8:	2307      	movs	r3, #7
 80025ea:	e00c      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025ec:	2306      	movs	r3, #6
 80025ee:	e00a      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e008      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e006      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025f8:	2303      	movs	r3, #3
 80025fa:	e004      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e002      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1ce>
 8002604:	2300      	movs	r3, #0
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6852      	ldr	r2, [r2, #4]
 800260a:	201f      	movs	r0, #31
 800260c:	4002      	ands	r2, r0
 800260e:	4093      	lsls	r3, r2
 8002610:	000a      	movs	r2, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	d808      	bhi.n	800263a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	001a      	movs	r2, r3
 8002636:	f7ff fcae 	bl	8001f96 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	001a      	movs	r2, r3
 8002648:	f7ff fce8 	bl	800201c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db00      	blt.n	8002656 <HAL_ADC_ConfigChannel+0x21e>
 8002654:	e0bc      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002656:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff fc5b 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a4d      	ldr	r2, [pc, #308]	@ (800279c <HAL_ADC_ConfigChannel+0x364>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d122      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	2380      	movs	r3, #128	@ 0x80
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002674:	d11d      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	0412      	lsls	r2, r2, #16
 800267c:	4313      	orrs	r3, r2
 800267e:	4a46      	ldr	r2, [pc, #280]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 8002680:	0019      	movs	r1, r3
 8002682:	0010      	movs	r0, r2
 8002684:	f7ff fc32 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002688:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <HAL_ADC_ConfigChannel+0x368>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4945      	ldr	r1, [pc, #276]	@ (80027a4 <HAL_ADC_ConfigChannel+0x36c>)
 800268e:	0018      	movs	r0, r3
 8002690:	f7fd fd36 	bl	8000100 <__udivsi3>
 8002694:	0003      	movs	r3, r0
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	0013      	movs	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	189b      	adds	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026a2:	e002      	b.n	80026aa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f9      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026b0:	e08e      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3c      	ldr	r2, [pc, #240]	@ (80027a8 <HAL_ADC_ConfigChannel+0x370>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10e      	bne.n	80026da <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	045b      	lsls	r3, r3, #17
 80026c2:	4013      	ands	r3, r2
 80026c4:	d109      	bne.n	80026da <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2280      	movs	r2, #128	@ 0x80
 80026ca:	0452      	lsls	r2, r2, #17
 80026cc:	4313      	orrs	r3, r2
 80026ce:	4a32      	ldr	r2, [pc, #200]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7ff fc0a 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 80026d8:	e07a      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a33      	ldr	r2, [pc, #204]	@ (80027ac <HAL_ADC_ConfigChannel+0x374>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d000      	beq.n	80026e6 <HAL_ADC_ConfigChannel+0x2ae>
 80026e4:	e074      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	03db      	lsls	r3, r3, #15
 80026ec:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026ee:	d000      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x2ba>
 80026f0:	e06e      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2280      	movs	r2, #128	@ 0x80
 80026f6:	03d2      	lsls	r2, r2, #15
 80026f8:	4313      	orrs	r3, r2
 80026fa:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 80026fc:	0019      	movs	r1, r3
 80026fe:	0010      	movs	r0, r2
 8002700:	f7ff fbf4 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002704:	e064      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	429a      	cmp	r2, r3
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002716:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_ADC_ConfigChannel+0x35c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0019      	movs	r1, r3
 8002726:	0010      	movs	r0, r2
 8002728:	f7ff fc66 	bl	8001ff8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da4d      	bge.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 8002736:	0018      	movs	r0, r3
 8002738:	f7ff fbec 	bl	8001f14 <LL_ADC_GetCommonPathInternalCh>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a15      	ldr	r2, [pc, #84]	@ (800279c <HAL_ADC_ConfigChannel+0x364>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <HAL_ADC_ConfigChannel+0x378>)
 800274e:	4013      	ands	r3, r2
 8002750:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f7ff fbc9 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 800275a:	e039      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_ADC_ConfigChannel+0x370>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d108      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <HAL_ADC_ConfigChannel+0x37c>)
 800276a:	4013      	ands	r3, r2
 800276c:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 800276e:	0019      	movs	r1, r3
 8002770:	0010      	movs	r0, r2
 8002772:	f7ff fbbb 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002776:	e02b      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <HAL_ADC_ConfigChannel+0x374>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d126      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <HAL_ADC_ConfigChannel+0x380>)
 8002786:	4013      	ands	r3, r2
 8002788:	4a03      	ldr	r2, [pc, #12]	@ (8002798 <HAL_ADC_ConfigChannel+0x360>)
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f7ff fbad 	bl	8001eec <LL_ADC_SetCommonPathInternalCh>
 8002792:	e01d      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x398>
 8002794:	80000004 	.word	0x80000004
 8002798:	40012708 	.word	0x40012708
 800279c:	b0001000 	.word	0xb0001000
 80027a0:	20000000 	.word	0x20000000
 80027a4:	00030d40 	.word	0x00030d40
 80027a8:	b8004000 	.word	0xb8004000
 80027ac:	b4002000 	.word	0xb4002000
 80027b0:	ff7fffff 	.word	0xff7fffff
 80027b4:	feffffff 	.word	0xfeffffff
 80027b8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	2220      	movs	r2, #32
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027c8:	2317      	movs	r3, #23
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2254      	movs	r2, #84	@ 0x54
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80027d8:	2317      	movs	r3, #23
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b006      	add	sp, #24
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80027fa:	d809      	bhi.n	8002810 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	001a      	movs	r2, r3
 8002802:	231f      	movs	r3, #31
 8002804:	401a      	ands	r2, r3
 8002806:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <__NVIC_EnableIRQ+0x30>)
 8002808:	2101      	movs	r1, #1
 800280a:	4091      	lsls	r1, r2
 800280c:	000a      	movs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	0002      	movs	r2, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002830:	d828      	bhi.n	8002884 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002832:	4a2f      	ldr	r2, [pc, #188]	@ (80028f0 <__NVIC_SetPriority+0xd4>)
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	33c0      	adds	r3, #192	@ 0xc0
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	589b      	ldr	r3, [r3, r2]
 8002842:	1dfa      	adds	r2, r7, #7
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	0011      	movs	r1, r2
 8002848:	2203      	movs	r2, #3
 800284a:	400a      	ands	r2, r1
 800284c:	00d2      	lsls	r2, r2, #3
 800284e:	21ff      	movs	r1, #255	@ 0xff
 8002850:	4091      	lsls	r1, r2
 8002852:	000a      	movs	r2, r1
 8002854:	43d2      	mvns	r2, r2
 8002856:	401a      	ands	r2, r3
 8002858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	22ff      	movs	r2, #255	@ 0xff
 8002860:	401a      	ands	r2, r3
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	0018      	movs	r0, r3
 8002868:	2303      	movs	r3, #3
 800286a:	4003      	ands	r3, r0
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002870:	481f      	ldr	r0, [pc, #124]	@ (80028f0 <__NVIC_SetPriority+0xd4>)
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b25b      	sxtb	r3, r3
 8002878:	089b      	lsrs	r3, r3, #2
 800287a:	430a      	orrs	r2, r1
 800287c:	33c0      	adds	r3, #192	@ 0xc0
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002882:	e031      	b.n	80028e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002884:	4a1b      	ldr	r2, [pc, #108]	@ (80028f4 <__NVIC_SetPriority+0xd8>)
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	0019      	movs	r1, r3
 800288c:	230f      	movs	r3, #15
 800288e:	400b      	ands	r3, r1
 8002890:	3b08      	subs	r3, #8
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3306      	adds	r3, #6
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	3304      	adds	r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1dfa      	adds	r2, r7, #7
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	0011      	movs	r1, r2
 80028a4:	2203      	movs	r2, #3
 80028a6:	400a      	ands	r2, r1
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	21ff      	movs	r1, #255	@ 0xff
 80028ac:	4091      	lsls	r1, r2
 80028ae:	000a      	movs	r2, r1
 80028b0:	43d2      	mvns	r2, r2
 80028b2:	401a      	ands	r2, r3
 80028b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	019b      	lsls	r3, r3, #6
 80028ba:	22ff      	movs	r2, #255	@ 0xff
 80028bc:	401a      	ands	r2, r3
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	0018      	movs	r0, r3
 80028c4:	2303      	movs	r3, #3
 80028c6:	4003      	ands	r3, r0
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028cc:	4809      	ldr	r0, [pc, #36]	@ (80028f4 <__NVIC_SetPriority+0xd8>)
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	001c      	movs	r4, r3
 80028d4:	230f      	movs	r3, #15
 80028d6:	4023      	ands	r3, r4
 80028d8:	3b08      	subs	r3, #8
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	430a      	orrs	r2, r1
 80028de:	3306      	adds	r3, #6
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	18c3      	adds	r3, r0, r3
 80028e4:	3304      	adds	r3, #4
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	46c0      	nop			@ (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b003      	add	sp, #12
 80028ee:	bd90      	pop	{r4, r7, pc}
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	045b      	lsls	r3, r3, #17
 8002908:	429a      	cmp	r2, r3
 800290a:	d301      	bcc.n	8002910 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290c:	2301      	movs	r3, #1
 800290e:	e010      	b.n	8002932 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002910:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <SysTick_Config+0x44>)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	3a01      	subs	r2, #1
 8002916:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002918:	2301      	movs	r3, #1
 800291a:	425b      	negs	r3, r3
 800291c:	2103      	movs	r1, #3
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff ff7c 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <SysTick_Config+0x44>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <SysTick_Config+0x44>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	210f      	movs	r1, #15
 800294c:	187b      	adds	r3, r7, r1
 800294e:	1c02      	adds	r2, r0, #0
 8002950:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	187b      	adds	r3, r7, r1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b25b      	sxtb	r3, r3
 800295a:	0011      	movs	r1, r2
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	0002      	movs	r2, r0
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff ff33 	bl	80027e8 <__NVIC_EnableIRQ>
}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7ff ffaf 	bl	80028f8 <SysTick_Config>
 800299a:	0003      	movs	r3, r0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e077      	b.n	8002aa6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3d      	ldr	r2, [pc, #244]	@ (8002ab0 <HAL_DMA_Init+0x10c>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	2114      	movs	r1, #20
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7fd fb9c 	bl	8000100 <__udivsi3>
 80029c8:	0003      	movs	r3, r0
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2225      	movs	r2, #37	@ 0x25
 80029d4:	2102      	movs	r1, #2
 80029d6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4934      	ldr	r1, [pc, #208]	@ (8002ab4 <HAL_DMA_Init+0x110>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f8fb 	bl	8002c1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	01db      	lsls	r3, r3, #7
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d102      	bne.n	8002a38 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	213f      	movs	r1, #63	@ 0x3f
 8002a42:	400a      	ands	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d011      	beq.n	8002a7c <HAL_DMA_Init+0xd8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d80d      	bhi.n	8002a7c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 f906 	bl	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	e008      	b.n	8002a8e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2225      	movs	r2, #37	@ 0x25
 8002a98:	2101      	movs	r1, #1
 8002a9a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	@ 0x24
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	bffdfff8 	.word	0xbffdfff8
 8002ab4:	ffff800f 	.word	0xffff800f

08002ab8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ac0:	4b55      	ldr	r3, [pc, #340]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	221c      	movs	r2, #28
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d027      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x7a>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d023      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2220      	movs	r2, #32
 8002af2:	4013      	ands	r3, r2
 8002af4:	d107      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2104      	movs	r1, #4
 8002b02:	438a      	bics	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002b06:	4b44      	ldr	r3, [pc, #272]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	221c      	movs	r2, #28
 8002b10:	4013      	ands	r3, r2
 8002b12:	2204      	movs	r2, #4
 8002b14:	409a      	lsls	r2, r3
 8002b16:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d100      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x6e>
 8002b24:	e073      	b.n	8002c0e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002b30:	e06d      	b.n	8002c0e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	221c      	movs	r2, #28
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	d02e      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xec>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d02a      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4013      	ands	r3, r2
 8002b58:	d10b      	bne.n	8002b72 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	210a      	movs	r1, #10
 8002b66:	438a      	bics	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2225      	movs	r2, #37	@ 0x25
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002b72:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	221c      	movs	r2, #28
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2202      	movs	r2, #2
 8002b80:	409a      	lsls	r2, r3
 8002b82:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	@ 0x24
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d03a      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002ba2:	e034      	b.n	8002c0e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	221c      	movs	r2, #28
 8002baa:	4013      	ands	r3, r2
 8002bac:	2208      	movs	r2, #8
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d02b      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x158>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d027      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	210e      	movs	r1, #14
 8002bcc:	438a      	bics	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	221c      	movs	r2, #28
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <HAL_DMA_IRQHandler+0x160>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2225      	movs	r2, #37	@ 0x25
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	@ 0x24
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46c0      	nop			@ (mov r8, r8)
}
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40020000 	.word	0x40020000

08002c1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002c2c:	4694      	mov	ip, r2
 8002c2e:	4463      	add	r3, ip
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	001a      	movs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	23ff      	movs	r3, #255	@ 0xff
 8002c40:	4013      	ands	r3, r2
 8002c42:	3b08      	subs	r3, #8
 8002c44:	2114      	movs	r1, #20
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7fd fa5a 	bl	8000100 <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	221f      	movs	r2, #31
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	10008200 	.word	0x10008200
 8002c70:	40020880 	.word	0x40020880

08002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	223f      	movs	r2, #63	@ 0x3f
 8002c82:	4013      	ands	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c8a:	4694      	mov	ip, r2
 8002c8c:	4463      	add	r3, ip
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	001a      	movs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a07      	ldr	r2, [pc, #28]	@ (8002cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b004      	add	sp, #16
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	1000823f 	.word	0x1000823f
 8002cb8:	40020940 	.word	0x40020940

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e147      	b.n	8002f5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4091      	lsls	r1, r2
 8002cd6:	000a      	movs	r2, r1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d100      	bne.n	8002ce4 <HAL_GPIO_Init+0x28>
 8002ce2:	e138      	b.n	8002f56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d005      	beq.n	8002cfc <HAL_GPIO_Init+0x40>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d130      	bne.n	8002d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	0013      	movs	r3, r2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d32:	2201      	movs	r2, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
 8002d38:	0013      	movs	r3, r2
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	2201      	movs	r2, #1
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	0013      	movs	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d017      	beq.n	8002d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	409a      	lsls	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d123      	bne.n	8002dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	58d3      	ldr	r3, [r2, r3]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2207      	movs	r2, #7
 8002db8:	4013      	ands	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2107      	movs	r1, #7
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	6939      	ldr	r1, [r7, #16]
 8002dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	0013      	movs	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	23c0      	movs	r3, #192	@ 0xc0
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d100      	bne.n	8002e30 <HAL_GPIO_Init+0x174>
 8002e2e:	e092      	b.n	8002f56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e30:	4a50      	ldr	r2, [pc, #320]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3318      	adds	r3, #24
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	589b      	ldr	r3, [r3, r2]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2203      	movs	r2, #3
 8002e42:	4013      	ands	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	220f      	movs	r2, #15
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	23a0      	movs	r3, #160	@ 0xa0
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0x1ca>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a45      	ldr	r2, [pc, #276]	@ (8002f78 <HAL_GPIO_Init+0x2bc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_GPIO_Init+0x1c6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a44      	ldr	r2, [pc, #272]	@ (8002f7c <HAL_GPIO_Init+0x2c0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x1c2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a43      	ldr	r2, [pc, #268]	@ (8002f80 <HAL_GPIO_Init+0x2c4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_GPIO_Init+0x1be>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x1cc>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e004      	b.n	8002e88 <HAL_GPIO_Init+0x1cc>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_Init+0x1cc>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x1cc>
 8002e86:	2300      	movs	r3, #0
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	00d2      	lsls	r2, r2, #3
 8002e90:	4093      	lsls	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e98:	4936      	ldr	r1, [pc, #216]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3318      	adds	r3, #24
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea6:	4b33      	ldr	r3, [pc, #204]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	035b      	lsls	r3, r3, #13
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ed0:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	039b      	lsls	r3, r3, #14
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002efa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002efc:	2384      	movs	r3, #132	@ 0x84
 8002efe:	58d3      	ldr	r3, [r2, r3]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	029b      	lsls	r3, r3, #10
 8002f14:	4013      	ands	r3, r2
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f20:	4914      	ldr	r1, [pc, #80]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002f22:	2284      	movs	r2, #132	@ 0x84
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002f28:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	58d3      	ldr	r3, [r2, r3]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43da      	mvns	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	025b      	lsls	r3, r3, #9
 8002f42:	4013      	ands	r3, r2
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f4e:	4909      	ldr	r1, [pc, #36]	@ (8002f74 <HAL_GPIO_Init+0x2b8>)
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	40da      	lsrs	r2, r3
 8002f64:	1e13      	subs	r3, r2, #0
 8002f66:	d000      	beq.n	8002f6a <HAL_GPIO_Init+0x2ae>
 8002f68:	e6b0      	b.n	8002ccc <HAL_GPIO_Init+0x10>
  }
}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	46c0      	nop			@ (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b006      	add	sp, #24
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021800 	.word	0x40021800
 8002f78:	50000400 	.word	0x50000400
 8002f7c:	50000800 	.word	0x50000800
 8002f80:	50000c00 	.word	0x50000c00

08002f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	000a      	movs	r2, r1
 8002f8e:	1cbb      	adds	r3, r7, #2
 8002f90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	1cba      	adds	r2, r7, #2
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e003      	b.n	8002fb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa8:	230f      	movs	r3, #15
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	0008      	movs	r0, r1
 8002fc8:	0011      	movs	r1, r2
 8002fca:	1cbb      	adds	r3, r7, #2
 8002fcc:	1c02      	adds	r2, r0, #0
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	1c7b      	adds	r3, r7, #1
 8002fd2:	1c0a      	adds	r2, r1, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd6:	1c7b      	adds	r3, r7, #1
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fde:	1cbb      	adds	r3, r7, #2
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe6:	e003      	b.n	8002ff0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe8:	1cbb      	adds	r3, r7, #2
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a19      	ldr	r2, [pc, #100]	@ (800306c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d11f      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800301c:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	0013      	movs	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	189b      	adds	r3, r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4912      	ldr	r1, [pc, #72]	@ (8003074 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800302a:	0018      	movs	r0, r3
 800302c:	f7fd f868 	bl	8000100 <__udivsi3>
 8003030:	0003      	movs	r3, r0
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003036:	e008      	b.n	800304a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3b01      	subs	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e001      	b.n	800304a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e009      	b.n	800305e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304a:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	2380      	movs	r3, #128	@ 0x80
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	401a      	ands	r2, r3
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	429a      	cmp	r2, r3
 800305a:	d0ed      	beq.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	40007000 	.word	0x40007000
 800306c:	fffff9ff 	.word	0xfffff9ff
 8003070:	20000000 	.word	0x20000000
 8003074:	000f4240 	.word	0x000f4240

08003078 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <LL_RCC_GetAPB1Prescaler+0x14>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	23e0      	movs	r3, #224	@ 0xe0
 8003082:	01db      	lsls	r3, r3, #7
 8003084:	4013      	ands	r3, r2
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e2f3      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d100      	bne.n	80030ae <HAL_RCC_OscConfig+0x1e>
 80030ac:	e07c      	b.n	80031a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ae:	4bc3      	ldr	r3, [pc, #780]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2238      	movs	r2, #56	@ 0x38
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b8:	4bc0      	ldr	r3, [pc, #768]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_OscConfig+0x3e>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d10b      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	4bb9      	ldr	r3, [pc, #740]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	4013      	ands	r3, r2
 80030de:	d062      	beq.n	80031a6 <HAL_RCC_OscConfig+0x116>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d15e      	bne.n	80031a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e2ce      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	025b      	lsls	r3, r3, #9
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x78>
 80030f8:	4bb0      	ldr	r3, [pc, #704]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4baf      	ldr	r3, [pc, #700]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	0249      	lsls	r1, r1, #9
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e020      	b.n	800314a <HAL_RCC_OscConfig+0xba>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	23a0      	movs	r3, #160	@ 0xa0
 800310e:	02db      	lsls	r3, r3, #11
 8003110:	429a      	cmp	r2, r3
 8003112:	d10e      	bne.n	8003132 <HAL_RCC_OscConfig+0xa2>
 8003114:	4ba9      	ldr	r3, [pc, #676]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4ba8      	ldr	r3, [pc, #672]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800311a:	2180      	movs	r1, #128	@ 0x80
 800311c:	02c9      	lsls	r1, r1, #11
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	4ba6      	ldr	r3, [pc, #664]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4ba5      	ldr	r3, [pc, #660]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003128:	2180      	movs	r1, #128	@ 0x80
 800312a:	0249      	lsls	r1, r1, #9
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e00b      	b.n	800314a <HAL_RCC_OscConfig+0xba>
 8003132:	4ba2      	ldr	r3, [pc, #648]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4ba1      	ldr	r3, [pc, #644]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003138:	49a1      	ldr	r1, [pc, #644]	@ (80033c0 <HAL_RCC_OscConfig+0x330>)
 800313a:	400a      	ands	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	4b9f      	ldr	r3, [pc, #636]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b9e      	ldr	r3, [pc, #632]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003144:	499f      	ldr	r1, [pc, #636]	@ (80033c4 <HAL_RCC_OscConfig+0x334>)
 8003146:	400a      	ands	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe fe9d 	bl	8001e90 <HAL_GetTick>
 8003156:	0003      	movs	r3, r0
 8003158:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe fe98 	bl	8001e90 <HAL_GetTick>
 8003160:	0002      	movs	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e28d      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316e:	4b93      	ldr	r3, [pc, #588]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	029b      	lsls	r3, r3, #10
 8003176:	4013      	ands	r3, r2
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xcc>
 800317a:	e015      	b.n	80031a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe fe88 	bl	8001e90 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003186:	f7fe fe83 	bl	8001e90 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	@ 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e278      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003198:	4b88      	ldr	r3, [pc, #544]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	4013      	ands	r3, r2
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0xf6>
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2202      	movs	r2, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d100      	bne.n	80031b4 <HAL_RCC_OscConfig+0x124>
 80031b2:	e099      	b.n	80032e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b4:	4b81      	ldr	r3, [pc, #516]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2238      	movs	r2, #56	@ 0x38
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031be:	4b7f      	ldr	r3, [pc, #508]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2203      	movs	r2, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0x144>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d002      	beq.n	80031da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d135      	bne.n	8003246 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031da:	4b78      	ldr	r3, [pc, #480]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4013      	ands	r3, r2
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x162>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e24b      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b72      	ldr	r3, [pc, #456]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a74      	ldr	r2, [pc, #464]	@ (80033c8 <HAL_RCC_OscConfig+0x338>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	021a      	lsls	r2, r3, #8
 8003202:	4b6e      	ldr	r3, [pc, #440]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d112      	bne.n	8003234 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800320e:	4b6b      	ldr	r3, [pc, #428]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6e      	ldr	r2, [pc, #440]	@ (80033cc <HAL_RCC_OscConfig+0x33c>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800321e:	430a      	orrs	r2, r1
 8003220:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003222:	4b66      	ldr	r3, [pc, #408]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	0adb      	lsrs	r3, r3, #11
 8003228:	2207      	movs	r2, #7
 800322a:	4013      	ands	r3, r2
 800322c:	4a68      	ldr	r2, [pc, #416]	@ (80033d0 <HAL_RCC_OscConfig+0x340>)
 800322e:	40da      	lsrs	r2, r3
 8003230:	4b68      	ldr	r3, [pc, #416]	@ (80033d4 <HAL_RCC_OscConfig+0x344>)
 8003232:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003234:	4b68      	ldr	r3, [pc, #416]	@ (80033d8 <HAL_RCC_OscConfig+0x348>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0018      	movs	r0, r3
 800323a:	f7fe fdcd 	bl	8001dd8 <HAL_InitTick>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d051      	beq.n	80032e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e221      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d030      	beq.n	80032b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800324e:	4b5b      	ldr	r3, [pc, #364]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a5e      	ldr	r2, [pc, #376]	@ (80033cc <HAL_RCC_OscConfig+0x33c>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	4b57      	ldr	r3, [pc, #348]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003262:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b55      	ldr	r3, [pc, #340]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003268:	2180      	movs	r1, #128	@ 0x80
 800326a:	0049      	lsls	r1, r1, #1
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fe0e 	bl	8001e90 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fe09 	bl	8001e90 <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1fe      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328c:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4013      	ands	r3, r2
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b48      	ldr	r3, [pc, #288]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a4a      	ldr	r2, [pc, #296]	@ (80033c8 <HAL_RCC_OscConfig+0x338>)
 800329e:	4013      	ands	r3, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	021a      	lsls	r2, r3, #8
 80032a8:	4b44      	ldr	r3, [pc, #272]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e01b      	b.n	80032e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	4b42      	ldr	r3, [pc, #264]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80032b6:	4949      	ldr	r1, [pc, #292]	@ (80033dc <HAL_RCC_OscConfig+0x34c>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fde8 	bl	8001e90 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fde3 	bl	8001e90 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1d8      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4013      	ands	r3, r2
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x236>
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	4013      	ands	r3, r2
 80032f0:	d047      	beq.n	8003382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032f2:	4b32      	ldr	r3, [pc, #200]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2238      	movs	r2, #56	@ 0x38
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b18      	cmp	r3, #24
 80032fc:	d10a      	bne.n	8003314 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	d03c      	beq.n	8003382 <HAL_RCC_OscConfig+0x2f2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d138      	bne.n	8003382 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e1ba      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d019      	beq.n	8003350 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800331e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003320:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003322:	2101      	movs	r1, #1
 8003324:	430a      	orrs	r2, r1
 8003326:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fdb2 	bl	8001e90 <HAL_GetTick>
 800332c:	0003      	movs	r3, r0
 800332e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe fdad 	bl	8001e90 <HAL_GetTick>
 8003336:	0002      	movs	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a2      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003344:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	2202      	movs	r2, #2
 800334a:	4013      	ands	r3, r2
 800334c:	d0f1      	beq.n	8003332 <HAL_RCC_OscConfig+0x2a2>
 800334e:	e018      	b.n	8003382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003350:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003352:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003356:	2101      	movs	r1, #1
 8003358:	438a      	bics	r2, r1
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fd98 	bl	8001e90 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe fd93 	bl	8001e90 <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e188      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 800337a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337c:	2202      	movs	r2, #2
 800337e:	4013      	ands	r3, r2
 8003380:	d1f1      	bne.n	8003366 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2204      	movs	r2, #4
 8003388:	4013      	ands	r3, r2
 800338a:	d100      	bne.n	800338e <HAL_RCC_OscConfig+0x2fe>
 800338c:	e0c6      	b.n	800351c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	231f      	movs	r3, #31
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2238      	movs	r2, #56	@ 0x38
 800339c:	4013      	ands	r3, r2
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d11e      	bne.n	80033e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_RCC_OscConfig+0x32c>)
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	2202      	movs	r2, #2
 80033a8:	4013      	ands	r3, r2
 80033aa:	d100      	bne.n	80033ae <HAL_RCC_OscConfig+0x31e>
 80033ac:	e0b6      	b.n	800351c <HAL_RCC_OscConfig+0x48c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d000      	beq.n	80033b8 <HAL_RCC_OscConfig+0x328>
 80033b6:	e0b1      	b.n	800351c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e166      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
 80033bc:	40021000 	.word	0x40021000
 80033c0:	fffeffff 	.word	0xfffeffff
 80033c4:	fffbffff 	.word	0xfffbffff
 80033c8:	ffff80ff 	.word	0xffff80ff
 80033cc:	ffffc7ff 	.word	0xffffc7ff
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000004 	.word	0x20000004
 80033dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e0:	4bac      	ldr	r3, [pc, #688]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80033e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033e4:	2380      	movs	r3, #128	@ 0x80
 80033e6:	055b      	lsls	r3, r3, #21
 80033e8:	4013      	ands	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x360>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x362>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d011      	beq.n	800341a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4ba7      	ldr	r3, [pc, #668]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80033f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033fa:	4ba6      	ldr	r3, [pc, #664]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80033fc:	2180      	movs	r1, #128	@ 0x80
 80033fe:	0549      	lsls	r1, r1, #21
 8003400:	430a      	orrs	r2, r1
 8003402:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003404:	4ba3      	ldr	r3, [pc, #652]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003408:	2380      	movs	r3, #128	@ 0x80
 800340a:	055b      	lsls	r3, r3, #21
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003412:	231f      	movs	r3, #31
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	4b9f      	ldr	r3, [pc, #636]	@ (8003698 <HAL_RCC_OscConfig+0x608>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4013      	ands	r3, r2
 8003424:	d11a      	bne.n	800345c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003426:	4b9c      	ldr	r3, [pc, #624]	@ (8003698 <HAL_RCC_OscConfig+0x608>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b9b      	ldr	r3, [pc, #620]	@ (8003698 <HAL_RCC_OscConfig+0x608>)
 800342c:	2180      	movs	r1, #128	@ 0x80
 800342e:	0049      	lsls	r1, r1, #1
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003434:	f7fe fd2c 	bl	8001e90 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fe fd27 	bl	8001e90 <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e11c      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003450:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <HAL_RCC_OscConfig+0x608>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x3e2>
 8003464:	4b8b      	ldr	r3, [pc, #556]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003466:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003468:	4b8a      	ldr	r3, [pc, #552]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800346a:	2101      	movs	r1, #1
 800346c:	430a      	orrs	r2, r1
 800346e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003470:	e01c      	b.n	80034ac <HAL_RCC_OscConfig+0x41c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x404>
 800347a:	4b86      	ldr	r3, [pc, #536]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800347c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800347e:	4b85      	ldr	r3, [pc, #532]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003480:	2104      	movs	r1, #4
 8003482:	430a      	orrs	r2, r1
 8003484:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003486:	4b83      	ldr	r3, [pc, #524]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800348a:	4b82      	ldr	r3, [pc, #520]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800348c:	2101      	movs	r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x41c>
 8003494:	4b7f      	ldr	r3, [pc, #508]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003496:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003498:	4b7e      	ldr	r3, [pc, #504]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800349a:	2101      	movs	r1, #1
 800349c:	438a      	bics	r2, r1
 800349e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80034a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80034a6:	2104      	movs	r1, #4
 80034a8:	438a      	bics	r2, r1
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d014      	beq.n	80034de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fcec 	bl	8001e90 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	e009      	b.n	80034d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fe fce7 	bl	8001e90 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	4a74      	ldr	r2, [pc, #464]	@ (800369c <HAL_RCC_OscConfig+0x60c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0db      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b70      	ldr	r3, [pc, #448]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80034d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d6:	2202      	movs	r2, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x42e>
 80034dc:	e013      	b.n	8003506 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe fcd7 	bl	8001e90 <HAL_GetTick>
 80034e2:	0003      	movs	r3, r0
 80034e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e6:	e009      	b.n	80034fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe fcd2 	bl	8001e90 <HAL_GetTick>
 80034ec:	0002      	movs	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	4a6a      	ldr	r2, [pc, #424]	@ (800369c <HAL_RCC_OscConfig+0x60c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0c6      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fc:	4b65      	ldr	r3, [pc, #404]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80034fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003500:	2202      	movs	r2, #2
 8003502:	4013      	ands	r3, r2
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003506:	231f      	movs	r3, #31
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003514:	4b5f      	ldr	r3, [pc, #380]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003516:	4962      	ldr	r1, [pc, #392]	@ (80036a0 <HAL_RCC_OscConfig+0x610>)
 8003518:	400a      	ands	r2, r1
 800351a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d100      	bne.n	8003526 <HAL_RCC_OscConfig+0x496>
 8003524:	e0b0      	b.n	8003688 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003526:	4b5b      	ldr	r3, [pc, #364]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2238      	movs	r2, #56	@ 0x38
 800352c:	4013      	ands	r3, r2
 800352e:	2b10      	cmp	r3, #16
 8003530:	d100      	bne.n	8003534 <HAL_RCC_OscConfig+0x4a4>
 8003532:	e078      	b.n	8003626 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d153      	bne.n	80035e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353c:	4b55      	ldr	r3, [pc, #340]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b54      	ldr	r3, [pc, #336]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003542:	4958      	ldr	r1, [pc, #352]	@ (80036a4 <HAL_RCC_OscConfig+0x614>)
 8003544:	400a      	ands	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fca2 	bl	8001e90 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7fe fc9d 	bl	8001e90 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e092      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003564:	4b4b      	ldr	r3, [pc, #300]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	049b      	lsls	r3, r3, #18
 800356c:	4013      	ands	r3, r2
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003570:	4b48      	ldr	r3, [pc, #288]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a4c      	ldr	r2, [pc, #304]	@ (80036a8 <HAL_RCC_OscConfig+0x618>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	431a      	orrs	r2, r3
 8003598:	4b3e      	ldr	r3, [pc, #248]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800359a:	430a      	orrs	r2, r1
 800359c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359e:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035a4:	2180      	movs	r1, #128	@ 0x80
 80035a6:	0449      	lsls	r1, r1, #17
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80035ac:	4b39      	ldr	r3, [pc, #228]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	0549      	lsls	r1, r1, #21
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe fc69 	bl	8001e90 <HAL_GetTick>
 80035be:	0003      	movs	r3, r0
 80035c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fc64 	bl	8001e90 <HAL_GetTick>
 80035c8:	0002      	movs	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e059      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	@ 0x80
 80035dc:	049b      	lsls	r3, r3, #18
 80035de:	4013      	ands	r3, r2
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x534>
 80035e2:	e051      	b.n	8003688 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 80035ea:	492e      	ldr	r1, [pc, #184]	@ (80036a4 <HAL_RCC_OscConfig+0x614>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fc4e 	bl	8001e90 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fe fc49 	bl	8001e90 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e03e      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	049b      	lsls	r3, r3, #18
 8003614:	4013      	ands	r3, r2
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003618:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 800361e:	4923      	ldr	r1, [pc, #140]	@ (80036ac <HAL_RCC_OscConfig+0x61c>)
 8003620:	400a      	ands	r2, r1
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e030      	b.n	8003688 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e02b      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003632:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <HAL_RCC_OscConfig+0x604>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2203      	movs	r2, #3
 800363c:	401a      	ands	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	429a      	cmp	r2, r3
 8003644:	d11e      	bne.n	8003684 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2270      	movs	r2, #112	@ 0x70
 800364a:	401a      	ands	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d117      	bne.n	8003684 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	23fe      	movs	r3, #254	@ 0xfe
 8003658:	01db      	lsls	r3, r3, #7
 800365a:	401a      	ands	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003660:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d10e      	bne.n	8003684 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	23f8      	movs	r3, #248	@ 0xf8
 800366a:	039b      	lsls	r3, r3, #14
 800366c:	401a      	ands	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	0f5b      	lsrs	r3, r3, #29
 800367a:	075a      	lsls	r2, r3, #29
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b008      	add	sp, #32
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	00001388 	.word	0x00001388
 80036a0:	efffffff 	.word	0xefffffff
 80036a4:	feffffff 	.word	0xfeffffff
 80036a8:	1fc1808c 	.word	0x1fc1808c
 80036ac:	effefffc 	.word	0xeffefffc

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0e9      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b76      	ldr	r3, [pc, #472]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2207      	movs	r2, #7
 80036ca:	4013      	ands	r3, r2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d91e      	bls.n	8003710 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b73      	ldr	r3, [pc, #460]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2207      	movs	r2, #7
 80036d8:	4393      	bics	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	4b70      	ldr	r3, [pc, #448]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036e4:	f7fe fbd4 	bl	8001e90 <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ee:	f7fe fbcf 	bl	8001e90 <HAL_GetTick>
 80036f2:	0002      	movs	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	4a6a      	ldr	r2, [pc, #424]	@ (80038a4 <HAL_RCC_ClockConfig+0x1f4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0ca      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003702:	4b67      	ldr	r3, [pc, #412]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2207      	movs	r2, #7
 8003708:	4013      	ands	r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2202      	movs	r2, #2
 8003716:	4013      	ands	r3, r2
 8003718:	d015      	beq.n	8003746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2204      	movs	r2, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d006      	beq.n	8003732 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003724:	4b60      	ldr	r3, [pc, #384]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	4b5f      	ldr	r3, [pc, #380]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 800372a:	21e0      	movs	r1, #224	@ 0xe0
 800372c:	01c9      	lsls	r1, r1, #7
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003732:	4b5d      	ldr	r3, [pc, #372]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4a5d      	ldr	r2, [pc, #372]	@ (80038ac <HAL_RCC_ClockConfig+0x1fc>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4b59      	ldr	r3, [pc, #356]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2201      	movs	r2, #1
 800374c:	4013      	ands	r3, r2
 800374e:	d057      	beq.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	029b      	lsls	r3, r3, #10
 8003760:	4013      	ands	r3, r2
 8003762:	d12b      	bne.n	80037bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e097      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d107      	bne.n	8003780 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003770:	4b4d      	ldr	r3, [pc, #308]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	049b      	lsls	r3, r3, #18
 8003778:	4013      	ands	r3, r2
 800377a:	d11f      	bne.n	80037bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e08b      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003788:	4b47      	ldr	r3, [pc, #284]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4013      	ands	r3, r2
 8003792:	d113      	bne.n	80037bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e07f      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d106      	bne.n	80037ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a0:	4b41      	ldr	r3, [pc, #260]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 80037a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a4:	2202      	movs	r2, #2
 80037a6:	4013      	ands	r3, r2
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e074      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	4b3e      	ldr	r3, [pc, #248]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e06d      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037bc:	4b3a      	ldr	r3, [pc, #232]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2207      	movs	r2, #7
 80037c2:	4393      	bics	r3, r2
 80037c4:	0019      	movs	r1, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 80037cc:	430a      	orrs	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fe fb5e 	bl	8001e90 <HAL_GetTick>
 80037d4:	0003      	movs	r3, r0
 80037d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d8:	e009      	b.n	80037ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037da:	f7fe fb59 	bl	8001e90 <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <HAL_RCC_ClockConfig+0x1f4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e054      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b2e      	ldr	r3, [pc, #184]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2238      	movs	r2, #56	@ 0x38
 80037f4:	401a      	ands	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1ec      	bne.n	80037da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2207      	movs	r2, #7
 8003806:	4013      	ands	r3, r2
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d21e      	bcs.n	800384c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2207      	movs	r2, #7
 8003814:	4393      	bics	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003820:	f7fe fb36 	bl	8001e90 <HAL_GetTick>
 8003824:	0003      	movs	r3, r0
 8003826:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003828:	e009      	b.n	800383e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382a:	f7fe fb31 	bl	8001e90 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	4a1b      	ldr	r2, [pc, #108]	@ (80038a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e02c      	b.n	8003898 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800383e:	4b18      	ldr	r3, [pc, #96]	@ (80038a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2207      	movs	r2, #7
 8003844:	4013      	ands	r3, r2
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2204      	movs	r2, #4
 8003852:	4013      	ands	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a15      	ldr	r2, [pc, #84]	@ (80038b0 <HAL_RCC_ClockConfig+0x200>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800386a:	f000 f829 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800386e:	0001      	movs	r1, r0
 8003870:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	220f      	movs	r2, #15
 8003878:	401a      	ands	r2, r3
 800387a:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <HAL_RCC_ClockConfig+0x204>)
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	58d3      	ldr	r3, [r2, r3]
 8003880:	221f      	movs	r2, #31
 8003882:	4013      	ands	r3, r2
 8003884:	000a      	movs	r2, r1
 8003886:	40da      	lsrs	r2, r3
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <HAL_RCC_ClockConfig+0x208>)
 800388a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_ClockConfig+0x20c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fe faa1 	bl	8001dd8 <HAL_InitTick>
 8003896:	0003      	movs	r3, r0
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b004      	add	sp, #16
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40022000 	.word	0x40022000
 80038a4:	00001388 	.word	0x00001388
 80038a8:	40021000 	.word	0x40021000
 80038ac:	fffff0ff 	.word	0xfffff0ff
 80038b0:	ffff8fff 	.word	0xffff8fff
 80038b4:	08005730 	.word	0x08005730
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c6:	4b3c      	ldr	r3, [pc, #240]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2238      	movs	r2, #56	@ 0x38
 80038cc:	4013      	ands	r3, r2
 80038ce:	d10f      	bne.n	80038f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038d0:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0adb      	lsrs	r3, r3, #11
 80038d6:	2207      	movs	r2, #7
 80038d8:	4013      	ands	r3, r2
 80038da:	2201      	movs	r2, #1
 80038dc:	409a      	lsls	r2, r3
 80038de:	0013      	movs	r3, r2
 80038e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038e2:	6839      	ldr	r1, [r7, #0]
 80038e4:	4835      	ldr	r0, [pc, #212]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80038e6:	f7fc fc0b 	bl	8000100 <__udivsi3>
 80038ea:	0003      	movs	r3, r0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	e05d      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f0:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2238      	movs	r2, #56	@ 0x38
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038fc:	4b30      	ldr	r3, [pc, #192]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e054      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003902:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2238      	movs	r2, #56	@ 0x38
 8003908:	4013      	ands	r3, r2
 800390a:	2b10      	cmp	r3, #16
 800390c:	d138      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800390e:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2203      	movs	r2, #3
 8003914:	4013      	ands	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003918:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	2207      	movs	r2, #7
 8003920:	4013      	ands	r3, r2
 8003922:	3301      	adds	r3, #1
 8003924:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d10d      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4824      	ldr	r0, [pc, #144]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003930:	f7fc fbe6 	bl	8000100 <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	0019      	movs	r1, r3
 8003938:	4b1f      	ldr	r3, [pc, #124]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	227f      	movs	r2, #127	@ 0x7f
 8003940:	4013      	ands	r3, r2
 8003942:	434b      	muls	r3, r1
 8003944:	617b      	str	r3, [r7, #20]
        break;
 8003946:	e00d      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	481c      	ldr	r0, [pc, #112]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800394c:	f7fc fbd8 	bl	8000100 <__udivsi3>
 8003950:	0003      	movs	r3, r0
 8003952:	0019      	movs	r1, r3
 8003954:	4b18      	ldr	r3, [pc, #96]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	227f      	movs	r2, #127	@ 0x7f
 800395c:	4013      	ands	r3, r2
 800395e:	434b      	muls	r3, r1
 8003960:	617b      	str	r3, [r7, #20]
        break;
 8003962:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003964:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0f5b      	lsrs	r3, r3, #29
 800396a:	2207      	movs	r2, #7
 800396c:	4013      	ands	r3, r2
 800396e:	3301      	adds	r3, #1
 8003970:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7fc fbc3 	bl	8000100 <__udivsi3>
 800397a:	0003      	movs	r3, r0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e015      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003980:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2238      	movs	r2, #56	@ 0x38
 8003986:	4013      	ands	r3, r2
 8003988:	2b20      	cmp	r3, #32
 800398a:	d103      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e00b      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003994:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2238      	movs	r2, #56	@ 0x38
 800399a:	4013      	ands	r3, r2
 800399c:	2b18      	cmp	r3, #24
 800399e:	d103      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039a0:	23fa      	movs	r3, #250	@ 0xfa
 80039a2:	01db      	lsls	r3, r3, #7
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e001      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039ac:	693b      	ldr	r3, [r7, #16]
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b006      	add	sp, #24
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	40021000 	.word	0x40021000
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200

080039c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b02      	ldr	r3, [pc, #8]	@ (80039d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	20000000 	.word	0x20000000

080039d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d8:	b5b0      	push	{r4, r5, r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039dc:	f7ff fff2 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e0:	0004      	movs	r4, r0
 80039e2:	f7ff fb49 	bl	8003078 <LL_RCC_GetAPB1Prescaler>
 80039e6:	0003      	movs	r3, r0
 80039e8:	0b1a      	lsrs	r2, r3, #12
 80039ea:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ec:	0092      	lsls	r2, r2, #2
 80039ee:	58d3      	ldr	r3, [r2, r3]
 80039f0:	221f      	movs	r2, #31
 80039f2:	4013      	ands	r3, r2
 80039f4:	40dc      	lsrs	r4, r3
 80039f6:	0023      	movs	r3, r4
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bdb0      	pop	{r4, r5, r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	08005770 	.word	0x08005770

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a0c:	2313      	movs	r3, #19
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a14:	2312      	movs	r3, #18
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	2380      	movs	r3, #128	@ 0x80
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	4013      	ands	r3, r2
 8003a26:	d100      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a28:	e0a3      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2a:	2011      	movs	r0, #17
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	055b      	lsls	r3, r3, #21
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d110      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a42:	4b7b      	ldr	r3, [pc, #492]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	0549      	lsls	r1, r1, #21
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a4c:	4b78      	ldr	r3, [pc, #480]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	055b      	lsls	r3, r3, #21
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	183b      	adds	r3, r7, r0
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a60:	4b74      	ldr	r3, [pc, #464]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a66:	2180      	movs	r1, #128	@ 0x80
 8003a68:	0049      	lsls	r1, r1, #1
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe fa0f 	bl	8001e90 <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a76:	e00b      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fe fa0a 	bl	8001e90 <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d904      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a86:	2313      	movs	r3, #19
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	701a      	strb	r2, [r3, #0]
        break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a90:	4b68      	ldr	r3, [pc, #416]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d0ed      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a9c:	2313      	movs	r3, #19
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d154      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aa6:	4b62      	ldr	r3, [pc, #392]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003aaa:	23c0      	movs	r3, #192	@ 0xc0
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d019      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d014      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003acc:	4b58      	ldr	r3, [pc, #352]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ad0:	4b57      	ldr	r3, [pc, #348]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ad2:	2180      	movs	r1, #128	@ 0x80
 8003ad4:	0249      	lsls	r1, r1, #9
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ada:	4b55      	ldr	r3, [pc, #340]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ade:	4b54      	ldr	r3, [pc, #336]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ae0:	4956      	ldr	r1, [pc, #344]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae6:	4b52      	ldr	r3, [pc, #328]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2201      	movs	r2, #1
 8003af0:	4013      	ands	r3, r2
 8003af2:	d016      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe f9cc 	bl	8001e90 <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	e00c      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe f9c7 	bl	8001e90 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	4a4d      	ldr	r2, [pc, #308]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d904      	bls.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b0e:	2313      	movs	r3, #19
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2203      	movs	r2, #3
 8003b14:	701a      	strb	r2, [r3, #0]
            break;
 8003b16:	e004      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d0ed      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b22:	2313      	movs	r3, #19
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2c:	4b40      	ldr	r3, [pc, #256]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	4a41      	ldr	r2, [pc, #260]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b40:	e00c      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b42:	2312      	movs	r3, #18
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	2213      	movs	r2, #19
 8003b48:	18ba      	adds	r2, r7, r2
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e005      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	2312      	movs	r3, #18
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2213      	movs	r2, #19
 8003b56:	18ba      	adds	r2, r7, r2
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b5c:	2311      	movs	r3, #17
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b6a:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b6c:	4935      	ldr	r1, [pc, #212]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b6e:	400a      	ands	r2, r1
 8003b70:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b80:	2203      	movs	r2, #3
 8003b82:	4393      	bics	r3, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2220      	movs	r2, #32
 8003b96:	4013      	ands	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9a:	4b25      	ldr	r3, [pc, #148]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	4b21      	ldr	r3, [pc, #132]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003baa:	430a      	orrs	r2, r1
 8003bac:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	01db      	lsls	r3, r3, #7
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bba:	4b1d      	ldr	r3, [pc, #116]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	0899      	lsrs	r1, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	05db      	lsls	r3, r3, #23
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bd8:	4b15      	ldr	r3, [pc, #84]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bde:	2180      	movs	r1, #128	@ 0x80
 8003be0:	0249      	lsls	r1, r1, #9
 8003be2:	430a      	orrs	r2, r1
 8003be4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d016      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	4a15      	ldr	r2, [pc, #84]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c02:	430a      	orrs	r2, r1
 8003c04:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	01db      	lsls	r3, r3, #7
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d106      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c18:	2180      	movs	r1, #128	@ 0x80
 8003c1a:	0249      	lsls	r1, r1, #9
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c20:	2312      	movs	r3, #18
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	781b      	ldrb	r3, [r3, #0]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b006      	add	sp, #24
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40007000 	.word	0x40007000
 8003c38:	fffffcff 	.word	0xfffffcff
 8003c3c:	fffeffff 	.word	0xfffeffff
 8003c40:	00001388 	.word	0x00001388
 8003c44:	efffffff 	.word	0xefffffff
 8003c48:	ffffcfff 	.word	0xffffcfff
 8003c4c:	ffff3fff 	.word	0xffff3fff

08003c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0a8      	b.n	8003db4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	2382      	movs	r3, #130	@ 0x82
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d009      	beq.n	8003c8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61da      	str	r2, [r3, #28]
 8003c7c:	e005      	b.n	8003c8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	225d      	movs	r2, #93	@ 0x5d
 8003c94:	5c9b      	ldrb	r3, [r3, r2]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	225c      	movs	r2, #92	@ 0x5c
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fd ff00 	bl	8001aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	225d      	movs	r2, #93	@ 0x5d
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2140      	movs	r1, #64	@ 0x40
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	23e0      	movs	r3, #224	@ 0xe0
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d902      	bls.n	8003cd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e002      	b.n	8003cdc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	015b      	lsls	r3, r3, #5
 8003cda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	23f0      	movs	r3, #240	@ 0xf0
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d008      	beq.n	8003cfa <HAL_SPI_Init+0xaa>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	23e0      	movs	r3, #224	@ 0xe0
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	2382      	movs	r3, #130	@ 0x82
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	401a      	ands	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	2384      	movs	r3, #132	@ 0x84
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	400b      	ands	r3, r1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2102      	movs	r1, #2
 8003d16:	400b      	ands	r3, r1
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	400b      	ands	r3, r1
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6999      	ldr	r1, [r3, #24]
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	400b      	ands	r3, r1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2138      	movs	r1, #56	@ 0x38
 8003d36:	400b      	ands	r3, r1
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	400b      	ands	r3, r1
 8003d42:	431a      	orrs	r2, r3
 8003d44:	0011      	movs	r1, r2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	401a      	ands	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	2204      	movs	r2, #4
 8003d60:	401a      	ands	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	2110      	movs	r1, #16
 8003d68:	400b      	ands	r3, r1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d70:	2108      	movs	r1, #8
 8003d72:	400b      	ands	r3, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	23f0      	movs	r3, #240	@ 0xf0
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	400b      	ands	r3, r1
 8003d80:	431a      	orrs	r2, r3
 8003d82:	0011      	movs	r1, r2
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	015b      	lsls	r3, r3, #5
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4907      	ldr	r1, [pc, #28]	@ (8003dbc <HAL_SPI_Init+0x16c>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	225d      	movs	r2, #93	@ 0x5d
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	fffff7ff 	.word	0xfffff7ff

08003dc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	1dbb      	adds	r3, r7, #6
 8003dce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd0:	231f      	movs	r3, #31
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	225c      	movs	r2, #92	@ 0x5c
 8003ddc:	5c9b      	ldrb	r3, [r3, r2]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_Transmit+0x26>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e147      	b.n	8004076 <HAL_SPI_Transmit+0x2b6>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	225c      	movs	r2, #92	@ 0x5c
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dee:	f7fe f84f 	bl	8001e90 <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003df6:	2316      	movs	r3, #22
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	1dba      	adds	r2, r7, #6
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	225d      	movs	r2, #93	@ 0x5d
 8003e04:	5c9b      	ldrb	r3, [r3, r2]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d004      	beq.n	8003e16 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e0c:	231f      	movs	r3, #31
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2202      	movs	r2, #2
 8003e12:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e14:	e128      	b.n	8004068 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_SPI_Transmit+0x64>
 8003e1c:	1dbb      	adds	r3, r7, #6
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003e24:	231f      	movs	r3, #31
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e2c:	e11c      	b.n	8004068 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	225d      	movs	r2, #93	@ 0x5d
 8003e32:	2103      	movs	r1, #3
 8003e34:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1dba      	adds	r2, r7, #6
 8003e46:	8812      	ldrh	r2, [r2, #0]
 8003e48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1dba      	adds	r2, r7, #6
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2244      	movs	r2, #68	@ 0x44
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2246      	movs	r2, #70	@ 0x46
 8003e64:	2100      	movs	r1, #0
 8003e66:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d110      	bne.n	8003ea2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2140      	movs	r1, #64	@ 0x40
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2180      	movs	r1, #128	@ 0x80
 8003e9c:	01c9      	lsls	r1, r1, #7
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2240      	movs	r2, #64	@ 0x40
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	@ 0x40
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	23e0      	movs	r3, #224	@ 0xe0
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d952      	bls.n	8003f72 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_SPI_Transmit+0x11e>
 8003ed4:	2316      	movs	r3, #22
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d143      	bne.n	8003f66 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f02:	e030      	b.n	8003f66 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d112      	bne.n	8003f38 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f36:	e016      	b.n	8003f66 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f38:	f7fd ffaa 	bl	8001e90 <HAL_GetTick>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d802      	bhi.n	8003f4e <HAL_SPI_Transmit+0x18e>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Transmit+0x194>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003f54:	231f      	movs	r3, #31
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2203      	movs	r2, #3
 8003f5a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	225d      	movs	r2, #93	@ 0x5d
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f64:	e080      	b.n	8004068 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1c9      	bne.n	8003f04 <HAL_SPI_Transmit+0x144>
 8003f70:	e053      	b.n	800401a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_SPI_Transmit+0x1c4>
 8003f7a:	2316      	movs	r3, #22
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d145      	bne.n	8004010 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003faa:	e031      	b.n	8004010 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d113      	bne.n	8003fe2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fe0:	e016      	b.n	8004010 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe2:	f7fd ff55 	bl	8001e90 <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d802      	bhi.n	8003ff8 <HAL_SPI_Transmit+0x238>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HAL_SPI_Transmit+0x23e>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003ffe:	231f      	movs	r3, #31
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	2203      	movs	r2, #3
 8004004:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	225d      	movs	r2, #93	@ 0x5d
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]
          goto error;
 800400e:	e02b      	b.n	8004068 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1c8      	bne.n	8003fac <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 fcfb 	bl	8004a1c <SPI_EndRxTxTransaction>
 8004026:	1e03      	subs	r3, r0, #0
 8004028:	d002      	beq.n	8004030 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004056:	231f      	movs	r3, #31
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e003      	b.n	8004068 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	225d      	movs	r2, #93	@ 0x5d
 8004064:	2101      	movs	r1, #1
 8004066:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	225c      	movs	r2, #92	@ 0x5c
 800406c:	2100      	movs	r1, #0
 800406e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004070:	231f      	movs	r3, #31
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	781b      	ldrb	r3, [r3, #0]
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b008      	add	sp, #32
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b089      	sub	sp, #36	@ 0x24
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	1dbb      	adds	r3, r7, #6
 800408e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004090:	2117      	movs	r1, #23
 8004092:	187b      	adds	r3, r7, r1
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	225d      	movs	r2, #93	@ 0x5d
 800409c:	5c9b      	ldrb	r3, [r3, r2]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d003      	beq.n	80040ac <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2202      	movs	r2, #2
 80040a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80040aa:	e12b      	b.n	8004304 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	2382      	movs	r3, #130	@ 0x82
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d113      	bne.n	80040e0 <HAL_SPI_Receive+0x60>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	225d      	movs	r2, #93	@ 0x5d
 80040c4:	2104      	movs	r1, #4
 80040c6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040c8:	1dbb      	adds	r3, r7, #6
 80040ca:	881c      	ldrh	r4, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	0023      	movs	r3, r4
 80040d8:	f000 f924 	bl	8004324 <HAL_SPI_TransmitReceive>
 80040dc:	0003      	movs	r3, r0
 80040de:	e118      	b.n	8004312 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	225c      	movs	r2, #92	@ 0x5c
 80040e4:	5c9b      	ldrb	r3, [r3, r2]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_SPI_Receive+0x6e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e111      	b.n	8004312 <HAL_SPI_Receive+0x292>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	225c      	movs	r2, #92	@ 0x5c
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f6:	f7fd fecb 	bl	8001e90 <HAL_GetTick>
 80040fa:	0003      	movs	r3, r0
 80040fc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_SPI_Receive+0x8c>
 8004104:	1dbb      	adds	r3, r7, #6
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800410c:	2317      	movs	r3, #23
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    goto error;
 8004114:	e0f6      	b.n	8004304 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	225d      	movs	r2, #93	@ 0x5d
 800411a:	2104      	movs	r1, #4
 800411c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1dba      	adds	r2, r7, #6
 800412e:	2144      	movs	r1, #68	@ 0x44
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1dba      	adds	r2, r7, #6
 8004138:	2146      	movs	r1, #70	@ 0x46
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	23e0      	movs	r3, #224	@ 0xe0
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	429a      	cmp	r2, r3
 8004166:	d908      	bls.n	800417a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	496a      	ldr	r1, [pc, #424]	@ (800431c <HAL_SPI_Receive+0x29c>)
 8004174:	400a      	ands	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	e008      	b.n	800418c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0149      	lsls	r1, r1, #5
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	429a      	cmp	r2, r3
 8004196:	d10f      	bne.n	80041b8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2140      	movs	r1, #64	@ 0x40
 80041a4:	438a      	bics	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	495b      	ldr	r1, [pc, #364]	@ (8004320 <HAL_SPI_Receive+0x2a0>)
 80041b4:	400a      	ands	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2240      	movs	r2, #64	@ 0x40
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d007      	beq.n	80041d6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2140      	movs	r1, #64	@ 0x40
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	23e0      	movs	r3, #224	@ 0xe0
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	429a      	cmp	r2, r3
 80041e0:	d900      	bls.n	80041e4 <HAL_SPI_Receive+0x164>
 80041e2:	e071      	b.n	80042c8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041e4:	e035      	b.n	8004252 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2201      	movs	r2, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d117      	bne.n	8004224 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	001a      	movs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2246      	movs	r2, #70	@ 0x46
 8004214:	5a9b      	ldrh	r3, [r3, r2]
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b299      	uxth	r1, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2246      	movs	r2, #70	@ 0x46
 8004220:	5299      	strh	r1, [r3, r2]
 8004222:	e016      	b.n	8004252 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004224:	f7fd fe34 	bl	8001e90 <HAL_GetTick>
 8004228:	0002      	movs	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d802      	bhi.n	800423a <HAL_SPI_Receive+0x1ba>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	d102      	bne.n	8004240 <HAL_SPI_Receive+0x1c0>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d108      	bne.n	8004252 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8004240:	2317      	movs	r3, #23
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2203      	movs	r2, #3
 8004246:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	225d      	movs	r2, #93	@ 0x5d
 800424c:	2101      	movs	r1, #1
 800424e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004250:	e058      	b.n	8004304 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2246      	movs	r2, #70	@ 0x46
 8004256:	5a9b      	ldrh	r3, [r3, r2]
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1c3      	bne.n	80041e6 <HAL_SPI_Receive+0x166>
 800425e:	e039      	b.n	80042d4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	2b01      	cmp	r3, #1
 800426c:	d115      	bne.n	800429a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	b292      	uxth	r2, r2
 800427a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2246      	movs	r2, #70	@ 0x46
 800428a:	5a9b      	ldrh	r3, [r3, r2]
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b299      	uxth	r1, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2246      	movs	r2, #70	@ 0x46
 8004296:	5299      	strh	r1, [r3, r2]
 8004298:	e016      	b.n	80042c8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800429a:	f7fd fdf9 	bl	8001e90 <HAL_GetTick>
 800429e:	0002      	movs	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d802      	bhi.n	80042b0 <HAL_SPI_Receive+0x230>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_SPI_Receive+0x236>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80042b6:	2317      	movs	r3, #23
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2203      	movs	r2, #3
 80042bc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	225d      	movs	r2, #93	@ 0x5d
 80042c2:	2101      	movs	r1, #1
 80042c4:	5499      	strb	r1, [r3, r2]
          goto error;
 80042c6:	e01d      	b.n	8004304 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2246      	movs	r2, #70	@ 0x46
 80042cc:	5a9b      	ldrh	r3, [r3, r2]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1c5      	bne.n	8004260 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 fb40 	bl	8004960 <SPI_EndRxTransaction>
 80042e0:	1e03      	subs	r3, r0, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80042f2:	2317      	movs	r3, #23
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e003      	b.n	8004304 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	225d      	movs	r2, #93	@ 0x5d
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	225c      	movs	r2, #92	@ 0x5c
 8004308:	2100      	movs	r1, #0
 800430a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800430c:	2317      	movs	r3, #23
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b007      	add	sp, #28
 8004318:	bd90      	pop	{r4, r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	ffffefff 	.word	0xffffefff
 8004320:	ffffbfff 	.word	0xffffbfff

08004324 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	@ 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	001a      	movs	r2, r3
 8004332:	1cbb      	adds	r3, r7, #2
 8004334:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004336:	2301      	movs	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800433a:	2323      	movs	r3, #35	@ 0x23
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	225c      	movs	r2, #92	@ 0x5c
 8004346:	5c9b      	ldrb	r3, [r3, r2]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x2c>
 800434c:	2302      	movs	r3, #2
 800434e:	e1c4      	b.n	80046da <HAL_SPI_TransmitReceive+0x3b6>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	225c      	movs	r2, #92	@ 0x5c
 8004354:	2101      	movs	r1, #1
 8004356:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004358:	f7fd fd9a 	bl	8001e90 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004360:	201b      	movs	r0, #27
 8004362:	183b      	adds	r3, r7, r0
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	215d      	movs	r1, #93	@ 0x5d
 8004368:	5c52      	ldrb	r2, [r2, r1]
 800436a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004372:	2312      	movs	r3, #18
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	1cba      	adds	r2, r7, #2
 8004378:	8812      	ldrh	r2, [r2, #0]
 800437a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800437c:	183b      	adds	r3, r7, r0
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d011      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x84>
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	2382      	movs	r3, #130	@ 0x82
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	429a      	cmp	r2, r3
 800438c:	d107      	bne.n	800439e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_SPI_TransmitReceive+0x7a>
 8004396:	183b      	adds	r3, r7, r0
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b04      	cmp	r3, #4
 800439c:	d004      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800439e:	2323      	movs	r3, #35	@ 0x23
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	2202      	movs	r2, #2
 80043a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80043a6:	e191      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x98>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x98>
 80043b4:	1cbb      	adds	r3, r7, #2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80043bc:	2323      	movs	r3, #35	@ 0x23
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80043c4:	e182      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	225d      	movs	r2, #93	@ 0x5d
 80043ca:	5c9b      	ldrb	r3, [r3, r2]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d003      	beq.n	80043da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	225d      	movs	r2, #93	@ 0x5d
 80043d6:	2105      	movs	r1, #5
 80043d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1cba      	adds	r2, r7, #2
 80043ea:	2146      	movs	r1, #70	@ 0x46
 80043ec:	8812      	ldrh	r2, [r2, #0]
 80043ee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1cba      	adds	r2, r7, #2
 80043f4:	2144      	movs	r1, #68	@ 0x44
 80043f6:	8812      	ldrh	r2, [r2, #0]
 80043f8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1cba      	adds	r2, r7, #2
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1cba      	adds	r2, r7, #2
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	23e0      	movs	r3, #224	@ 0xe0
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	429a      	cmp	r2, r3
 8004426:	d908      	bls.n	800443a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	49ac      	ldr	r1, [pc, #688]	@ (80046e4 <HAL_SPI_TransmitReceive+0x3c0>)
 8004434:	400a      	ands	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	e008      	b.n	800444c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2180      	movs	r1, #128	@ 0x80
 8004446:	0149      	lsls	r1, r1, #5
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	4013      	ands	r3, r2
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d007      	beq.n	800446a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2140      	movs	r1, #64	@ 0x40
 8004466:	430a      	orrs	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	23e0      	movs	r3, #224	@ 0xe0
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	429a      	cmp	r2, r3
 8004474:	d800      	bhi.n	8004478 <HAL_SPI_TransmitReceive+0x154>
 8004476:	e083      	b.n	8004580 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_SPI_TransmitReceive+0x168>
 8004480:	2312      	movs	r3, #18
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d000      	beq.n	800448c <HAL_SPI_TransmitReceive+0x168>
 800448a:	e06d      	b.n	8004568 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b0:	e05a      	b.n	8004568 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2202      	movs	r2, #2
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d11b      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x1d4>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x1d4>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d113      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2201      	movs	r2, #1
 8004500:	4013      	ands	r3, r2
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11c      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x21c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2246      	movs	r2, #70	@ 0x46
 800450a:	5a9b      	ldrh	r3, [r3, r2]
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	b292      	uxth	r2, r2
 800451e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2246      	movs	r2, #70	@ 0x46
 800452e:	5a9b      	ldrh	r3, [r3, r2]
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b299      	uxth	r1, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2246      	movs	r2, #70	@ 0x46
 800453a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004540:	f7fd fca6 	bl	8001e90 <HAL_GetTick>
 8004544:	0002      	movs	r2, r0
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454c:	429a      	cmp	r2, r3
 800454e:	d80b      	bhi.n	8004568 <HAL_SPI_TransmitReceive+0x244>
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	3301      	adds	r3, #1
 8004554:	d008      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8004556:	2323      	movs	r3, #35	@ 0x23
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	2203      	movs	r2, #3
 800455c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	225d      	movs	r2, #93	@ 0x5d
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]
        goto error;
 8004566:	e0b1      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d19f      	bne.n	80044b2 <HAL_SPI_TransmitReceive+0x18e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2246      	movs	r2, #70	@ 0x46
 8004576:	5a9b      	ldrh	r3, [r3, r2]
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d199      	bne.n	80044b2 <HAL_SPI_TransmitReceive+0x18e>
 800457e:	e089      	b.n	8004694 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x270>
 8004588:	2312      	movs	r3, #18
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d000      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x270>
 8004592:	e074      	b.n	800467e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ba:	e060      	b.n	800467e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2202      	movs	r2, #2
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d11c      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x2e0>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x2e0>
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d114      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2201      	movs	r2, #1
 800460c:	4013      	ands	r3, r2
 800460e:	2b01      	cmp	r3, #1
 8004610:	d11e      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x32c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2246      	movs	r2, #70	@ 0x46
 8004616:	5a9b      	ldrh	r3, [r3, r2]
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d018      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	001a      	movs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2246      	movs	r2, #70	@ 0x46
 800463e:	5a9b      	ldrh	r3, [r3, r2]
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b299      	uxth	r1, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2246      	movs	r2, #70	@ 0x46
 800464a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800464c:	2301      	movs	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004650:	f7fd fc1e 	bl	8001e90 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465c:	429a      	cmp	r2, r3
 800465e:	d802      	bhi.n	8004666 <HAL_SPI_TransmitReceive+0x342>
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	3301      	adds	r3, #1
 8004664:	d102      	bne.n	800466c <HAL_SPI_TransmitReceive+0x348>
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800466c:	2323      	movs	r3, #35	@ 0x23
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2203      	movs	r2, #3
 8004672:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	225d      	movs	r2, #93	@ 0x5d
 8004678:	2101      	movs	r1, #1
 800467a:	5499      	strb	r1, [r3, r2]
        goto error;
 800467c:	e026      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d199      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x298>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2246      	movs	r2, #70	@ 0x46
 800468c:	5a9b      	ldrh	r3, [r3, r2]
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d193      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 f9be 	bl	8004a1c <SPI_EndRxTxTransaction>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d006      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80046a4:	2323      	movs	r3, #35	@ 0x23
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d004      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80046ba:	2323      	movs	r3, #35	@ 0x23
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e003      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	225d      	movs	r2, #93	@ 0x5d
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	225c      	movs	r2, #92	@ 0x5c
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80046d4:	2323      	movs	r3, #35	@ 0x23
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b00a      	add	sp, #40	@ 0x28
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	ffffefff 	.word	0xffffefff

080046e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	225d      	movs	r2, #93	@ 0x5d
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	b2db      	uxtb	r3, r3
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	1dfb      	adds	r3, r7, #7
 800470e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004710:	f7fd fbbe 	bl	8001e90 <HAL_GetTick>
 8004714:	0002      	movs	r2, r0
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	18d3      	adds	r3, r2, r3
 800471e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004720:	f7fd fbb6 	bl	8001e90 <HAL_GetTick>
 8004724:	0003      	movs	r3, r0
 8004726:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004728:	4b3a      	ldr	r3, [pc, #232]	@ (8004814 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	015b      	lsls	r3, r3, #5
 800472e:	0d1b      	lsrs	r3, r3, #20
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	4353      	muls	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004736:	e058      	b.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	d055      	beq.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800473e:	f7fd fba7 	bl	8001e90 <HAL_GetTick>
 8004742:	0002      	movs	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	429a      	cmp	r2, r3
 800474c:	d902      	bls.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x54>
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d142      	bne.n	80047da <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	21e0      	movs	r1, #224	@ 0xe0
 8004760:	438a      	bics	r2, r1
 8004762:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	2382      	movs	r3, #130	@ 0x82
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	429a      	cmp	r2, r3
 800476e:	d113      	bne.n	8004798 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	429a      	cmp	r2, r3
 800477a:	d005      	beq.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2140      	movs	r1, #64	@ 0x40
 8004794:	438a      	bics	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d110      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	491a      	ldr	r1, [pc, #104]	@ (8004818 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2180      	movs	r1, #128	@ 0x80
 80047c0:	0189      	lsls	r1, r1, #6
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	225d      	movs	r2, #93	@ 0x5d
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	225c      	movs	r2, #92	@ 0x5c
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e017      	b.n	800480a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	425a      	negs	r2, r3
 80047fa:	4153      	adcs	r3, r2
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d197      	bne.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b008      	add	sp, #32
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	20000000 	.word	0x20000000
 8004818:	ffffdfff 	.word	0xffffdfff

0800481c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800482a:	2317      	movs	r3, #23
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004832:	f7fd fb2d 	bl	8001e90 <HAL_GetTick>
 8004836:	0002      	movs	r2, r0
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	18d3      	adds	r3, r2, r3
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004842:	f7fd fb25 	bl	8001e90 <HAL_GetTick>
 8004846:	0003      	movs	r3, r0
 8004848:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	0013      	movs	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	189b      	adds	r3, r3, r2
 800485c:	00da      	lsls	r2, r3, #3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	0d1b      	lsrs	r3, r3, #20
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	4353      	muls	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004868:	e068      	b.n	800493c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	23c0      	movs	r3, #192	@ 0xc0
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	429a      	cmp	r2, r3
 8004872:	d10a      	bne.n	800488a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	2117      	movs	r1, #23
 8004882:	187b      	adds	r3, r7, r1
 8004884:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004886:	187b      	adds	r3, r7, r1
 8004888:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	d055      	beq.n	800493c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004890:	f7fd fafe 	bl	8001e90 <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489c:	429a      	cmp	r2, r3
 800489e:	d902      	bls.n	80048a6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d142      	bne.n	800492c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	21e0      	movs	r1, #224	@ 0xe0
 80048b2:	438a      	bics	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	2382      	movs	r3, #130	@ 0x82
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	429a      	cmp	r2, r3
 80048c0:	d113      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0xce>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	2380      	movs	r3, #128	@ 0x80
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d005      	beq.n	80048da <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d107      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2140      	movs	r1, #64	@ 0x40
 80048e6:	438a      	bics	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d110      	bne.n	8004918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4916      	ldr	r1, [pc, #88]	@ (800495c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004902:	400a      	ands	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2180      	movs	r1, #128	@ 0x80
 8004912:	0189      	lsls	r1, r1, #6
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	225d      	movs	r2, #93	@ 0x5d
 800491c:	2101      	movs	r1, #1
 800491e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	225c      	movs	r2, #92	@ 0x5c
 8004924:	2100      	movs	r1, #0
 8004926:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e010      	b.n	800494e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3b01      	subs	r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d18e      	bne.n	800486a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b00a      	add	sp, #40	@ 0x28
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	20000000 	.word	0x20000000
 800495c:	ffffdfff 	.word	0xffffdfff

08004960 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	2382      	movs	r3, #130	@ 0x82
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	429a      	cmp	r2, r3
 8004976:	d113      	bne.n	80049a0 <SPI_EndRxTransaction+0x40>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	429a      	cmp	r2, r3
 8004982:	d005      	beq.n	8004990 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	429a      	cmp	r2, r3
 800498e:	d107      	bne.n	80049a0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2140      	movs	r1, #64	@ 0x40
 800499c:	438a      	bics	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	0013      	movs	r3, r2
 80049aa:	2200      	movs	r2, #0
 80049ac:	2180      	movs	r1, #128	@ 0x80
 80049ae:	f7ff fea7 	bl	8004700 <SPI_WaitFlagStateUntilTimeout>
 80049b2:	1e03      	subs	r3, r0, #0
 80049b4:	d007      	beq.n	80049c6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	2220      	movs	r2, #32
 80049bc:	431a      	orrs	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e026      	b.n	8004a14 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	2382      	movs	r3, #130	@ 0x82
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11f      	bne.n	8004a12 <SPI_EndRxTransaction+0xb2>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	429a      	cmp	r2, r3
 80049dc:	d005      	beq.n	80049ea <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	2380      	movs	r3, #128	@ 0x80
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d113      	bne.n	8004a12 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	23c0      	movs	r3, #192	@ 0xc0
 80049ee:	00d9      	lsls	r1, r3, #3
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	0013      	movs	r3, r2
 80049f8:	2200      	movs	r2, #0
 80049fa:	f7ff ff0f 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 80049fe:	1e03      	subs	r3, r0, #0
 8004a00:	d007      	beq.n	8004a12 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a06:	2220      	movs	r2, #32
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e000      	b.n	8004a14 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b004      	add	sp, #16
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	23c0      	movs	r3, #192	@ 0xc0
 8004a2c:	0159      	lsls	r1, r3, #5
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	0013      	movs	r3, r2
 8004a36:	2200      	movs	r2, #0
 8004a38:	f7ff fef0 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004a3c:	1e03      	subs	r3, r0, #0
 8004a3e:	d007      	beq.n	8004a50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a44:	2220      	movs	r2, #32
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e027      	b.n	8004aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	0013      	movs	r3, r2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2180      	movs	r1, #128	@ 0x80
 8004a5e:	f7ff fe4f 	bl	8004700 <SPI_WaitFlagStateUntilTimeout>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d007      	beq.n	8004a76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e014      	b.n	8004aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	23c0      	movs	r3, #192	@ 0xc0
 8004a7a:	00d9      	lsls	r1, r3, #3
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	0013      	movs	r3, r2
 8004a84:	2200      	movs	r2, #0
 8004a86:	f7ff fec9 	bl	800481c <SPI_WaitFifoStateUntilTimeout>
 8004a8a:	1e03      	subs	r3, r0, #0
 8004a8c:	d007      	beq.n	8004a9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a92:	2220      	movs	r2, #32
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e000      	b.n	8004aa0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b004      	add	sp, #16
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e046      	b.n	8004b48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2288      	movs	r2, #136	@ 0x88
 8004abe:	589b      	ldr	r3, [r3, r2]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2284      	movs	r2, #132	@ 0x84
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7fd f8d6 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2288      	movs	r2, #136	@ 0x88
 8004ad8:	2124      	movs	r1, #36	@ 0x24
 8004ada:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	438a      	bics	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 fa3a 	bl	8004f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 f8cc 	bl	8004c9c <UART_SetConfig>
 8004b04:	0003      	movs	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e01c      	b.n	8004b48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	490d      	ldr	r1, [pc, #52]	@ (8004b50 <HAL_UART_Init+0xa8>)
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	212a      	movs	r1, #42	@ 0x2a
 8004b2a:	438a      	bics	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 fac9 	bl	80050d8 <UART_CheckIdleState>
 8004b46:	0003      	movs	r3, r0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	ffffb7ff 	.word	0xffffb7ff

08004b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	@ 0x28
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	1dbb      	adds	r3, r7, #6
 8004b62:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2288      	movs	r2, #136	@ 0x88
 8004b68:	589b      	ldr	r3, [r3, r2]
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d000      	beq.n	8004b70 <HAL_UART_Transmit+0x1c>
 8004b6e:	e090      	b.n	8004c92 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_UART_Transmit+0x2a>
 8004b76:	1dbb      	adds	r3, r7, #6
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e088      	b.n	8004c94 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	015b      	lsls	r3, r3, #5
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d109      	bne.n	8004ba2 <HAL_UART_Transmit+0x4e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d001      	beq.n	8004ba2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e078      	b.n	8004c94 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2290      	movs	r2, #144	@ 0x90
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2288      	movs	r2, #136	@ 0x88
 8004bae:	2121      	movs	r1, #33	@ 0x21
 8004bb0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bb2:	f7fd f96d 	bl	8001e90 <HAL_GetTick>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1dba      	adds	r2, r7, #6
 8004bbe:	2154      	movs	r1, #84	@ 0x54
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1dba      	adds	r2, r7, #6
 8004bc8:	2156      	movs	r1, #86	@ 0x56
 8004bca:	8812      	ldrh	r2, [r2, #0]
 8004bcc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	015b      	lsls	r3, r3, #5
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d108      	bne.n	8004bec <HAL_UART_Transmit+0x98>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e003      	b.n	8004bf4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bf4:	e030      	b.n	8004c58 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	0013      	movs	r3, r2
 8004c00:	2200      	movs	r2, #0
 8004c02:	2180      	movs	r1, #128	@ 0x80
 8004c04:	f000 fb12 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004c08:	1e03      	subs	r3, r0, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2288      	movs	r2, #136	@ 0x88
 8004c10:	2120      	movs	r1, #32
 8004c12:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e03d      	b.n	8004c94 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	001a      	movs	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	05d2      	lsls	r2, r2, #23
 8004c2a:	0dd2      	lsrs	r2, r2, #23
 8004c2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	3302      	adds	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e007      	b.n	8004c46 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2256      	movs	r2, #86	@ 0x56
 8004c4a:	5a9b      	ldrh	r3, [r3, r2]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b299      	uxth	r1, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2256      	movs	r2, #86	@ 0x56
 8004c56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2256      	movs	r2, #86	@ 0x56
 8004c5c:	5a9b      	ldrh	r3, [r3, r2]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1c8      	bne.n	8004bf6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2140      	movs	r1, #64	@ 0x40
 8004c72:	f000 fadb 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2288      	movs	r2, #136	@ 0x88
 8004c7e:	2120      	movs	r1, #32
 8004c80:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e006      	b.n	8004c94 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2288      	movs	r2, #136	@ 0x88
 8004c8a:	2120      	movs	r1, #32
 8004c8c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
  }
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b008      	add	sp, #32
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca4:	231a      	movs	r3, #26
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4aa1      	ldr	r2, [pc, #644]	@ (8004f50 <UART_SetConfig+0x2b4>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a9c      	ldr	r2, [pc, #624]	@ (8004f54 <UART_SetConfig+0x2b8>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a93      	ldr	r2, [pc, #588]	@ (8004f58 <UART_SetConfig+0x2bc>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	220f      	movs	r2, #15
 8004d20:	4393      	bics	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a89      	ldr	r2, [pc, #548]	@ (8004f5c <UART_SetConfig+0x2c0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d127      	bne.n	8004d8a <UART_SetConfig+0xee>
 8004d3a:	4b89      	ldr	r3, [pc, #548]	@ (8004f60 <UART_SetConfig+0x2c4>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	2203      	movs	r2, #3
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d017      	beq.n	8004d76 <UART_SetConfig+0xda>
 8004d46:	d81b      	bhi.n	8004d80 <UART_SetConfig+0xe4>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d00a      	beq.n	8004d62 <UART_SetConfig+0xc6>
 8004d4c:	d818      	bhi.n	8004d80 <UART_SetConfig+0xe4>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0xbc>
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d00a      	beq.n	8004d6c <UART_SetConfig+0xd0>
 8004d56:	e013      	b.n	8004d80 <UART_SetConfig+0xe4>
 8004d58:	231b      	movs	r3, #27
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e021      	b.n	8004da6 <UART_SetConfig+0x10a>
 8004d62:	231b      	movs	r3, #27
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e01c      	b.n	8004da6 <UART_SetConfig+0x10a>
 8004d6c:	231b      	movs	r3, #27
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e017      	b.n	8004da6 <UART_SetConfig+0x10a>
 8004d76:	231b      	movs	r3, #27
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0x10a>
 8004d80:	231b      	movs	r3, #27
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2210      	movs	r2, #16
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0x10a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a75      	ldr	r2, [pc, #468]	@ (8004f64 <UART_SetConfig+0x2c8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d104      	bne.n	8004d9e <UART_SetConfig+0x102>
 8004d94:	231b      	movs	r3, #27
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e003      	b.n	8004da6 <UART_SetConfig+0x10a>
 8004d9e:	231b      	movs	r3, #27
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2210      	movs	r2, #16
 8004da4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d000      	beq.n	8004db4 <UART_SetConfig+0x118>
 8004db2:	e065      	b.n	8004e80 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004db4:	231b      	movs	r3, #27
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d015      	beq.n	8004dea <UART_SetConfig+0x14e>
 8004dbe:	dc18      	bgt.n	8004df2 <UART_SetConfig+0x156>
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d00d      	beq.n	8004de0 <UART_SetConfig+0x144>
 8004dc4:	dc15      	bgt.n	8004df2 <UART_SetConfig+0x156>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <UART_SetConfig+0x134>
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d005      	beq.n	8004dda <UART_SetConfig+0x13e>
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7fe fe02 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	617b      	str	r3, [r7, #20]
        break;
 8004dd8:	e012      	b.n	8004e00 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dda:	4b63      	ldr	r3, [pc, #396]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004ddc:	617b      	str	r3, [r7, #20]
        break;
 8004dde:	e00f      	b.n	8004e00 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de0:	f7fe fd6e 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8004de4:	0003      	movs	r3, r0
 8004de6:	617b      	str	r3, [r7, #20]
        break;
 8004de8:	e00a      	b.n	8004e00 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	617b      	str	r3, [r7, #20]
        break;
 8004df0:	e006      	b.n	8004e00 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004df6:	231a      	movs	r3, #26
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
        break;
 8004dfe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d100      	bne.n	8004e08 <UART_SetConfig+0x16c>
 8004e06:	e08d      	b.n	8004f24 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e0c:	4b57      	ldr	r3, [pc, #348]	@ (8004f6c <UART_SetConfig+0x2d0>)
 8004e0e:	0052      	lsls	r2, r2, #1
 8004e10:	5ad3      	ldrh	r3, [r2, r3]
 8004e12:	0019      	movs	r1, r3
 8004e14:	6978      	ldr	r0, [r7, #20]
 8004e16:	f7fb f973 	bl	8000100 <__udivsi3>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	005a      	lsls	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	18d2      	adds	r2, r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	0010      	movs	r0, r2
 8004e2e:	f7fb f967 	bl	8000100 <__udivsi3>
 8004e32:	0003      	movs	r3, r0
 8004e34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d91c      	bls.n	8004e76 <UART_SetConfig+0x1da>
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d217      	bcs.n	8004e76 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	200e      	movs	r0, #14
 8004e4c:	183b      	adds	r3, r7, r0
 8004e4e:	210f      	movs	r1, #15
 8004e50:	438a      	bics	r2, r1
 8004e52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2207      	movs	r2, #7
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b299      	uxth	r1, r3
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	183a      	adds	r2, r7, r0
 8004e64:	8812      	ldrh	r2, [r2, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	183a      	adds	r2, r7, r0
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e056      	b.n	8004f24 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004e76:	231a      	movs	r3, #26
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e051      	b.n	8004f24 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e80:	231b      	movs	r3, #27
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d015      	beq.n	8004eb6 <UART_SetConfig+0x21a>
 8004e8a:	dc18      	bgt.n	8004ebe <UART_SetConfig+0x222>
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d00d      	beq.n	8004eac <UART_SetConfig+0x210>
 8004e90:	dc15      	bgt.n	8004ebe <UART_SetConfig+0x222>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <UART_SetConfig+0x200>
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d005      	beq.n	8004ea6 <UART_SetConfig+0x20a>
 8004e9a:	e010      	b.n	8004ebe <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe fd9c 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	617b      	str	r3, [r7, #20]
        break;
 8004ea4:	e012      	b.n	8004ecc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea6:	4b30      	ldr	r3, [pc, #192]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004ea8:	617b      	str	r3, [r7, #20]
        break;
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eac:	f7fe fd08 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	617b      	str	r3, [r7, #20]
        break;
 8004eb4:	e00a      	b.n	8004ecc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	617b      	str	r3, [r7, #20]
        break;
 8004ebc:	e006      	b.n	8004ecc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ec2:	231a      	movs	r3, #26
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
        break;
 8004eca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d028      	beq.n	8004f24 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ed6:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <UART_SetConfig+0x2d0>)
 8004ed8:	0052      	lsls	r2, r2, #1
 8004eda:	5ad3      	ldrh	r3, [r2, r3]
 8004edc:	0019      	movs	r1, r3
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	f7fb f90e 	bl	8000100 <__udivsi3>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	001a      	movs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	18d2      	adds	r2, r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	0010      	movs	r0, r2
 8004ef8:	f7fb f902 	bl	8000100 <__udivsi3>
 8004efc:	0003      	movs	r3, r0
 8004efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d90a      	bls.n	8004f1c <UART_SetConfig+0x280>
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	025b      	lsls	r3, r3, #9
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d205      	bcs.n	8004f1c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e003      	b.n	8004f24 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	231a      	movs	r3, #26
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	226a      	movs	r2, #106	@ 0x6a
 8004f28:	2101      	movs	r1, #1
 8004f2a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2268      	movs	r2, #104	@ 0x68
 8004f30:	2101      	movs	r1, #1
 8004f32:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f40:	231a      	movs	r3, #26
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	781b      	ldrb	r3, [r3, #0]
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b008      	add	sp, #32
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	cfff69f3 	.word	0xcfff69f3
 8004f54:	ffffcfff 	.word	0xffffcfff
 8004f58:	11fff4ff 	.word	0x11fff4ff
 8004f5c:	40013800 	.word	0x40013800
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40004400 	.word	0x40004400
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	08005790 	.word	0x08005790

08004f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a4a      	ldr	r2, [pc, #296]	@ (80050b4 <UART_AdvFeatureConfig+0x144>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4a43      	ldr	r2, [pc, #268]	@ (80050b8 <UART_AdvFeatureConfig+0x148>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a3b      	ldr	r2, [pc, #236]	@ (80050bc <UART_AdvFeatureConfig+0x14c>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4a34      	ldr	r2, [pc, #208]	@ (80050c0 <UART_AdvFeatureConfig+0x150>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	0019      	movs	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005004:	2210      	movs	r2, #16
 8005006:	4013      	ands	r3, r2
 8005008:	d00b      	beq.n	8005022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a2c      	ldr	r2, [pc, #176]	@ (80050c4 <UART_AdvFeatureConfig+0x154>)
 8005012:	4013      	ands	r3, r2
 8005014:	0019      	movs	r1, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	2220      	movs	r2, #32
 8005028:	4013      	ands	r3, r2
 800502a:	d00b      	beq.n	8005044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	4a25      	ldr	r2, [pc, #148]	@ (80050c8 <UART_AdvFeatureConfig+0x158>)
 8005034:	4013      	ands	r3, r2
 8005036:	0019      	movs	r1, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	2240      	movs	r2, #64	@ 0x40
 800504a:	4013      	ands	r3, r2
 800504c:	d01d      	beq.n	800508a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <UART_AdvFeatureConfig+0x15c>)
 8005056:	4013      	ands	r3, r2
 8005058:	0019      	movs	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	035b      	lsls	r3, r3, #13
 800506e:	429a      	cmp	r2, r3
 8005070:	d10b      	bne.n	800508a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <UART_AdvFeatureConfig+0x160>)
 800507a:	4013      	ands	r3, r2
 800507c:	0019      	movs	r1, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	2280      	movs	r2, #128	@ 0x80
 8005090:	4013      	ands	r3, r2
 8005092:	d00b      	beq.n	80050ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4a0e      	ldr	r2, [pc, #56]	@ (80050d4 <UART_AdvFeatureConfig+0x164>)
 800509c:	4013      	ands	r3, r2
 800509e:	0019      	movs	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }
}
 80050ac:	46c0      	nop			@ (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	ffff7fff 	.word	0xffff7fff
 80050b8:	fffdffff 	.word	0xfffdffff
 80050bc:	fffeffff 	.word	0xfffeffff
 80050c0:	fffbffff 	.word	0xfffbffff
 80050c4:	ffffefff 	.word	0xffffefff
 80050c8:	ffffdfff 	.word	0xffffdfff
 80050cc:	ffefffff 	.word	0xffefffff
 80050d0:	ff9fffff 	.word	0xff9fffff
 80050d4:	fff7ffff 	.word	0xfff7ffff

080050d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b092      	sub	sp, #72	@ 0x48
 80050dc:	af02      	add	r7, sp, #8
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2290      	movs	r2, #144	@ 0x90
 80050e4:	2100      	movs	r1, #0
 80050e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050e8:	f7fc fed2 	bl	8001e90 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2208      	movs	r2, #8
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d12d      	bne.n	800515a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005100:	2280      	movs	r2, #128	@ 0x80
 8005102:	0391      	lsls	r1, r2, #14
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	4a47      	ldr	r2, [pc, #284]	@ (8005224 <UART_CheckIdleState+0x14c>)
 8005108:	9200      	str	r2, [sp, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	f000 f88e 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005110:	1e03      	subs	r3, r0, #0
 8005112:	d022      	beq.n	800515a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800511c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800511e:	2301      	movs	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2180      	movs	r1, #128	@ 0x80
 8005136:	438a      	bics	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2288      	movs	r2, #136	@ 0x88
 800514a:	2120      	movs	r1, #32
 800514c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2284      	movs	r2, #132	@ 0x84
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e060      	b.n	800521c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2204      	movs	r2, #4
 8005162:	4013      	ands	r3, r2
 8005164:	2b04      	cmp	r3, #4
 8005166:	d146      	bne.n	80051f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800516a:	2280      	movs	r2, #128	@ 0x80
 800516c:	03d1      	lsls	r1, r2, #15
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4a2c      	ldr	r2, [pc, #176]	@ (8005224 <UART_CheckIdleState+0x14c>)
 8005172:	9200      	str	r2, [sp, #0]
 8005174:	2200      	movs	r2, #0
 8005176:	f000 f859 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d03b      	beq.n	80051f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517e:	f3ef 8310 	mrs	r3, PRIMASK
 8005182:	60fb      	str	r3, [r7, #12]
  return(result);
 8005184:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
 8005188:	2301      	movs	r3, #1
 800518a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f383 8810 	msr	PRIMASK, r3
}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4922      	ldr	r1, [pc, #136]	@ (8005228 <UART_CheckIdleState+0x150>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b0:	f3ef 8310 	mrs	r3, PRIMASK
 80051b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80051b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ba:	2301      	movs	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	438a      	bics	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	228c      	movs	r2, #140	@ 0x8c
 80051e6:	2120      	movs	r1, #32
 80051e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2284      	movs	r2, #132	@ 0x84
 80051ee:	2100      	movs	r1, #0
 80051f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e012      	b.n	800521c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2288      	movs	r2, #136	@ 0x88
 80051fa:	2120      	movs	r1, #32
 80051fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	228c      	movs	r2, #140	@ 0x8c
 8005202:	2120      	movs	r1, #32
 8005204:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2284      	movs	r2, #132	@ 0x84
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b010      	add	sp, #64	@ 0x40
 8005222:	bd80      	pop	{r7, pc}
 8005224:	01ffffff 	.word	0x01ffffff
 8005228:	fffffedf 	.word	0xfffffedf

0800522c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	1dfb      	adds	r3, r7, #7
 800523a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523c:	e051      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3301      	adds	r3, #1
 8005242:	d04e      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005244:	f7fc fe24 	bl	8001e90 <HAL_GetTick>
 8005248:	0002      	movs	r2, r0
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e051      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2204      	movs	r2, #4
 8005266:	4013      	ands	r3, r2
 8005268:	d03b      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b80      	cmp	r3, #128	@ 0x80
 800526e:	d038      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d035      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2208      	movs	r2, #8
 800527e:	4013      	ands	r3, r2
 8005280:	2b08      	cmp	r3, #8
 8005282:	d111      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2208      	movs	r2, #8
 800528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	0018      	movs	r0, r3
 8005290:	f000 f83c 	bl	800530c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2290      	movs	r2, #144	@ 0x90
 8005298:	2108      	movs	r1, #8
 800529a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2284      	movs	r2, #132	@ 0x84
 80052a0:	2100      	movs	r1, #0
 80052a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e02c      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	401a      	ands	r2, r3
 80052b4:	2380      	movs	r3, #128	@ 0x80
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d112      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2280      	movs	r2, #128	@ 0x80
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 f81f 	bl	800530c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2290      	movs	r2, #144	@ 0x90
 80052d2:	2120      	movs	r1, #32
 80052d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2284      	movs	r2, #132	@ 0x84
 80052da:	2100      	movs	r1, #0
 80052dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	425a      	negs	r2, r3
 80052f2:	4153      	adcs	r3, r2
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	001a      	movs	r2, r3
 80052f8:	1dfb      	adds	r3, r7, #7
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d09e      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	@ 0x38
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005314:	f3ef 8310 	mrs	r3, PRIMASK
 8005318:	617b      	str	r3, [r7, #20]
  return(result);
 800531a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
 800531e:	2301      	movs	r3, #1
 8005320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4926      	ldr	r1, [pc, #152]	@ (80053d0 <UART_EndRxTransfer+0xc4>)
 8005336:	400a      	ands	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f383 8810 	msr	PRIMASK, r3
}
 8005344:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005346:	f3ef 8310 	mrs	r3, PRIMASK
 800534a:	623b      	str	r3, [r7, #32]
  return(result);
 800534c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800534e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005350:	2301      	movs	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	f383 8810 	msr	PRIMASK, r3
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	491b      	ldr	r1, [pc, #108]	@ (80053d4 <UART_EndRxTransfer+0xc8>)
 8005368:	400a      	ands	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	f383 8810 	msr	PRIMASK, r3
}
 8005376:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d118      	bne.n	80053b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	60bb      	str	r3, [r7, #8]
  return(result);
 8005386:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538a:	2301      	movs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			@ (mov r8, r8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2110      	movs	r1, #16
 80053a2:	438a      	bics	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f383 8810 	msr	PRIMASK, r3
}
 80053b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	228c      	movs	r2, #140	@ 0x8c
 80053b6:	2120      	movs	r1, #32
 80053b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b00e      	add	sp, #56	@ 0x38
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	fffffedf 	.word	0xfffffedf
 80053d4:	effffffe 	.word	0xeffffffe

080053d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2284      	movs	r2, #132	@ 0x84
 80053e4:	5c9b      	ldrb	r3, [r3, r2]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_UARTEx_DisableFifoMode+0x16>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e027      	b.n	800543e <HAL_UARTEx_DisableFifoMode+0x66>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2284      	movs	r2, #132	@ 0x84
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2288      	movs	r2, #136	@ 0x88
 80053fa:	2124      	movs	r1, #36	@ 0x24
 80053fc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2101      	movs	r1, #1
 8005412:	438a      	bics	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a0b      	ldr	r2, [pc, #44]	@ (8005448 <HAL_UARTEx_DisableFifoMode+0x70>)
 800541a:	4013      	ands	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2288      	movs	r2, #136	@ 0x88
 8005430:	2120      	movs	r1, #32
 8005432:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2284      	movs	r2, #132	@ 0x84
 8005438:	2100      	movs	r1, #0
 800543a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b004      	add	sp, #16
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	dfffffff 	.word	0xdfffffff

0800544c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2284      	movs	r2, #132	@ 0x84
 800545a:	5c9b      	ldrb	r3, [r3, r2]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e02e      	b.n	80054c2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2284      	movs	r2, #132	@ 0x84
 8005468:	2101      	movs	r1, #1
 800546a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2288      	movs	r2, #136	@ 0x88
 8005470:	2124      	movs	r1, #36	@ 0x24
 8005472:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2101      	movs	r1, #1
 8005488:	438a      	bics	r2, r1
 800548a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	08d9      	lsrs	r1, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 f854 	bl	8005550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2288      	movs	r2, #136	@ 0x88
 80054b4:	2120      	movs	r1, #32
 80054b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2284      	movs	r2, #132	@ 0x84
 80054bc:	2100      	movs	r1, #0
 80054be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	0018      	movs	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b004      	add	sp, #16
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2284      	movs	r2, #132	@ 0x84
 80054da:	5c9b      	ldrb	r3, [r3, r2]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e02f      	b.n	8005544 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2284      	movs	r2, #132	@ 0x84
 80054e8:	2101      	movs	r1, #1
 80054ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2288      	movs	r2, #136	@ 0x88
 80054f0:	2124      	movs	r1, #36	@ 0x24
 80054f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2101      	movs	r1, #1
 8005508:	438a      	bics	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4a0e      	ldr	r2, [pc, #56]	@ (800554c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005514:	4013      	ands	r3, r2
 8005516:	0019      	movs	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f000 f813 	bl	8005550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2288      	movs	r2, #136	@ 0x88
 8005536:	2120      	movs	r1, #32
 8005538:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2284      	movs	r2, #132	@ 0x84
 800553e:	2100      	movs	r1, #0
 8005540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b004      	add	sp, #16
 800554a:	bd80      	pop	{r7, pc}
 800554c:	f1ffffff 	.word	0xf1ffffff

08005550 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800555c:	2b00      	cmp	r3, #0
 800555e:	d108      	bne.n	8005572 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	226a      	movs	r2, #106	@ 0x6a
 8005564:	2101      	movs	r1, #1
 8005566:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2268      	movs	r2, #104	@ 0x68
 800556c:	2101      	movs	r1, #1
 800556e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005570:	e043      	b.n	80055fa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005572:	260f      	movs	r6, #15
 8005574:	19bb      	adds	r3, r7, r6
 8005576:	2208      	movs	r2, #8
 8005578:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800557a:	200e      	movs	r0, #14
 800557c:	183b      	adds	r3, r7, r0
 800557e:	2208      	movs	r2, #8
 8005580:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	0e5b      	lsrs	r3, r3, #25
 800558a:	b2da      	uxtb	r2, r3
 800558c:	240d      	movs	r4, #13
 800558e:	193b      	adds	r3, r7, r4
 8005590:	2107      	movs	r1, #7
 8005592:	400a      	ands	r2, r1
 8005594:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	0f5b      	lsrs	r3, r3, #29
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	250c      	movs	r5, #12
 80055a2:	197b      	adds	r3, r7, r5
 80055a4:	2107      	movs	r1, #7
 80055a6:	400a      	ands	r2, r1
 80055a8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055aa:	183b      	adds	r3, r7, r0
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	197a      	adds	r2, r7, r5
 80055b0:	7812      	ldrb	r2, [r2, #0]
 80055b2:	4914      	ldr	r1, [pc, #80]	@ (8005604 <UARTEx_SetNbDataToProcess+0xb4>)
 80055b4:	5c8a      	ldrb	r2, [r1, r2]
 80055b6:	435a      	muls	r2, r3
 80055b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80055ba:	197b      	adds	r3, r7, r5
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	4a12      	ldr	r2, [pc, #72]	@ (8005608 <UARTEx_SetNbDataToProcess+0xb8>)
 80055c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c2:	0019      	movs	r1, r3
 80055c4:	f7fa fe26 	bl	8000214 <__divsi3>
 80055c8:	0003      	movs	r3, r0
 80055ca:	b299      	uxth	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	226a      	movs	r2, #106	@ 0x6a
 80055d0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d2:	19bb      	adds	r3, r7, r6
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	193a      	adds	r2, r7, r4
 80055d8:	7812      	ldrb	r2, [r2, #0]
 80055da:	490a      	ldr	r1, [pc, #40]	@ (8005604 <UARTEx_SetNbDataToProcess+0xb4>)
 80055dc:	5c8a      	ldrb	r2, [r1, r2]
 80055de:	435a      	muls	r2, r3
 80055e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80055e2:	193b      	adds	r3, r7, r4
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	4a08      	ldr	r2, [pc, #32]	@ (8005608 <UARTEx_SetNbDataToProcess+0xb8>)
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055ea:	0019      	movs	r1, r3
 80055ec:	f7fa fe12 	bl	8000214 <__divsi3>
 80055f0:	0003      	movs	r3, r0
 80055f2:	b299      	uxth	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2268      	movs	r2, #104	@ 0x68
 80055f8:	5299      	strh	r1, [r3, r2]
}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b005      	add	sp, #20
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	080057a8 	.word	0x080057a8
 8005608:	080057b0 	.word	0x080057b0

0800560c <memset>:
 800560c:	0003      	movs	r3, r0
 800560e:	1882      	adds	r2, r0, r2
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	7019      	strb	r1, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	2600      	movs	r6, #0
 8005620:	4c0c      	ldr	r4, [pc, #48]	@ (8005654 <__libc_init_array+0x38>)
 8005622:	4d0d      	ldr	r5, [pc, #52]	@ (8005658 <__libc_init_array+0x3c>)
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	2600      	movs	r6, #0
 800562e:	f000 f823 	bl	8005678 <_init>
 8005632:	4c0a      	ldr	r4, [pc, #40]	@ (800565c <__libc_init_array+0x40>)
 8005634:	4d0a      	ldr	r5, [pc, #40]	@ (8005660 <__libc_init_array+0x44>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	00b3      	lsls	r3, r6, #2
 8005642:	58eb      	ldr	r3, [r5, r3]
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	00b3      	lsls	r3, r6, #2
 800564c:	58eb      	ldr	r3, [r5, r3]
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	080057b8 	.word	0x080057b8
 8005658:	080057b8 	.word	0x080057b8
 800565c:	080057bc 	.word	0x080057bc
 8005660:	080057b8 	.word	0x080057b8

08005664 <memcpy>:
 8005664:	2300      	movs	r3, #0
 8005666:	b510      	push	{r4, lr}
 8005668:	429a      	cmp	r2, r3
 800566a:	d100      	bne.n	800566e <memcpy+0xa>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	5ccc      	ldrb	r4, [r1, r3]
 8005670:	54c4      	strb	r4, [r0, r3]
 8005672:	3301      	adds	r3, #1
 8005674:	e7f8      	b.n	8005668 <memcpy+0x4>
	...

08005678 <_init>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr

08005684 <_fini>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr
