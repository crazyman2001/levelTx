
levelTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b90  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005c48  08005c48  00006c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d60  08005d60  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d60  08005d60  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d64  08005d64  00006d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08005d74  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005d74  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001393f  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003375  00000000  00000000  0001a973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc2  00000000  00000000  0001ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001778b  00000000  00000000  0001fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169f9  00000000  00000000  000371d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2fc  00000000  00000000  0004dbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dceca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  000dcf10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e09e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005c30 	.word	0x08005c30

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005c30 	.word	0x08005c30

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_ddiv>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	46de      	mov	lr, fp
 80003f0:	4645      	mov	r5, r8
 80003f2:	4657      	mov	r7, sl
 80003f4:	464e      	mov	r6, r9
 80003f6:	b5e0      	push	{r5, r6, r7, lr}
 80003f8:	b087      	sub	sp, #28
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	030b      	lsls	r3, r1, #12
 8000400:	0b1b      	lsrs	r3, r3, #12
 8000402:	469b      	mov	fp, r3
 8000404:	0fca      	lsrs	r2, r1, #31
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	0004      	movs	r4, r0
 800040a:	4680      	mov	r8, r0
 800040c:	0d5b      	lsrs	r3, r3, #21
 800040e:	9202      	str	r2, [sp, #8]
 8000410:	d100      	bne.n	8000414 <__aeabi_ddiv+0x28>
 8000412:	e16a      	b.n	80006ea <__aeabi_ddiv+0x2fe>
 8000414:	4ad4      	ldr	r2, [pc, #848]	@ (8000768 <__aeabi_ddiv+0x37c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d100      	bne.n	800041c <__aeabi_ddiv+0x30>
 800041a:	e18c      	b.n	8000736 <__aeabi_ddiv+0x34a>
 800041c:	4659      	mov	r1, fp
 800041e:	0f42      	lsrs	r2, r0, #29
 8000420:	00c9      	lsls	r1, r1, #3
 8000422:	430a      	orrs	r2, r1
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0409      	lsls	r1, r1, #16
 8000428:	4311      	orrs	r1, r2
 800042a:	00c2      	lsls	r2, r0, #3
 800042c:	4690      	mov	r8, r2
 800042e:	4acf      	ldr	r2, [pc, #828]	@ (800076c <__aeabi_ddiv+0x380>)
 8000430:	4689      	mov	r9, r1
 8000432:	4692      	mov	sl, r2
 8000434:	449a      	add	sl, r3
 8000436:	2300      	movs	r3, #0
 8000438:	2400      	movs	r4, #0
 800043a:	9303      	str	r3, [sp, #12]
 800043c:	9e00      	ldr	r6, [sp, #0]
 800043e:	9f01      	ldr	r7, [sp, #4]
 8000440:	033b      	lsls	r3, r7, #12
 8000442:	0b1b      	lsrs	r3, r3, #12
 8000444:	469b      	mov	fp, r3
 8000446:	007b      	lsls	r3, r7, #1
 8000448:	0030      	movs	r0, r6
 800044a:	0d5b      	lsrs	r3, r3, #21
 800044c:	0ffd      	lsrs	r5, r7, #31
 800044e:	2b00      	cmp	r3, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_ddiv+0x68>
 8000452:	e128      	b.n	80006a6 <__aeabi_ddiv+0x2ba>
 8000454:	4ac4      	ldr	r2, [pc, #784]	@ (8000768 <__aeabi_ddiv+0x37c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d100      	bne.n	800045c <__aeabi_ddiv+0x70>
 800045a:	e177      	b.n	800074c <__aeabi_ddiv+0x360>
 800045c:	4659      	mov	r1, fp
 800045e:	0f72      	lsrs	r2, r6, #29
 8000460:	00c9      	lsls	r1, r1, #3
 8000462:	430a      	orrs	r2, r1
 8000464:	2180      	movs	r1, #128	@ 0x80
 8000466:	0409      	lsls	r1, r1, #16
 8000468:	4311      	orrs	r1, r2
 800046a:	468b      	mov	fp, r1
 800046c:	49bf      	ldr	r1, [pc, #764]	@ (800076c <__aeabi_ddiv+0x380>)
 800046e:	00f2      	lsls	r2, r6, #3
 8000470:	468c      	mov	ip, r1
 8000472:	4651      	mov	r1, sl
 8000474:	4463      	add	r3, ip
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	469a      	mov	sl, r3
 800047a:	2300      	movs	r3, #0
 800047c:	9e02      	ldr	r6, [sp, #8]
 800047e:	406e      	eors	r6, r5
 8000480:	2c0f      	cmp	r4, #15
 8000482:	d827      	bhi.n	80004d4 <__aeabi_ddiv+0xe8>
 8000484:	49ba      	ldr	r1, [pc, #744]	@ (8000770 <__aeabi_ddiv+0x384>)
 8000486:	00a4      	lsls	r4, r4, #2
 8000488:	5909      	ldr	r1, [r1, r4]
 800048a:	468f      	mov	pc, r1
 800048c:	46cb      	mov	fp, r9
 800048e:	4642      	mov	r2, r8
 8000490:	9e02      	ldr	r6, [sp, #8]
 8000492:	9b03      	ldr	r3, [sp, #12]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d016      	beq.n	80004c6 <__aeabi_ddiv+0xda>
 8000498:	2b03      	cmp	r3, #3
 800049a:	d100      	bne.n	800049e <__aeabi_ddiv+0xb2>
 800049c:	e2a6      	b.n	80009ec <__aeabi_ddiv+0x600>
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d000      	beq.n	80004a4 <__aeabi_ddiv+0xb8>
 80004a2:	e0df      	b.n	8000664 <__aeabi_ddiv+0x278>
 80004a4:	2200      	movs	r2, #0
 80004a6:	2300      	movs	r3, #0
 80004a8:	2400      	movs	r4, #0
 80004aa:	4690      	mov	r8, r2
 80004ac:	051b      	lsls	r3, r3, #20
 80004ae:	4323      	orrs	r3, r4
 80004b0:	07f6      	lsls	r6, r6, #31
 80004b2:	4333      	orrs	r3, r6
 80004b4:	4640      	mov	r0, r8
 80004b6:	0019      	movs	r1, r3
 80004b8:	b007      	add	sp, #28
 80004ba:	bcf0      	pop	{r4, r5, r6, r7}
 80004bc:	46bb      	mov	fp, r7
 80004be:	46b2      	mov	sl, r6
 80004c0:	46a9      	mov	r9, r5
 80004c2:	46a0      	mov	r8, r4
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	2200      	movs	r2, #0
 80004c8:	2400      	movs	r4, #0
 80004ca:	4690      	mov	r8, r2
 80004cc:	4ba6      	ldr	r3, [pc, #664]	@ (8000768 <__aeabi_ddiv+0x37c>)
 80004ce:	e7ed      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80004d0:	002e      	movs	r6, r5
 80004d2:	e7df      	b.n	8000494 <__aeabi_ddiv+0xa8>
 80004d4:	45cb      	cmp	fp, r9
 80004d6:	d200      	bcs.n	80004da <__aeabi_ddiv+0xee>
 80004d8:	e1d4      	b.n	8000884 <__aeabi_ddiv+0x498>
 80004da:	d100      	bne.n	80004de <__aeabi_ddiv+0xf2>
 80004dc:	e1cf      	b.n	800087e <__aeabi_ddiv+0x492>
 80004de:	2301      	movs	r3, #1
 80004e0:	425b      	negs	r3, r3
 80004e2:	469c      	mov	ip, r3
 80004e4:	4644      	mov	r4, r8
 80004e6:	4648      	mov	r0, r9
 80004e8:	2700      	movs	r7, #0
 80004ea:	44e2      	add	sl, ip
 80004ec:	465b      	mov	r3, fp
 80004ee:	0e15      	lsrs	r5, r2, #24
 80004f0:	021b      	lsls	r3, r3, #8
 80004f2:	431d      	orrs	r5, r3
 80004f4:	0c19      	lsrs	r1, r3, #16
 80004f6:	042b      	lsls	r3, r5, #16
 80004f8:	0212      	lsls	r2, r2, #8
 80004fa:	9500      	str	r5, [sp, #0]
 80004fc:	0c1d      	lsrs	r5, r3, #16
 80004fe:	4691      	mov	r9, r2
 8000500:	9102      	str	r1, [sp, #8]
 8000502:	9503      	str	r5, [sp, #12]
 8000504:	f7ff fe82 	bl	800020c <__aeabi_uidivmod>
 8000508:	0002      	movs	r2, r0
 800050a:	436a      	muls	r2, r5
 800050c:	040b      	lsls	r3, r1, #16
 800050e:	0c21      	lsrs	r1, r4, #16
 8000510:	4680      	mov	r8, r0
 8000512:	4319      	orrs	r1, r3
 8000514:	428a      	cmp	r2, r1
 8000516:	d909      	bls.n	800052c <__aeabi_ddiv+0x140>
 8000518:	9d00      	ldr	r5, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	46ac      	mov	ip, r5
 800051e:	425b      	negs	r3, r3
 8000520:	4461      	add	r1, ip
 8000522:	469c      	mov	ip, r3
 8000524:	44e0      	add	r8, ip
 8000526:	428d      	cmp	r5, r1
 8000528:	d800      	bhi.n	800052c <__aeabi_ddiv+0x140>
 800052a:	e1fb      	b.n	8000924 <__aeabi_ddiv+0x538>
 800052c:	1a88      	subs	r0, r1, r2
 800052e:	9902      	ldr	r1, [sp, #8]
 8000530:	f7ff fe6c 	bl	800020c <__aeabi_uidivmod>
 8000534:	9a03      	ldr	r2, [sp, #12]
 8000536:	0424      	lsls	r4, r4, #16
 8000538:	4342      	muls	r2, r0
 800053a:	0409      	lsls	r1, r1, #16
 800053c:	0c24      	lsrs	r4, r4, #16
 800053e:	0003      	movs	r3, r0
 8000540:	430c      	orrs	r4, r1
 8000542:	42a2      	cmp	r2, r4
 8000544:	d906      	bls.n	8000554 <__aeabi_ddiv+0x168>
 8000546:	9900      	ldr	r1, [sp, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	468c      	mov	ip, r1
 800054c:	4464      	add	r4, ip
 800054e:	42a1      	cmp	r1, r4
 8000550:	d800      	bhi.n	8000554 <__aeabi_ddiv+0x168>
 8000552:	e1e1      	b.n	8000918 <__aeabi_ddiv+0x52c>
 8000554:	1aa0      	subs	r0, r4, r2
 8000556:	4642      	mov	r2, r8
 8000558:	0412      	lsls	r2, r2, #16
 800055a:	431a      	orrs	r2, r3
 800055c:	4693      	mov	fp, r2
 800055e:	464b      	mov	r3, r9
 8000560:	4659      	mov	r1, fp
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	001d      	movs	r5, r3
 8000566:	9304      	str	r3, [sp, #16]
 8000568:	040b      	lsls	r3, r1, #16
 800056a:	4649      	mov	r1, r9
 800056c:	0409      	lsls	r1, r1, #16
 800056e:	0c09      	lsrs	r1, r1, #16
 8000570:	000c      	movs	r4, r1
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	435c      	muls	r4, r3
 8000576:	0c12      	lsrs	r2, r2, #16
 8000578:	436b      	muls	r3, r5
 800057a:	4688      	mov	r8, r1
 800057c:	4351      	muls	r1, r2
 800057e:	436a      	muls	r2, r5
 8000580:	0c25      	lsrs	r5, r4, #16
 8000582:	46ac      	mov	ip, r5
 8000584:	185b      	adds	r3, r3, r1
 8000586:	4463      	add	r3, ip
 8000588:	4299      	cmp	r1, r3
 800058a:	d903      	bls.n	8000594 <__aeabi_ddiv+0x1a8>
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0249      	lsls	r1, r1, #9
 8000590:	468c      	mov	ip, r1
 8000592:	4462      	add	r2, ip
 8000594:	0c19      	lsrs	r1, r3, #16
 8000596:	0424      	lsls	r4, r4, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c24      	lsrs	r4, r4, #16
 800059c:	188a      	adds	r2, r1, r2
 800059e:	191c      	adds	r4, r3, r4
 80005a0:	4290      	cmp	r0, r2
 80005a2:	d302      	bcc.n	80005aa <__aeabi_ddiv+0x1be>
 80005a4:	d116      	bne.n	80005d4 <__aeabi_ddiv+0x1e8>
 80005a6:	42a7      	cmp	r7, r4
 80005a8:	d214      	bcs.n	80005d4 <__aeabi_ddiv+0x1e8>
 80005aa:	465b      	mov	r3, fp
 80005ac:	9d00      	ldr	r5, [sp, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	444f      	add	r7, r9
 80005b2:	9305      	str	r3, [sp, #20]
 80005b4:	454f      	cmp	r7, r9
 80005b6:	419b      	sbcs	r3, r3
 80005b8:	46ac      	mov	ip, r5
 80005ba:	425b      	negs	r3, r3
 80005bc:	4463      	add	r3, ip
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	4285      	cmp	r5, r0
 80005c2:	d300      	bcc.n	80005c6 <__aeabi_ddiv+0x1da>
 80005c4:	e1a1      	b.n	800090a <__aeabi_ddiv+0x51e>
 80005c6:	4282      	cmp	r2, r0
 80005c8:	d900      	bls.n	80005cc <__aeabi_ddiv+0x1e0>
 80005ca:	e1f6      	b.n	80009ba <__aeabi_ddiv+0x5ce>
 80005cc:	d100      	bne.n	80005d0 <__aeabi_ddiv+0x1e4>
 80005ce:	e1f1      	b.n	80009b4 <__aeabi_ddiv+0x5c8>
 80005d0:	9b05      	ldr	r3, [sp, #20]
 80005d2:	469b      	mov	fp, r3
 80005d4:	1b3c      	subs	r4, r7, r4
 80005d6:	42a7      	cmp	r7, r4
 80005d8:	41bf      	sbcs	r7, r7
 80005da:	9d00      	ldr	r5, [sp, #0]
 80005dc:	1a80      	subs	r0, r0, r2
 80005de:	427f      	negs	r7, r7
 80005e0:	1bc0      	subs	r0, r0, r7
 80005e2:	4285      	cmp	r5, r0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_ddiv+0x1fc>
 80005e6:	e1d0      	b.n	800098a <__aeabi_ddiv+0x59e>
 80005e8:	9902      	ldr	r1, [sp, #8]
 80005ea:	f7ff fe0f 	bl	800020c <__aeabi_uidivmod>
 80005ee:	9a03      	ldr	r2, [sp, #12]
 80005f0:	040b      	lsls	r3, r1, #16
 80005f2:	4342      	muls	r2, r0
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	0007      	movs	r7, r0
 80005f8:	4319      	orrs	r1, r3
 80005fa:	428a      	cmp	r2, r1
 80005fc:	d900      	bls.n	8000600 <__aeabi_ddiv+0x214>
 80005fe:	e178      	b.n	80008f2 <__aeabi_ddiv+0x506>
 8000600:	1a88      	subs	r0, r1, r2
 8000602:	9902      	ldr	r1, [sp, #8]
 8000604:	f7ff fe02 	bl	800020c <__aeabi_uidivmod>
 8000608:	9a03      	ldr	r2, [sp, #12]
 800060a:	0424      	lsls	r4, r4, #16
 800060c:	4342      	muls	r2, r0
 800060e:	0409      	lsls	r1, r1, #16
 8000610:	0c24      	lsrs	r4, r4, #16
 8000612:	0003      	movs	r3, r0
 8000614:	430c      	orrs	r4, r1
 8000616:	42a2      	cmp	r2, r4
 8000618:	d900      	bls.n	800061c <__aeabi_ddiv+0x230>
 800061a:	e15d      	b.n	80008d8 <__aeabi_ddiv+0x4ec>
 800061c:	4641      	mov	r1, r8
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	043a      	lsls	r2, r7, #16
 8000622:	431a      	orrs	r2, r3
 8000624:	9d04      	ldr	r5, [sp, #16]
 8000626:	0413      	lsls	r3, r2, #16
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	4359      	muls	r1, r3
 800062c:	4647      	mov	r7, r8
 800062e:	436b      	muls	r3, r5
 8000630:	469c      	mov	ip, r3
 8000632:	0c10      	lsrs	r0, r2, #16
 8000634:	4347      	muls	r7, r0
 8000636:	0c0b      	lsrs	r3, r1, #16
 8000638:	44bc      	add	ip, r7
 800063a:	4463      	add	r3, ip
 800063c:	4368      	muls	r0, r5
 800063e:	429f      	cmp	r7, r3
 8000640:	d903      	bls.n	800064a <__aeabi_ddiv+0x25e>
 8000642:	2580      	movs	r5, #128	@ 0x80
 8000644:	026d      	lsls	r5, r5, #9
 8000646:	46ac      	mov	ip, r5
 8000648:	4460      	add	r0, ip
 800064a:	0c1f      	lsrs	r7, r3, #16
 800064c:	0409      	lsls	r1, r1, #16
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	0c09      	lsrs	r1, r1, #16
 8000652:	183f      	adds	r7, r7, r0
 8000654:	185b      	adds	r3, r3, r1
 8000656:	42bc      	cmp	r4, r7
 8000658:	d200      	bcs.n	800065c <__aeabi_ddiv+0x270>
 800065a:	e102      	b.n	8000862 <__aeabi_ddiv+0x476>
 800065c:	d100      	bne.n	8000660 <__aeabi_ddiv+0x274>
 800065e:	e0fd      	b.n	800085c <__aeabi_ddiv+0x470>
 8000660:	2301      	movs	r3, #1
 8000662:	431a      	orrs	r2, r3
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <__aeabi_ddiv+0x388>)
 8000666:	4453      	add	r3, sl
 8000668:	2b00      	cmp	r3, #0
 800066a:	dc00      	bgt.n	800066e <__aeabi_ddiv+0x282>
 800066c:	e0ae      	b.n	80007cc <__aeabi_ddiv+0x3e0>
 800066e:	0751      	lsls	r1, r2, #29
 8000670:	d000      	beq.n	8000674 <__aeabi_ddiv+0x288>
 8000672:	e198      	b.n	80009a6 <__aeabi_ddiv+0x5ba>
 8000674:	4659      	mov	r1, fp
 8000676:	01c9      	lsls	r1, r1, #7
 8000678:	d506      	bpl.n	8000688 <__aeabi_ddiv+0x29c>
 800067a:	4659      	mov	r1, fp
 800067c:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <__aeabi_ddiv+0x38c>)
 800067e:	4019      	ands	r1, r3
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	468b      	mov	fp, r1
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4453      	add	r3, sl
 8000688:	493c      	ldr	r1, [pc, #240]	@ (800077c <__aeabi_ddiv+0x390>)
 800068a:	428b      	cmp	r3, r1
 800068c:	dd00      	ble.n	8000690 <__aeabi_ddiv+0x2a4>
 800068e:	e71a      	b.n	80004c6 <__aeabi_ddiv+0xda>
 8000690:	4659      	mov	r1, fp
 8000692:	08d2      	lsrs	r2, r2, #3
 8000694:	0749      	lsls	r1, r1, #29
 8000696:	4311      	orrs	r1, r2
 8000698:	465a      	mov	r2, fp
 800069a:	055b      	lsls	r3, r3, #21
 800069c:	0254      	lsls	r4, r2, #9
 800069e:	4688      	mov	r8, r1
 80006a0:	0b24      	lsrs	r4, r4, #12
 80006a2:	0d5b      	lsrs	r3, r3, #21
 80006a4:	e702      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80006a6:	465a      	mov	r2, fp
 80006a8:	9b00      	ldr	r3, [sp, #0]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x2c4>
 80006ae:	e07e      	b.n	80007ae <__aeabi_ddiv+0x3c2>
 80006b0:	465b      	mov	r3, fp
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_ddiv+0x2cc>
 80006b6:	e100      	b.n	80008ba <__aeabi_ddiv+0x4ce>
 80006b8:	4658      	mov	r0, fp
 80006ba:	f000 fa1b 	bl	8000af4 <__clzsi2>
 80006be:	0002      	movs	r2, r0
 80006c0:	0003      	movs	r3, r0
 80006c2:	3a0b      	subs	r2, #11
 80006c4:	271d      	movs	r7, #29
 80006c6:	9e00      	ldr	r6, [sp, #0]
 80006c8:	1aba      	subs	r2, r7, r2
 80006ca:	0019      	movs	r1, r3
 80006cc:	4658      	mov	r0, fp
 80006ce:	40d6      	lsrs	r6, r2
 80006d0:	3908      	subs	r1, #8
 80006d2:	4088      	lsls	r0, r1
 80006d4:	0032      	movs	r2, r6
 80006d6:	4302      	orrs	r2, r0
 80006d8:	4693      	mov	fp, r2
 80006da:	9a00      	ldr	r2, [sp, #0]
 80006dc:	408a      	lsls	r2, r1
 80006de:	4928      	ldr	r1, [pc, #160]	@ (8000780 <__aeabi_ddiv+0x394>)
 80006e0:	4453      	add	r3, sl
 80006e2:	468a      	mov	sl, r1
 80006e4:	449a      	add	sl, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	e6c8      	b.n	800047c <__aeabi_ddiv+0x90>
 80006ea:	465b      	mov	r3, fp
 80006ec:	4303      	orrs	r3, r0
 80006ee:	4699      	mov	r9, r3
 80006f0:	d056      	beq.n	80007a0 <__aeabi_ddiv+0x3b4>
 80006f2:	465b      	mov	r3, fp
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_ddiv+0x30e>
 80006f8:	e0cd      	b.n	8000896 <__aeabi_ddiv+0x4aa>
 80006fa:	4658      	mov	r0, fp
 80006fc:	f000 f9fa 	bl	8000af4 <__clzsi2>
 8000700:	230b      	movs	r3, #11
 8000702:	425b      	negs	r3, r3
 8000704:	469c      	mov	ip, r3
 8000706:	0002      	movs	r2, r0
 8000708:	4484      	add	ip, r0
 800070a:	4666      	mov	r6, ip
 800070c:	231d      	movs	r3, #29
 800070e:	1b9b      	subs	r3, r3, r6
 8000710:	0026      	movs	r6, r4
 8000712:	0011      	movs	r1, r2
 8000714:	4658      	mov	r0, fp
 8000716:	40de      	lsrs	r6, r3
 8000718:	3908      	subs	r1, #8
 800071a:	4088      	lsls	r0, r1
 800071c:	0033      	movs	r3, r6
 800071e:	4303      	orrs	r3, r0
 8000720:	4699      	mov	r9, r3
 8000722:	0023      	movs	r3, r4
 8000724:	408b      	lsls	r3, r1
 8000726:	4698      	mov	r8, r3
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <__aeabi_ddiv+0x398>)
 800072a:	2400      	movs	r4, #0
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	469a      	mov	sl, r3
 8000730:	2300      	movs	r3, #0
 8000732:	9303      	str	r3, [sp, #12]
 8000734:	e682      	b.n	800043c <__aeabi_ddiv+0x50>
 8000736:	465a      	mov	r2, fp
 8000738:	4302      	orrs	r2, r0
 800073a:	4691      	mov	r9, r2
 800073c:	d12a      	bne.n	8000794 <__aeabi_ddiv+0x3a8>
 800073e:	2200      	movs	r2, #0
 8000740:	469a      	mov	sl, r3
 8000742:	2302      	movs	r3, #2
 8000744:	4690      	mov	r8, r2
 8000746:	2408      	movs	r4, #8
 8000748:	9303      	str	r3, [sp, #12]
 800074a:	e677      	b.n	800043c <__aeabi_ddiv+0x50>
 800074c:	465a      	mov	r2, fp
 800074e:	9b00      	ldr	r3, [sp, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <__aeabi_ddiv+0x39c>)
 8000754:	469c      	mov	ip, r3
 8000756:	44e2      	add	sl, ip
 8000758:	2a00      	cmp	r2, #0
 800075a:	d117      	bne.n	800078c <__aeabi_ddiv+0x3a0>
 800075c:	2302      	movs	r3, #2
 800075e:	431c      	orrs	r4, r3
 8000760:	2300      	movs	r3, #0
 8000762:	469b      	mov	fp, r3
 8000764:	3302      	adds	r3, #2
 8000766:	e689      	b.n	800047c <__aeabi_ddiv+0x90>
 8000768:	000007ff 	.word	0x000007ff
 800076c:	fffffc01 	.word	0xfffffc01
 8000770:	08005c98 	.word	0x08005c98
 8000774:	000003ff 	.word	0x000003ff
 8000778:	feffffff 	.word	0xfeffffff
 800077c:	000007fe 	.word	0x000007fe
 8000780:	000003f3 	.word	0x000003f3
 8000784:	fffffc0d 	.word	0xfffffc0d
 8000788:	fffff801 	.word	0xfffff801
 800078c:	2303      	movs	r3, #3
 800078e:	0032      	movs	r2, r6
 8000790:	431c      	orrs	r4, r3
 8000792:	e673      	b.n	800047c <__aeabi_ddiv+0x90>
 8000794:	469a      	mov	sl, r3
 8000796:	2303      	movs	r3, #3
 8000798:	46d9      	mov	r9, fp
 800079a:	240c      	movs	r4, #12
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	e64d      	b.n	800043c <__aeabi_ddiv+0x50>
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	469a      	mov	sl, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	2404      	movs	r4, #4
 80007aa:	9303      	str	r3, [sp, #12]
 80007ac:	e646      	b.n	800043c <__aeabi_ddiv+0x50>
 80007ae:	2301      	movs	r3, #1
 80007b0:	431c      	orrs	r4, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	469b      	mov	fp, r3
 80007b6:	3301      	adds	r3, #1
 80007b8:	e660      	b.n	800047c <__aeabi_ddiv+0x90>
 80007ba:	2300      	movs	r3, #0
 80007bc:	2480      	movs	r4, #128	@ 0x80
 80007be:	4698      	mov	r8, r3
 80007c0:	2600      	movs	r6, #0
 80007c2:	4b92      	ldr	r3, [pc, #584]	@ (8000a0c <__aeabi_ddiv+0x620>)
 80007c4:	0324      	lsls	r4, r4, #12
 80007c6:	e671      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80007c8:	2201      	movs	r2, #1
 80007ca:	4252      	negs	r2, r2
 80007cc:	2101      	movs	r1, #1
 80007ce:	1ac9      	subs	r1, r1, r3
 80007d0:	2938      	cmp	r1, #56	@ 0x38
 80007d2:	dd00      	ble.n	80007d6 <__aeabi_ddiv+0x3ea>
 80007d4:	e666      	b.n	80004a4 <__aeabi_ddiv+0xb8>
 80007d6:	291f      	cmp	r1, #31
 80007d8:	dc00      	bgt.n	80007dc <__aeabi_ddiv+0x3f0>
 80007da:	e0ab      	b.n	8000934 <__aeabi_ddiv+0x548>
 80007dc:	201f      	movs	r0, #31
 80007de:	4240      	negs	r0, r0
 80007e0:	1ac3      	subs	r3, r0, r3
 80007e2:	4658      	mov	r0, fp
 80007e4:	40d8      	lsrs	r0, r3
 80007e6:	0003      	movs	r3, r0
 80007e8:	2920      	cmp	r1, #32
 80007ea:	d004      	beq.n	80007f6 <__aeabi_ddiv+0x40a>
 80007ec:	4658      	mov	r0, fp
 80007ee:	4988      	ldr	r1, [pc, #544]	@ (8000a10 <__aeabi_ddiv+0x624>)
 80007f0:	4451      	add	r1, sl
 80007f2:	4088      	lsls	r0, r1
 80007f4:	4302      	orrs	r2, r0
 80007f6:	1e51      	subs	r1, r2, #1
 80007f8:	418a      	sbcs	r2, r1
 80007fa:	431a      	orrs	r2, r3
 80007fc:	2307      	movs	r3, #7
 80007fe:	0019      	movs	r1, r3
 8000800:	2400      	movs	r4, #0
 8000802:	4011      	ands	r1, r2
 8000804:	4213      	tst	r3, r2
 8000806:	d00c      	beq.n	8000822 <__aeabi_ddiv+0x436>
 8000808:	230f      	movs	r3, #15
 800080a:	4013      	ands	r3, r2
 800080c:	2b04      	cmp	r3, #4
 800080e:	d100      	bne.n	8000812 <__aeabi_ddiv+0x426>
 8000810:	e0f9      	b.n	8000a06 <__aeabi_ddiv+0x61a>
 8000812:	1d11      	adds	r1, r2, #4
 8000814:	4291      	cmp	r1, r2
 8000816:	419b      	sbcs	r3, r3
 8000818:	000a      	movs	r2, r1
 800081a:	425b      	negs	r3, r3
 800081c:	0759      	lsls	r1, r3, #29
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	0b1c      	lsrs	r4, r3, #12
 8000822:	08d2      	lsrs	r2, r2, #3
 8000824:	430a      	orrs	r2, r1
 8000826:	4690      	mov	r8, r2
 8000828:	2300      	movs	r3, #0
 800082a:	e63f      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800082c:	2480      	movs	r4, #128	@ 0x80
 800082e:	464b      	mov	r3, r9
 8000830:	0324      	lsls	r4, r4, #12
 8000832:	4223      	tst	r3, r4
 8000834:	d009      	beq.n	800084a <__aeabi_ddiv+0x45e>
 8000836:	465b      	mov	r3, fp
 8000838:	4223      	tst	r3, r4
 800083a:	d106      	bne.n	800084a <__aeabi_ddiv+0x45e>
 800083c:	431c      	orrs	r4, r3
 800083e:	0324      	lsls	r4, r4, #12
 8000840:	002e      	movs	r6, r5
 8000842:	4690      	mov	r8, r2
 8000844:	4b71      	ldr	r3, [pc, #452]	@ (8000a0c <__aeabi_ddiv+0x620>)
 8000846:	0b24      	lsrs	r4, r4, #12
 8000848:	e630      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800084a:	2480      	movs	r4, #128	@ 0x80
 800084c:	464b      	mov	r3, r9
 800084e:	0324      	lsls	r4, r4, #12
 8000850:	431c      	orrs	r4, r3
 8000852:	0324      	lsls	r4, r4, #12
 8000854:	9e02      	ldr	r6, [sp, #8]
 8000856:	4b6d      	ldr	r3, [pc, #436]	@ (8000a0c <__aeabi_ddiv+0x620>)
 8000858:	0b24      	lsrs	r4, r4, #12
 800085a:	e627      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_ddiv+0x476>
 8000860:	e700      	b.n	8000664 <__aeabi_ddiv+0x278>
 8000862:	9800      	ldr	r0, [sp, #0]
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	4684      	mov	ip, r0
 8000868:	4464      	add	r4, ip
 800086a:	4284      	cmp	r4, r0
 800086c:	d200      	bcs.n	8000870 <__aeabi_ddiv+0x484>
 800086e:	e084      	b.n	800097a <__aeabi_ddiv+0x58e>
 8000870:	42bc      	cmp	r4, r7
 8000872:	d200      	bcs.n	8000876 <__aeabi_ddiv+0x48a>
 8000874:	e0ae      	b.n	80009d4 <__aeabi_ddiv+0x5e8>
 8000876:	d100      	bne.n	800087a <__aeabi_ddiv+0x48e>
 8000878:	e0c1      	b.n	80009fe <__aeabi_ddiv+0x612>
 800087a:	000a      	movs	r2, r1
 800087c:	e6f0      	b.n	8000660 <__aeabi_ddiv+0x274>
 800087e:	4542      	cmp	r2, r8
 8000880:	d900      	bls.n	8000884 <__aeabi_ddiv+0x498>
 8000882:	e62c      	b.n	80004de <__aeabi_ddiv+0xf2>
 8000884:	464b      	mov	r3, r9
 8000886:	07dc      	lsls	r4, r3, #31
 8000888:	0858      	lsrs	r0, r3, #1
 800088a:	4643      	mov	r3, r8
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	431c      	orrs	r4, r3
 8000890:	4643      	mov	r3, r8
 8000892:	07df      	lsls	r7, r3, #31
 8000894:	e62a      	b.n	80004ec <__aeabi_ddiv+0x100>
 8000896:	f000 f92d 	bl	8000af4 <__clzsi2>
 800089a:	2315      	movs	r3, #21
 800089c:	469c      	mov	ip, r3
 800089e:	4484      	add	ip, r0
 80008a0:	0002      	movs	r2, r0
 80008a2:	4663      	mov	r3, ip
 80008a4:	3220      	adds	r2, #32
 80008a6:	2b1c      	cmp	r3, #28
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_ddiv+0x4c0>
 80008aa:	e72e      	b.n	800070a <__aeabi_ddiv+0x31e>
 80008ac:	0023      	movs	r3, r4
 80008ae:	3808      	subs	r0, #8
 80008b0:	4083      	lsls	r3, r0
 80008b2:	4699      	mov	r9, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	4698      	mov	r8, r3
 80008b8:	e736      	b.n	8000728 <__aeabi_ddiv+0x33c>
 80008ba:	f000 f91b 	bl	8000af4 <__clzsi2>
 80008be:	0002      	movs	r2, r0
 80008c0:	0003      	movs	r3, r0
 80008c2:	3215      	adds	r2, #21
 80008c4:	3320      	adds	r3, #32
 80008c6:	2a1c      	cmp	r2, #28
 80008c8:	dc00      	bgt.n	80008cc <__aeabi_ddiv+0x4e0>
 80008ca:	e6fb      	b.n	80006c4 <__aeabi_ddiv+0x2d8>
 80008cc:	9900      	ldr	r1, [sp, #0]
 80008ce:	3808      	subs	r0, #8
 80008d0:	4081      	lsls	r1, r0
 80008d2:	2200      	movs	r2, #0
 80008d4:	468b      	mov	fp, r1
 80008d6:	e702      	b.n	80006de <__aeabi_ddiv+0x2f2>
 80008d8:	9900      	ldr	r1, [sp, #0]
 80008da:	3b01      	subs	r3, #1
 80008dc:	468c      	mov	ip, r1
 80008de:	4464      	add	r4, ip
 80008e0:	42a1      	cmp	r1, r4
 80008e2:	d900      	bls.n	80008e6 <__aeabi_ddiv+0x4fa>
 80008e4:	e69a      	b.n	800061c <__aeabi_ddiv+0x230>
 80008e6:	42a2      	cmp	r2, r4
 80008e8:	d800      	bhi.n	80008ec <__aeabi_ddiv+0x500>
 80008ea:	e697      	b.n	800061c <__aeabi_ddiv+0x230>
 80008ec:	1e83      	subs	r3, r0, #2
 80008ee:	4464      	add	r4, ip
 80008f0:	e694      	b.n	800061c <__aeabi_ddiv+0x230>
 80008f2:	46ac      	mov	ip, r5
 80008f4:	4461      	add	r1, ip
 80008f6:	3f01      	subs	r7, #1
 80008f8:	428d      	cmp	r5, r1
 80008fa:	d900      	bls.n	80008fe <__aeabi_ddiv+0x512>
 80008fc:	e680      	b.n	8000600 <__aeabi_ddiv+0x214>
 80008fe:	428a      	cmp	r2, r1
 8000900:	d800      	bhi.n	8000904 <__aeabi_ddiv+0x518>
 8000902:	e67d      	b.n	8000600 <__aeabi_ddiv+0x214>
 8000904:	1e87      	subs	r7, r0, #2
 8000906:	4461      	add	r1, ip
 8000908:	e67a      	b.n	8000600 <__aeabi_ddiv+0x214>
 800090a:	4285      	cmp	r5, r0
 800090c:	d000      	beq.n	8000910 <__aeabi_ddiv+0x524>
 800090e:	e65f      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 8000910:	45b9      	cmp	r9, r7
 8000912:	d900      	bls.n	8000916 <__aeabi_ddiv+0x52a>
 8000914:	e65c      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 8000916:	e656      	b.n	80005c6 <__aeabi_ddiv+0x1da>
 8000918:	42a2      	cmp	r2, r4
 800091a:	d800      	bhi.n	800091e <__aeabi_ddiv+0x532>
 800091c:	e61a      	b.n	8000554 <__aeabi_ddiv+0x168>
 800091e:	1e83      	subs	r3, r0, #2
 8000920:	4464      	add	r4, ip
 8000922:	e617      	b.n	8000554 <__aeabi_ddiv+0x168>
 8000924:	428a      	cmp	r2, r1
 8000926:	d800      	bhi.n	800092a <__aeabi_ddiv+0x53e>
 8000928:	e600      	b.n	800052c <__aeabi_ddiv+0x140>
 800092a:	46ac      	mov	ip, r5
 800092c:	1e83      	subs	r3, r0, #2
 800092e:	4698      	mov	r8, r3
 8000930:	4461      	add	r1, ip
 8000932:	e5fb      	b.n	800052c <__aeabi_ddiv+0x140>
 8000934:	4837      	ldr	r0, [pc, #220]	@ (8000a14 <__aeabi_ddiv+0x628>)
 8000936:	0014      	movs	r4, r2
 8000938:	4450      	add	r0, sl
 800093a:	4082      	lsls	r2, r0
 800093c:	465b      	mov	r3, fp
 800093e:	0017      	movs	r7, r2
 8000940:	4083      	lsls	r3, r0
 8000942:	40cc      	lsrs	r4, r1
 8000944:	1e7a      	subs	r2, r7, #1
 8000946:	4197      	sbcs	r7, r2
 8000948:	4323      	orrs	r3, r4
 800094a:	433b      	orrs	r3, r7
 800094c:	001a      	movs	r2, r3
 800094e:	465b      	mov	r3, fp
 8000950:	40cb      	lsrs	r3, r1
 8000952:	0751      	lsls	r1, r2, #29
 8000954:	d009      	beq.n	800096a <__aeabi_ddiv+0x57e>
 8000956:	210f      	movs	r1, #15
 8000958:	4011      	ands	r1, r2
 800095a:	2904      	cmp	r1, #4
 800095c:	d005      	beq.n	800096a <__aeabi_ddiv+0x57e>
 800095e:	1d11      	adds	r1, r2, #4
 8000960:	4291      	cmp	r1, r2
 8000962:	4192      	sbcs	r2, r2
 8000964:	4252      	negs	r2, r2
 8000966:	189b      	adds	r3, r3, r2
 8000968:	000a      	movs	r2, r1
 800096a:	0219      	lsls	r1, r3, #8
 800096c:	d400      	bmi.n	8000970 <__aeabi_ddiv+0x584>
 800096e:	e755      	b.n	800081c <__aeabi_ddiv+0x430>
 8000970:	2200      	movs	r2, #0
 8000972:	2301      	movs	r3, #1
 8000974:	2400      	movs	r4, #0
 8000976:	4690      	mov	r8, r2
 8000978:	e598      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800097a:	000a      	movs	r2, r1
 800097c:	42bc      	cmp	r4, r7
 800097e:	d000      	beq.n	8000982 <__aeabi_ddiv+0x596>
 8000980:	e66e      	b.n	8000660 <__aeabi_ddiv+0x274>
 8000982:	454b      	cmp	r3, r9
 8000984:	d000      	beq.n	8000988 <__aeabi_ddiv+0x59c>
 8000986:	e66b      	b.n	8000660 <__aeabi_ddiv+0x274>
 8000988:	e66c      	b.n	8000664 <__aeabi_ddiv+0x278>
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <__aeabi_ddiv+0x62c>)
 800098c:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <__aeabi_ddiv+0x630>)
 800098e:	4453      	add	r3, sl
 8000990:	4592      	cmp	sl, r2
 8000992:	da00      	bge.n	8000996 <__aeabi_ddiv+0x5aa>
 8000994:	e718      	b.n	80007c8 <__aeabi_ddiv+0x3dc>
 8000996:	2101      	movs	r1, #1
 8000998:	4249      	negs	r1, r1
 800099a:	1d0a      	adds	r2, r1, #4
 800099c:	428a      	cmp	r2, r1
 800099e:	4189      	sbcs	r1, r1
 80009a0:	4249      	negs	r1, r1
 80009a2:	448b      	add	fp, r1
 80009a4:	e666      	b.n	8000674 <__aeabi_ddiv+0x288>
 80009a6:	210f      	movs	r1, #15
 80009a8:	4011      	ands	r1, r2
 80009aa:	2904      	cmp	r1, #4
 80009ac:	d100      	bne.n	80009b0 <__aeabi_ddiv+0x5c4>
 80009ae:	e661      	b.n	8000674 <__aeabi_ddiv+0x288>
 80009b0:	0011      	movs	r1, r2
 80009b2:	e7f2      	b.n	800099a <__aeabi_ddiv+0x5ae>
 80009b4:	42bc      	cmp	r4, r7
 80009b6:	d800      	bhi.n	80009ba <__aeabi_ddiv+0x5ce>
 80009b8:	e60a      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 80009ba:	2302      	movs	r3, #2
 80009bc:	425b      	negs	r3, r3
 80009be:	469c      	mov	ip, r3
 80009c0:	9900      	ldr	r1, [sp, #0]
 80009c2:	444f      	add	r7, r9
 80009c4:	454f      	cmp	r7, r9
 80009c6:	419b      	sbcs	r3, r3
 80009c8:	44e3      	add	fp, ip
 80009ca:	468c      	mov	ip, r1
 80009cc:	425b      	negs	r3, r3
 80009ce:	4463      	add	r3, ip
 80009d0:	18c0      	adds	r0, r0, r3
 80009d2:	e5ff      	b.n	80005d4 <__aeabi_ddiv+0x1e8>
 80009d4:	4649      	mov	r1, r9
 80009d6:	9d00      	ldr	r5, [sp, #0]
 80009d8:	0048      	lsls	r0, r1, #1
 80009da:	4548      	cmp	r0, r9
 80009dc:	4189      	sbcs	r1, r1
 80009de:	46ac      	mov	ip, r5
 80009e0:	4249      	negs	r1, r1
 80009e2:	4461      	add	r1, ip
 80009e4:	4681      	mov	r9, r0
 80009e6:	3a02      	subs	r2, #2
 80009e8:	1864      	adds	r4, r4, r1
 80009ea:	e7c7      	b.n	800097c <__aeabi_ddiv+0x590>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	465b      	mov	r3, fp
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	431c      	orrs	r4, r3
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	4690      	mov	r8, r2
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__aeabi_ddiv+0x620>)
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	e556      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80009fe:	4599      	cmp	r9, r3
 8000a00:	d3e8      	bcc.n	80009d4 <__aeabi_ddiv+0x5e8>
 8000a02:	000a      	movs	r2, r1
 8000a04:	e7bd      	b.n	8000982 <__aeabi_ddiv+0x596>
 8000a06:	2300      	movs	r3, #0
 8000a08:	e708      	b.n	800081c <__aeabi_ddiv+0x430>
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	0000043e 	.word	0x0000043e
 8000a14:	0000041e 	.word	0x0000041e
 8000a18:	000003ff 	.word	0x000003ff
 8000a1c:	fffffc02 	.word	0xfffffc02

08000a20 <__aeabi_d2iz>:
 8000a20:	000b      	movs	r3, r1
 8000a22:	0002      	movs	r2, r0
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4d16      	ldr	r5, [pc, #88]	@ (8000a80 <__aeabi_d2iz+0x60>)
 8000a28:	030c      	lsls	r4, r1, #12
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	0049      	lsls	r1, r1, #1
 8000a2e:	2000      	movs	r0, #0
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	0b24      	lsrs	r4, r4, #12
 8000a36:	0d49      	lsrs	r1, r1, #21
 8000a38:	0fde      	lsrs	r6, r3, #31
 8000a3a:	42a9      	cmp	r1, r5
 8000a3c:	dd04      	ble.n	8000a48 <__aeabi_d2iz+0x28>
 8000a3e:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <__aeabi_d2iz+0x64>)
 8000a40:	4281      	cmp	r1, r0
 8000a42:	dd03      	ble.n	8000a4c <__aeabi_d2iz+0x2c>
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <__aeabi_d2iz+0x68>)
 8000a46:	18f0      	adds	r0, r6, r3
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	2080      	movs	r0, #128	@ 0x80
 8000a4e:	0340      	lsls	r0, r0, #13
 8000a50:	4320      	orrs	r0, r4
 8000a52:	4c0e      	ldr	r4, [pc, #56]	@ (8000a8c <__aeabi_d2iz+0x6c>)
 8000a54:	1a64      	subs	r4, r4, r1
 8000a56:	2c1f      	cmp	r4, #31
 8000a58:	dd08      	ble.n	8000a6c <__aeabi_d2iz+0x4c>
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <__aeabi_d2iz+0x70>)
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	40d8      	lsrs	r0, r3
 8000a60:	0003      	movs	r3, r0
 8000a62:	4258      	negs	r0, r3
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d1ef      	bne.n	8000a48 <__aeabi_d2iz+0x28>
 8000a68:	0018      	movs	r0, r3
 8000a6a:	e7ed      	b.n	8000a48 <__aeabi_d2iz+0x28>
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <__aeabi_d2iz+0x74>)
 8000a6e:	9a00      	ldr	r2, [sp, #0]
 8000a70:	469c      	mov	ip, r3
 8000a72:	0003      	movs	r3, r0
 8000a74:	4461      	add	r1, ip
 8000a76:	408b      	lsls	r3, r1
 8000a78:	40e2      	lsrs	r2, r4
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	e7f1      	b.n	8000a62 <__aeabi_d2iz+0x42>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000003fe 	.word	0x000003fe
 8000a84:	0000041d 	.word	0x0000041d
 8000a88:	7fffffff 	.word	0x7fffffff
 8000a8c:	00000433 	.word	0x00000433
 8000a90:	00000413 	.word	0x00000413
 8000a94:	fffffbed 	.word	0xfffffbed

08000a98 <__aeabi_i2d>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d016      	beq.n	8000acc <__aeabi_i2d+0x34>
 8000a9e:	17c3      	asrs	r3, r0, #31
 8000aa0:	18c5      	adds	r5, r0, r3
 8000aa2:	405d      	eors	r5, r3
 8000aa4:	0fc4      	lsrs	r4, r0, #31
 8000aa6:	0028      	movs	r0, r5
 8000aa8:	f000 f824 	bl	8000af4 <__clzsi2>
 8000aac:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <__aeabi_i2d+0x58>)
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	055b      	lsls	r3, r3, #21
 8000ab2:	0d5b      	lsrs	r3, r3, #21
 8000ab4:	280a      	cmp	r0, #10
 8000ab6:	dc14      	bgt.n	8000ae2 <__aeabi_i2d+0x4a>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	002e      	movs	r6, r5
 8000abc:	3215      	adds	r2, #21
 8000abe:	4096      	lsls	r6, r2
 8000ac0:	220b      	movs	r2, #11
 8000ac2:	1a12      	subs	r2, r2, r0
 8000ac4:	40d5      	lsrs	r5, r2
 8000ac6:	032d      	lsls	r5, r5, #12
 8000ac8:	0b2d      	lsrs	r5, r5, #12
 8000aca:	e003      	b.n	8000ad4 <__aeabi_i2d+0x3c>
 8000acc:	2400      	movs	r4, #0
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	051b      	lsls	r3, r3, #20
 8000ad6:	432b      	orrs	r3, r5
 8000ad8:	07e4      	lsls	r4, r4, #31
 8000ada:	4323      	orrs	r3, r4
 8000adc:	0030      	movs	r0, r6
 8000ade:	0019      	movs	r1, r3
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	380b      	subs	r0, #11
 8000ae4:	4085      	lsls	r5, r0
 8000ae6:	032d      	lsls	r5, r5, #12
 8000ae8:	2600      	movs	r6, #0
 8000aea:	0b2d      	lsrs	r5, r5, #12
 8000aec:	e7f2      	b.n	8000ad4 <__aeabi_i2d+0x3c>
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	0000041e 	.word	0x0000041e

08000af4 <__clzsi2>:
 8000af4:	211c      	movs	r1, #28
 8000af6:	2301      	movs	r3, #1
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d301      	bcc.n	8000b02 <__clzsi2+0xe>
 8000afe:	0c00      	lsrs	r0, r0, #16
 8000b00:	3910      	subs	r1, #16
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d301      	bcc.n	8000b0c <__clzsi2+0x18>
 8000b08:	0a00      	lsrs	r0, r0, #8
 8000b0a:	3908      	subs	r1, #8
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d301      	bcc.n	8000b16 <__clzsi2+0x22>
 8000b12:	0900      	lsrs	r0, r0, #4
 8000b14:	3904      	subs	r1, #4
 8000b16:	a202      	add	r2, pc, #8	@ (adr r2, 8000b20 <__clzsi2+0x2c>)
 8000b18:	5c10      	ldrb	r0, [r2, r0]
 8000b1a:	1840      	adds	r0, r0, r1
 8000b1c:	4770      	bx	lr
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	02020304 	.word	0x02020304
 8000b24:	01010101 	.word	0x01010101
	...

08000b30 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b08f      	sub	sp, #60	@ 0x3c
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000b38:	200c      	movs	r0, #12
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	22b2      	movs	r2, #178	@ 0xb2
 8000b3e:	32ff      	adds	r2, #255	@ 0xff
 8000b40:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 8000b42:	183b      	adds	r3, r7, r0
 8000b44:	2224      	movs	r2, #36	@ 0x24
 8000b46:	2107      	movs	r1, #7
 8000b48:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000b4a:	183b      	adds	r3, r7, r0
 8000b4c:	2225      	movs	r2, #37	@ 0x25
 8000b4e:	2107      	movs	r1, #7
 8000b50:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8000b52:	183b      	adds	r3, r7, r0
 8000b54:	2226      	movs	r2, #38	@ 0x26
 8000b56:	2101      	movs	r1, #1
 8000b58:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 8000b5a:	183b      	adds	r3, r7, r0
 8000b5c:	222a      	movs	r2, #42	@ 0x2a
 8000b5e:	21ff      	movs	r1, #255	@ 0xff
 8000b60:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8000b62:	183b      	adds	r3, r7, r0
 8000b64:	222b      	movs	r2, #43	@ 0x2b
 8000b66:	2164      	movs	r1, #100	@ 0x64
 8000b68:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 8000b6a:	0001      	movs	r1, r0
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2208      	movs	r2, #8
 8000b70:	851a      	strh	r2, [r3, #40]	@ 0x28

	return new_LoRa;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	187a      	adds	r2, r7, r1
 8000b76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b78:	c313      	stmia	r3!, {r0, r1, r4}
 8000b7a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b7c:	c313      	stmia	r3!, {r0, r1, r4}
 8000b7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b80:	c313      	stmia	r3!, {r0, r1, r4}
 8000b82:	ca03      	ldmia	r2!, {r0, r1}
 8000b84:	c303      	stmia	r3!, {r0, r1}
}
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b00f      	add	sp, #60	@ 0x3c
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000b8e:	b5b0      	push	{r4, r5, r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000b98:	250e      	movs	r5, #14
 8000b9a:	197c      	adds	r4, r7, r5
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fa59 	bl	8001058 <LoRa_read>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	7023      	strb	r3, [r4, #0]
	data = read;
 8000baa:	200f      	movs	r0, #15
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	0029      	movs	r1, r5
 8000bb0:	187a      	adds	r2, r7, r1
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d109      	bne.n	8000bd0 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8000bbc:	183b      	adds	r3, r7, r0
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
 8000bce:	e04e      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d110      	bne.n	8000bf8 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000bd6:	230e      	movs	r3, #14
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	2207      	movs	r2, #7
 8000be0:	4393      	bics	r3, r2
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	2201      	movs	r2, #1
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	230f      	movs	r3, #15
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	61da      	str	r2, [r3, #28]
 8000bf6:	e03a      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d110      	bne.n	8000c20 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8000bfe:	230e      	movs	r3, #14
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	2207      	movs	r2, #7
 8000c08:	4393      	bics	r3, r2
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	230f      	movs	r3, #15
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	61da      	str	r2, [r3, #28]
 8000c1e:	e026      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d110      	bne.n	8000c48 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 8000c26:	230e      	movs	r3, #14
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	2207      	movs	r2, #7
 8000c30:	4393      	bics	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	2205      	movs	r2, #5
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2205      	movs	r2, #5
 8000c44:	61da      	str	r2, [r3, #28]
 8000c46:	e012      	b.n	8000c6e <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d10f      	bne.n	8000c6e <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 8000c4e:	230e      	movs	r3, #14
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	2207      	movs	r2, #7
 8000c58:	4393      	bics	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	2206      	movs	r2, #6
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b25a      	sxtb	r2, r3
 8000c62:	230f      	movs	r3, #15
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000c6e:	230f      	movs	r3, #15
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2101      	movs	r1, #1
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fa0b 	bl	8001094 <LoRa_write>
	//HAL_Delay(10);
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bdb0      	pop	{r4, r5, r7, pc}

08000c86 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000c86:	b590      	push	{r4, r7, lr}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	889b      	ldrh	r3, [r3, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	f002 fab4 	bl	800320e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6998      	ldr	r0, [r3, #24]
 8000caa:	23fa      	movs	r3, #250	@ 0xfa
 8000cac:	00dc      	lsls	r4, r3, #3
 8000cae:	1dbb      	adds	r3, r7, #6
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	0023      	movs	r3, r4
 8000cb6:	f003 fc03 	bl	80044c0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f004 f891 	bl	8004de8 <HAL_SPI_GetState>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d1f7      	bne.n	8000cbc <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6998      	ldr	r0, [r3, #24]
 8000cd0:	23fa      	movs	r3, #250	@ 0xfa
 8000cd2:	00dc      	lsls	r4, r3, #3
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	6839      	ldr	r1, [r7, #0]
 8000cdc:	0023      	movs	r3, r4
 8000cde:	f003 fd4f 	bl	8004780 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f004 f87d 	bl	8004de8 <HAL_SPI_GetState>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d1f7      	bne.n	8000ce4 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	889b      	ldrh	r3, [r3, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	0019      	movs	r1, r3
 8000d00:	f002 fa85 	bl	800320e <HAL_GPIO_WritePin>
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b005      	add	sp, #20
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	889b      	ldrh	r3, [r3, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f002 fa71 	bl	800320e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	23fa      	movs	r3, #250	@ 0xfa
 8000d32:	00dc      	lsls	r4, r3, #3
 8000d34:	1dbb      	adds	r3, r7, #6
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	0023      	movs	r3, r4
 8000d3c:	f003 fbc0 	bl	80044c0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	0018      	movs	r0, r3
 8000d48:	f004 f84e 	bl	8004de8 <HAL_SPI_GetState>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1f7      	bne.n	8000d42 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6998      	ldr	r0, [r3, #24]
 8000d56:	23fa      	movs	r3, #250	@ 0xfa
 8000d58:	00dc      	lsls	r4, r3, #3
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	0023      	movs	r3, r4
 8000d64:	f003 fbac 	bl	80044c0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f004 f83a 	bl	8004de8 <HAL_SPI_GetState>
 8000d74:	0003      	movs	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d1f7      	bne.n	8000d6a <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	889b      	ldrh	r3, [r3, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	0019      	movs	r1, r3
 8000d86:	f002 fa42 	bl	800320e <HAL_GPIO_WritePin>
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b005      	add	sp, #20
 8000d90:	bd90      	pop	{r4, r7, pc}

08000d92 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000d92:	b5b0      	push	{r4, r5, r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	1cfb      	adds	r3, r7, #3
 8000d9e:	701a      	strb	r2, [r3, #0]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000da0:	250e      	movs	r5, #14
 8000da2:	197c      	adds	r4, r7, r5
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2126      	movs	r1, #38	@ 0x26
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f955 	bl	8001058 <LoRa_read>
 8000dae:	0003      	movs	r3, r0
 8000db0:	7023      	strb	r3, [r4, #0]
	
	if(value)
 8000db2:	1cfb      	adds	r3, r7, #3
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <LoRa_setLowDaraRateOptimization+0x38>
		data = read | 0x08;
 8000dba:	230f      	movs	r3, #15
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	197a      	adds	r2, r7, r5
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <LoRa_setLowDaraRateOptimization+0x48>
	else
		data = read & 0xF7;
 8000dca:	230f      	movs	r3, #15
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	220e      	movs	r2, #14
 8000dd0:	18ba      	adds	r2, r7, r2
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	438a      	bics	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2126      	movs	r1, #38	@ 0x26
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 f955 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8000dea:	200a      	movs	r0, #10
 8000dec:	f001 f974 	bl	80020d8 <HAL_Delay>
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b004      	add	sp, #16
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}

08000df8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b097      	sub	sp, #92	@ 0x5c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000e00:	2408      	movs	r4, #8
 8000e02:	193a      	adds	r2, r7, r4
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <LoRa_setAutoLDO+0x70>)
 8000e06:	0010      	movs	r0, r2
 8000e08:	0019      	movs	r1, r3
 8000e0a:	2350      	movs	r3, #80	@ 0x50
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	f004 ff05 	bl	8005c1c <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2224      	movs	r2, #36	@ 0x24
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fe3a 	bl	8000a98 <__aeabi_i2d>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2225      	movs	r2, #37	@ 0x25
 8000e28:	5c9b      	ldrb	r3, [r3, r2]
 8000e2a:	193a      	adds	r2, r7, r4
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f7ff fada 	bl	80003ec <__aeabi_ddiv>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	000b      	movs	r3, r1
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	0019      	movs	r1, r3
 8000e40:	f7ff fdee 	bl	8000a20 <__aeabi_d2iz>
 8000e44:	0003      	movs	r3, r0
 8000e46:	2201      	movs	r2, #1
 8000e48:	2b10      	cmp	r3, #16
 8000e4a:	dc01      	bgt.n	8000e50 <LoRa_setAutoLDO+0x58>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	1c1a      	adds	r2, r3, #0
 8000e50:	b2d3      	uxtb	r3, r2
 8000e52:	001a      	movs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff9a 	bl	8000d92 <LoRa_setLowDaraRateOptimization>
}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b017      	add	sp, #92	@ 0x5c
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	08005c48 	.word	0x08005c48

08000e6c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	04db      	lsls	r3, r3, #19
 8000e7a:	115b      	asrs	r3, r3, #5
 8000e7c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	0c1a      	lsrs	r2, r3, #16
 8000e82:	240b      	movs	r4, #11
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2106      	movs	r1, #6
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f8ff 	bl	8001094 <LoRa_write>
	HAL_Delay(5);
 8000e96:	2005      	movs	r0, #5
 8000e98:	f001 f91e 	bl	80020d8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	0a1a      	lsrs	r2, r3, #8
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2107      	movs	r1, #7
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 f8f1 	bl	8001094 <LoRa_write>
	HAL_Delay(5);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f001 f910 	bl	80020d8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f8e4 	bl	8001094 <LoRa_write>
	HAL_Delay(5);
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f001 f903 	bl	80020d8 <HAL_Delay>
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b005      	add	sp, #20
 8000ed8:	bd90      	pop	{r4, r7, pc}

08000eda <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000eda:	b5b0      	push	{r4, r5, r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	dd01      	ble.n	8000eee <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000eea:	230c      	movs	r3, #12
 8000eec:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	dc01      	bgt.n	8000ef8 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000ef8:	250f      	movs	r5, #15
 8000efa:	197c      	adds	r4, r7, r5
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	211e      	movs	r1, #30
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 f8a9 	bl	8001058 <LoRa_read>
 8000f06:	0003      	movs	r3, r0
 8000f08:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f001 f8e4 	bl	80020d8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	b2d9      	uxtb	r1, r3
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	4013      	ands	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	200e      	movs	r0, #14
 8000f24:	183b      	adds	r3, r7, r0
 8000f26:	188a      	adds	r2, r1, r2
 8000f28:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	211e      	movs	r1, #30
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f8ae 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f001 f8cd 	bl	80020d8 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff59 	bl	8000df8 <LoRa_setAutoLDO>
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}

08000f4e <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	000a      	movs	r2, r1
 8000f58:	1cfb      	adds	r3, r7, #3
 8000f5a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000f5c:	1cfb      	adds	r3, r7, #3
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2109      	movs	r1, #9
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 f895 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f001 f8b4 	bl	80020d8 <HAL_Delay>
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	000a      	movs	r2, r1
 8000f82:	1cfb      	adds	r3, r7, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8000f8e:	1cfb      	adds	r3, r7, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f94:	d802      	bhi.n	8000f9c <LoRa_setOCP+0x24>
		current = 45;
 8000f96:	1cfb      	adds	r3, r7, #3
 8000f98:	222d      	movs	r2, #45	@ 0x2d
 8000f9a:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8000f9c:	1cfb      	adds	r3, r7, #3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fa2:	d902      	bls.n	8000faa <LoRa_setOCP+0x32>
		current = 240;
 8000fa4:	1cfb      	adds	r3, r7, #3
 8000fa6:	22f0      	movs	r2, #240	@ 0xf0
 8000fa8:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000faa:	1cfb      	adds	r3, r7, #3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b78      	cmp	r3, #120	@ 0x78
 8000fb0:	d80c      	bhi.n	8000fcc <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000fb2:	1cfb      	adds	r3, r7, #3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3b2d      	subs	r3, #45	@ 0x2d
 8000fb8:	2105      	movs	r1, #5
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff f92a 	bl	8000214 <__divsi3>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e00f      	b.n	8000fec <LoRa_setOCP+0x74>
	else if(current <= 240)
 8000fcc:	1cfb      	adds	r3, r7, #3
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fd2:	d80b      	bhi.n	8000fec <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8000fd4:	1cfb      	adds	r3, r7, #3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	331e      	adds	r3, #30
 8000fda:	210a      	movs	r1, #10
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f919 	bl	8000214 <__divsi3>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8000fec:	210f      	movs	r1, #15
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	187a      	adds	r2, r7, r1
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	3220      	adds	r2, #32
 8000ff6:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	210b      	movs	r1, #11
 8001000:	0018      	movs	r0, r3
 8001002:	f000 f847 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f001 f866 	bl	80020d8 <HAL_Delay>
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}

08001014 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800101c:	250f      	movs	r5, #15
 800101e:	197c      	adds	r4, r7, r5
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	211e      	movs	r1, #30
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f817 	bl	8001058 <LoRa_read>
 800102a:	0003      	movs	r3, r0
 800102c:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 800102e:	200e      	movs	r0, #14
 8001030:	183b      	adds	r3, r7, r0
 8001032:	197a      	adds	r2, r7, r5
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	2107      	movs	r1, #7
 8001038:	430a      	orrs	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800103c:	183b      	adds	r3, r7, r0
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	211e      	movs	r1, #30
 8001044:	0018      	movs	r0, r3
 8001046:	f000 f825 	bl	8001094 <LoRa_write>
	HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f001 f844 	bl	80020d8 <HAL_Delay>
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bdb0      	pop	{r4, r5, r7, pc}

08001058 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	000a      	movs	r2, r1
 8001062:	1cfb      	adds	r3, r7, #3
 8001064:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	227f      	movs	r2, #127	@ 0x7f
 800106c:	4013      	ands	r3, r2
 800106e:	b2da      	uxtb	r2, r3
 8001070:	210e      	movs	r1, #14
 8001072:	187b      	adds	r3, r7, r1
 8001074:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001076:	240f      	movs	r4, #15
 8001078:	193b      	adds	r3, r7, r4
 800107a:	1879      	adds	r1, r7, r1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	9200      	str	r2, [sp, #0]
 8001082:	2201      	movs	r2, #1
 8001084:	f7ff fdff 	bl	8000c86 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b005      	add	sp, #20
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cfb      	adds	r3, r7, #3
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80010ac:	1cfb      	adds	r3, r7, #3
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	4252      	negs	r2, r2
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	210e      	movs	r1, #14
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	data = value;
 80010be:	200f      	movs	r0, #15
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	1cba      	adds	r2, r7, #2
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80010c8:	183b      	adds	r3, r7, r0
 80010ca:	1879      	adds	r1, r7, r1
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f7ff fe1a 	bl	8000d0c <LoRa_writeReg>
	//HAL_Delay(5);
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b004      	add	sp, #16
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	0008      	movs	r0, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	0019      	movs	r1, r3
 80010ee:	240b      	movs	r4, #11
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	230a      	movs	r3, #10
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	1c0a      	adds	r2, r1, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	4252      	negs	r2, r2
 8001106:	4313      	orrs	r3, r2
 8001108:	b2da      	uxtb	r2, r3
 800110a:	2417      	movs	r4, #23
 800110c:	193b      	adds	r3, r7, r4
 800110e:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	889b      	ldrh	r3, [r3, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	0019      	movs	r1, r3
 800111c:	f002 f877 	bl	800320e <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6998      	ldr	r0, [r3, #24]
 8001124:	23fa      	movs	r3, #250	@ 0xfa
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1939      	adds	r1, r7, r4
 800112a:	2201      	movs	r2, #1
 800112c:	f003 f9c8 	bl	80044c0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	0018      	movs	r0, r3
 8001138:	f003 fe56 	bl	8004de8 <HAL_SPI_GetState>
 800113c:	0003      	movs	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d1f7      	bne.n	8001132 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6998      	ldr	r0, [r3, #24]
 8001146:	230a      	movs	r3, #10
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29a      	uxth	r2, r3
 800114e:	23fa      	movs	r3, #250	@ 0xfa
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f003 f9b4 	bl	80044c0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	0018      	movs	r0, r3
 8001160:	f003 fe42 	bl	8004de8 <HAL_SPI_GetState>
 8001164:	0003      	movs	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d1f7      	bne.n	800115a <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	0019      	movs	r1, r3
 8001176:	f002 f84a 	bl	800320e <HAL_GPIO_WritePin>
}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b007      	add	sp, #28
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

	return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	0019      	movs	r1, r3
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	1c0a      	adds	r2, r1, #0
 80011a8:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2101      	movs	r1, #1
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff fcea 	bl	8000b8e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80011ba:	2513      	movs	r5, #19
 80011bc:	197c      	adds	r4, r7, r5
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	210e      	movs	r1, #14
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ff48 	bl	8001058 <LoRa_read>
 80011c8:	0003      	movs	r3, r0
 80011ca:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80011cc:	197b      	adds	r3, r7, r5
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	210d      	movs	r1, #13
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2122      	movs	r1, #34	@ 0x22
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff56 	bl	8001094 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	2100      	movs	r1, #0
 80011f2:	f7ff ff75 	bl	80010e0 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2103      	movs	r1, #3
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fcc7 	bl	8000b8e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001200:	2513      	movs	r5, #19
 8001202:	197c      	adds	r4, r7, r5
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2112      	movs	r1, #18
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ff25 	bl	8001058 <LoRa_read>
 800120e:	0003      	movs	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8001212:	197b      	adds	r3, r7, r5
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2208      	movs	r2, #8
 8001218:	4013      	ands	r3, r2
 800121a:	d00d      	beq.n	8001238 <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	22ff      	movs	r2, #255	@ 0xff
 8001220:	2112      	movs	r1, #18
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff36 	bl	8001094 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fcad 	bl	8000b8e <LoRa_gotoMode>
			return 1;
 8001234:	2301      	movs	r3, #1
 8001236:	e014      	b.n	8001262 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	1d3a      	adds	r2, r7, #4
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	3a01      	subs	r2, #1
 8001240:	801a      	strh	r2, [r3, #0]
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fc9c 	bl	8000b8e <LoRa_gotoMode>
				return 0;
 8001256:	2300      	movs	r3, #0
 8001258:	e003      	b.n	8001262 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 ff3c 	bl	80020d8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001260:	e7ce      	b.n	8001200 <LoRa_transmit+0x6c>
	}
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b006      	add	sp, #24
 8001268:	bdb0      	pop	{r4, r5, r7, pc}

0800126a <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2105      	movs	r1, #5
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff fc89 	bl	8000b8e <LoRa_gotoMode>
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	889b      	ldrh	r3, [r3, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	0019      	movs	r1, r3
 8001298:	f001 ffb9 	bl	800320e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LoRa->DIO0_port, _LoRa->DIO0_pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2201      	movs	r2, #1
 80012a6:	0019      	movs	r1, r3
 80012a8:	f001 ffb1 	bl	800320e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6898      	ldr	r0, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	899b      	ldrh	r3, [r3, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	0019      	movs	r1, r3
 80012b8:	f001 ffa9 	bl	800320e <HAL_GPIO_WritePin>
	if(LoRa_isvalid(_LoRa)){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff5f 	bl	8001182 <LoRa_isvalid>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d100      	bne.n	80012ca <LoRa_init+0x46>
 80012c8:	e0c9      	b.n	800145e <LoRa_init+0x1da>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff fc5d 	bl	8000b8e <LoRa_gotoMode>
			HAL_Delay(10);
 80012d4:	200a      	movs	r0, #10
 80012d6:	f000 feff 	bl	80020d8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80012da:	260f      	movs	r6, #15
 80012dc:	19bc      	adds	r4, r7, r6
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2101      	movs	r1, #1
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff feb8 	bl	8001058 <LoRa_read>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f000 fef3 	bl	80020d8 <HAL_Delay>
			data = read | 0x80;
 80012f2:	250e      	movs	r5, #14
 80012f4:	197b      	adds	r3, r7, r5
 80012f6:	19ba      	adds	r2, r7, r6
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	4249      	negs	r1, r1
 80012fe:	430a      	orrs	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8001302:	197b      	adds	r3, r7, r5
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2101      	movs	r1, #1
 800130a:	0018      	movs	r0, r3
 800130c:	f7ff fec2 	bl	8001094 <LoRa_write>
			HAL_Delay(100);
 8001310:	2064      	movs	r0, #100	@ 0x64
 8001312:	f000 fee1 	bl	80020d8 <HAL_Delay>
			read = LoRa_read(_LoRa, 0x02);
 8001316:	19bc      	adds	r4, r7, r6
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2102      	movs	r1, #2
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff fe9b 	bl	8001058 <LoRa_read>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	@ 0x64
 8001328:	f000 fed6 	bl	80020d8 <HAL_Delay>
			data = LoRa_read(_LoRa, 0x03);
 800132c:	197c      	adds	r4, r7, r5
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2103      	movs	r1, #3
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fe90 	bl	8001058 <LoRa_read>
 8001338:	0003      	movs	r3, r0
 800133a:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 800133c:	2064      	movs	r0, #100	@ 0x64
 800133e:	f000 fecb 	bl	80020d8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0011      	movs	r1, r2
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fd8e 	bl	8000e6c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	222a      	movs	r2, #42	@ 0x2a
 8001354:	5c9a      	ldrb	r2, [r3, r2]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff fdf7 	bl	8000f4e <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	222b      	movs	r2, #43	@ 0x2b
 8001364:	5c9a      	ldrb	r2, [r3, r2]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff fe04 	bl	8000f78 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2223      	movs	r2, #35	@ 0x23
 8001374:	210c      	movs	r1, #12
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fe8c 	bl	8001094 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fe48 	bl	8001014 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	5c9b      	ldrb	r3, [r3, r2]
 800138a:	001a      	movs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fda2 	bl	8000eda <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	211f      	movs	r1, #31
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fe79 	bl	8001094 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80013a2:	197b      	adds	r3, r7, r5
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2225      	movs	r2, #37	@ 0x25
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	b2d9      	uxtb	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2226      	movs	r2, #38	@ 0x26
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	18db      	adds	r3, r3, r3
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	197b      	adds	r3, r7, r5
 80013be:	188a      	adds	r2, r1, r2
 80013c0:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	211d      	movs	r1, #29
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff fe62 	bl	8001094 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fd10 	bl	8000df8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2120      	movs	r1, #32
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe54 	bl	8001094 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2121      	movs	r1, #33	@ 0x21
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fe4c 	bl	8001094 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80013fc:	19bc      	adds	r4, r7, r6
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fe28 	bl	8001058 <LoRa_read>
 8001408:	0003      	movs	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 800140c:	197b      	adds	r3, r7, r5
 800140e:	19ba      	adds	r2, r7, r6
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	213f      	movs	r1, #63	@ 0x3f
 8001414:	430a      	orrs	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001418:	197b      	adds	r3, r7, r5
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2140      	movs	r1, #64	@ 0x40
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fe37 	bl	8001094 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2101      	movs	r1, #1
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fbaf 	bl	8000b8e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f000 fe4e 	bl	80020d8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800143c:	19bc      	adds	r4, r7, r6
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2142      	movs	r1, #66	@ 0x42
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fe08 	bl	8001058 <LoRa_read>
 8001448:	0003      	movs	r3, r0
 800144a:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 800144c:	19bb      	adds	r3, r7, r6
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d101      	bne.n	8001458 <LoRa_init+0x1d4>
				return LORA_OK;
 8001454:	23c8      	movs	r3, #200	@ 0xc8
 8001456:	e004      	b.n	8001462 <LoRa_init+0x1de>
			else
				return LORA_NOT_FOUND;
 8001458:	23ca      	movs	r3, #202	@ 0xca
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	e001      	b.n	8001462 <LoRa_init+0x1de>
	}
	else {
		return LORA_UNAVAILABLE;
 800145e:	23f8      	movs	r3, #248	@ 0xf8
 8001460:	33ff      	adds	r3, #255	@ 0xff
	}
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b005      	add	sp, #20
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800146c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	0018      	movs	r0, r3
 8001476:	230c      	movs	r3, #12
 8001478:	001a      	movs	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	f004 fba2 	bl	8005bc4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <MX_ADC1_Init+0xc8>)
 8001484:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001488:	22c0      	movs	r2, #192	@ 0xc0
 800148a:	0612      	lsls	r2, r2, #24
 800148c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148e:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <MX_ADC1_Init+0xc4>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014a2:	2204      	movs	r2, #4
 80014a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014cc:	222c      	movs	r2, #44	@ 0x2c
 80014ce:	2101      	movs	r1, #1
 80014d0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014e6:	223c      	movs	r2, #60	@ 0x3c
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_ADC1_Init+0xc4>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f000 ff1f 	bl	8002338 <HAL_ADC_Init>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80014fe:	f000 fb20 	bl	8001b42 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	1d3a      	adds	r2, r7, #4
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_ADC1_Init+0xc4>)
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f001 f8b4 	bl	8002688 <HAL_ADC_ConfigChannel>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001524:	f000 fb0d 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001528:	46c0      	nop			@ (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000028 	.word	0x20000028
 8001534:	40012400 	.word	0x40012400

08001538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	2414      	movs	r4, #20
 8001542:	193b      	adds	r3, r7, r4
 8001544:	0018      	movs	r0, r3
 8001546:	2314      	movs	r3, #20
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f004 fb3a 	bl	8005bc4 <memset>
  if(adcHandle->Instance==ADC1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <HAL_ADC_MspInit+0xd4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d154      	bne.n	8001604 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 800155c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 8001560:	2180      	movs	r1, #128	@ 0x80
 8001562:	0349      	lsls	r1, r1, #13
 8001564:	430a      	orrs	r2, r1
 8001566:	641a      	str	r2, [r3, #64]	@ 0x40
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 800156a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	035b      	lsls	r3, r3, #13
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 8001578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
 8001582:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <HAL_ADC_MspInit+0xd8>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2203      	movs	r2, #3
 8001598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	193b      	adds	r3, r7, r4
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	193a      	adds	r2, r7, r4
 80015a2:	23a0      	movs	r3, #160	@ 0xa0
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f001 fcaf 	bl	8002f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_ADC_MspInit+0xe0>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015b6:	2205      	movs	r2, #5
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015c8:	2280      	movs	r2, #128	@ 0x80
 80015ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015de:	2220      	movs	r2, #32
 80015e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 fb02 	bl	8002bf4 <HAL_DMA_Init>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80015f4:	f000 faa5 	bl	8001b42 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 80015fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_ADC_MspInit+0xdc>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001604:	46c0      	nop			@ (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b00b      	add	sp, #44	@ 0x2c
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40012400 	.word	0x40012400
 8001610:	40021000 	.word	0x40021000
 8001614:	2000008c 	.word	0x2000008c
 8001618:	40020008 	.word	0x40020008

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_DMA_Init+0x38>)
 8001624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_DMA_Init+0x38>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	639a      	str	r2, [r3, #56]	@ 0x38
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_DMA_Init+0x38>)
 8001630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2009      	movs	r0, #9
 8001640:	f001 faa6 	bl	8002b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001644:	2009      	movs	r0, #9
 8001646:	f001 fab8 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	40021000 	.word	0x40021000

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	240c      	movs	r4, #12
 8001660:	193b      	adds	r3, r7, r4
 8001662:	0018      	movs	r0, r3
 8001664:	2314      	movs	r3, #20
 8001666:	001a      	movs	r2, r3
 8001668:	2100      	movs	r1, #0
 800166a:	f004 faab 	bl	8005bc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b47      	ldr	r3, [pc, #284]	@ (800178c <MX_GPIO_Init+0x134>)
 8001670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001672:	4b46      	ldr	r3, [pc, #280]	@ (800178c <MX_GPIO_Init+0x134>)
 8001674:	2102      	movs	r1, #2
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
 800167a:	4b44      	ldr	r3, [pc, #272]	@ (800178c <MX_GPIO_Init+0x134>)
 800167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b41      	ldr	r3, [pc, #260]	@ (800178c <MX_GPIO_Init+0x134>)
 8001688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168a:	4b40      	ldr	r3, [pc, #256]	@ (800178c <MX_GPIO_Init+0x134>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
 8001692:	4b3e      	ldr	r3, [pc, #248]	@ (800178c <MX_GPIO_Init+0x134>)
 8001694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <MX_GPIO_Init+0x134>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a2:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <MX_GPIO_Init+0x134>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <MX_GPIO_Init+0x134>)
 80016ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_RST_Pin|COMMON_CONTROL_Pin, GPIO_PIN_RESET);
 80016b6:	4936      	ldr	r1, [pc, #216]	@ (8001790 <MX_GPIO_Init+0x138>)
 80016b8:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <MX_GPIO_Init+0x13c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	0018      	movs	r0, r3
 80016be:	f001 fda6 	bl	800320e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_D0_GPIO_Port, RF_D0_Pin, GPIO_PIN_RESET);
 80016c2:	2380      	movs	r3, #128	@ 0x80
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	4834      	ldr	r0, [pc, #208]	@ (8001798 <MX_GPIO_Init+0x140>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	0019      	movs	r1, r3
 80016cc:	f001 fd9f 	bl	800320e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEART_BEAT_GPIO_Port, HEART_BEAT_Pin, GPIO_PIN_SET);
 80016d0:	23a0      	movs	r3, #160	@ 0xa0
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	2201      	movs	r2, #1
 80016d6:	2108      	movs	r1, #8
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 fd98 	bl	800320e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	0159      	lsls	r1, r3, #5
 80016e2:	23a0      	movs	r3, #160	@ 0xa0
 80016e4:	05db      	lsls	r3, r3, #23
 80016e6:	2200      	movs	r2, #0
 80016e8:	0018      	movs	r0, r3
 80016ea:	f001 fd90 	bl	800320e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RF_RST_Pin|COMMON_CONTROL_Pin;
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <MX_GPIO_Init+0x138>)
 80016f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	2201      	movs	r2, #1
 80016f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	193b      	adds	r3, r7, r4
 8001708:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <MX_GPIO_Init+0x13c>)
 800170a:	0019      	movs	r1, r3
 800170c:	0010      	movs	r0, r2
 800170e:	f001 fbfd 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_D0_Pin;
 8001712:	0021      	movs	r1, r4
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0212      	lsls	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	000c      	movs	r4, r1
 800171e:	193b      	adds	r3, r7, r4
 8001720:	2201      	movs	r2, #1
 8001722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RF_D0_GPIO_Port, &GPIO_InitStruct);
 8001730:	193b      	adds	r3, r7, r4
 8001732:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <MX_GPIO_Init+0x140>)
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f001 fbe8 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = HEART_BEAT_Pin|RF_CS_Pin;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	4a17      	ldr	r2, [pc, #92]	@ (800179c <MX_GPIO_Init+0x144>)
 8001740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	193b      	adds	r3, r7, r4
 8001744:	2201      	movs	r2, #1
 8001746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	193b      	adds	r3, r7, r4
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	193b      	adds	r3, r7, r4
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	193a      	adds	r2, r7, r4
 8001756:	23a0      	movs	r3, #160	@ 0xa0
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f001 fbd5 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEVEL1_Pin|LEVEL2_Pin|LEVEL3_Pin|LEVEL4_Pin;
 8001762:	193b      	adds	r3, r7, r4
 8001764:	22f0      	movs	r2, #240	@ 0xf0
 8001766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	193b      	adds	r3, r7, r4
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	193b      	adds	r3, r7, r4
 8001770:	2201      	movs	r2, #1
 8001772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	193a      	adds	r2, r7, r4
 8001776:	23a0      	movs	r3, #160	@ 0xa0
 8001778:	05db      	lsls	r3, r3, #23
 800177a:	0011      	movs	r1, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f001 fbc5 	bl	8002f0c <HAL_GPIO_Init>

}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b009      	add	sp, #36	@ 0x24
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	40021000 	.word	0x40021000
 8001790:	00000201 	.word	0x00000201
 8001794:	50000400 	.word	0x50000400
 8001798:	50000800 	.word	0x50000800
 800179c:	00001008 	.word	0x00001008

080017a0 <readLevel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t readLevel(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(COMMON_CONTROL_GPIO_Port, COMMON_CONTROL_Pin, 0);
 80017ac:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <readLevel+0xb4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	2101      	movs	r1, #1
 80017b2:	0018      	movs	r0, r3
 80017b4:	f001 fd2b 	bl	800320e <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80017b8:	2396      	movs	r3, #150	@ 0x96
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 fc8b 	bl	80020d8 <HAL_Delay>
	if(!HAL_GPIO_ReadPin(LEVEL1_GPIO_Port, LEVEL1_Pin))
 80017c2:	23a0      	movs	r3, #160	@ 0xa0
 80017c4:	05db      	lsls	r3, r3, #23
 80017c6:	2110      	movs	r1, #16
 80017c8:	0018      	movs	r0, r3
 80017ca:	f001 fd03 	bl	80031d4 <HAL_GPIO_ReadPin>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d105      	bne.n	80017de <readLevel+0x3e>
		ret |= 0x01;
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	1dfa      	adds	r2, r7, #7
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	430a      	orrs	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(LEVEL2_GPIO_Port, LEVEL2_Pin))
 80017de:	23a0      	movs	r3, #160	@ 0xa0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	2120      	movs	r1, #32
 80017e4:	0018      	movs	r0, r3
 80017e6:	f001 fcf5 	bl	80031d4 <HAL_GPIO_ReadPin>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d105      	bne.n	80017fa <readLevel+0x5a>
		ret |= 0x02;
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	1dfa      	adds	r2, r7, #7
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	2102      	movs	r1, #2
 80017f6:	430a      	orrs	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(LEVEL3_GPIO_Port, LEVEL3_Pin))
 80017fa:	23a0      	movs	r3, #160	@ 0xa0
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	2140      	movs	r1, #64	@ 0x40
 8001800:	0018      	movs	r0, r3
 8001802:	f001 fce7 	bl	80031d4 <HAL_GPIO_ReadPin>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d105      	bne.n	8001816 <readLevel+0x76>
		ret |= 0x04;
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	1dfa      	adds	r2, r7, #7
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	2104      	movs	r1, #4
 8001812:	430a      	orrs	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
	if(!HAL_GPIO_ReadPin(LEVEL4_GPIO_Port, LEVEL4_Pin))
 8001816:	23a0      	movs	r3, #160	@ 0xa0
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	0018      	movs	r0, r3
 800181e:	f001 fcd9 	bl	80031d4 <HAL_GPIO_ReadPin>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d105      	bne.n	8001832 <readLevel+0x92>
		ret |= 0x08;
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	1dfa      	adds	r2, r7, #7
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	2108      	movs	r1, #8
 800182e:	430a      	orrs	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(COMMON_CONTROL_GPIO_Port, COMMON_CONTROL_Pin, 1);
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <readLevel+0xb4>)
 8001834:	2201      	movs	r2, #1
 8001836:	2101      	movs	r1, #1
 8001838:	0018      	movs	r0, r3
 800183a:	f001 fce8 	bl	800320e <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800183e:	2396      	movs	r3, #150	@ 0x96
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fc48 	bl	80020d8 <HAL_Delay>
	return ret;
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}
 8001854:	50000400 	.word	0x50000400

08001858 <enterShutDown>:

void enterShutDown(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	// Enable PWR clock
	    __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <enterShutDown+0x50>)
 8001860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <enterShutDown+0x50>)
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0549      	lsls	r1, r1, #21
 8001868:	430a      	orrs	r2, r1
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <enterShutDown+0x50>)
 800186e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	055b      	lsls	r3, r3, #21
 8001874:	4013      	ands	r3, r2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
	    HAL_SuspendTick();
 800187a:	f000 fc51 	bl	8002120 <HAL_SuspendTick>
	    // Clear reset flags after handling
	        __HAL_RCC_CLEAR_RESET_FLAGS();
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <enterShutDown+0x50>)
 8001880:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <enterShutDown+0x50>)
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	0409      	lsls	r1, r1, #16
 8001888:	430a      	orrs	r2, r1
 800188a:	661a      	str	r2, [r3, #96]	@ 0x60

	        // Enable wake-up pin (if using external wake-up)
	        HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1|PWR_FLAG_WUF);
 800188c:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <enterShutDown+0x54>)
 800188e:	0018      	movs	r0, r3
 8001890:	f001 fcf6 	bl	8003280 <HAL_PWR_DisableWakeUpPin>

	// Clear Wake-Up Flags
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <enterShutDown+0x58>)
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <enterShutDown+0x5c>)
 8001898:	619a      	str	r2, [r3, #24]
	    // Configure Low-Power Mode
	      //HAL_PWREx_EnableLowPowerRunMode();
	    // Enter Shutdown Mode
	      HAL_PWR_EnterSTANDBYMode();
 800189a:	f001 fd05 	bl	80032a8 <HAL_PWR_EnterSTANDBYMode>
	      /*HAL_PWR_EnterSHUTDOWNMode();
	        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);*/
}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	0001002b 	.word	0x0001002b
 80018b0:	40007000 	.word	0x40007000
 80018b4:	00010100 	.word	0x00010100

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b090      	sub	sp, #64	@ 0x40
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t levelVar, bufTx[5], counter = 0;
 80018be:	233f      	movs	r3, #63	@ 0x3f
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c6:	f000 fb81 	bl	8001fcc <HAL_Init>

  /* USER CODE BEGIN Init */
  myLoRa = newLoRa();
 80018ca:	4c71      	ldr	r4, [pc, #452]	@ (8001a90 <main+0x1d8>)
 80018cc:	003b      	movs	r3, r7
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff f92e 	bl	8000b30 <newLoRa>
 80018d4:	003a      	movs	r2, r7
 80018d6:	0023      	movs	r3, r4
 80018d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018da:	c313      	stmia	r3!, {r0, r1, r4}
 80018dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018de:	c313      	stmia	r3!, {r0, r1, r4}
 80018e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018e2:	c313      	stmia	r3!, {r0, r1, r4}
 80018e4:	ca03      	ldmia	r2!, {r0, r1}
 80018e6:	c303      	stmia	r3!, {r0, r1}
  myLoRa.CS_port         = RF_CS_GPIO_Port;
 80018e8:	4b69      	ldr	r3, [pc, #420]	@ (8001a90 <main+0x1d8>)
 80018ea:	22a0      	movs	r2, #160	@ 0xa0
 80018ec:	05d2      	lsls	r2, r2, #23
 80018ee:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = RF_CS_Pin;
 80018f0:	4b67      	ldr	r3, [pc, #412]	@ (8001a90 <main+0x1d8>)
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	0152      	lsls	r2, r2, #5
 80018f6:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RF_RST_GPIO_Port;
 80018f8:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <main+0x1d8>)
 80018fa:	4a66      	ldr	r2, [pc, #408]	@ (8001a94 <main+0x1dc>)
 80018fc:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RF_RST_Pin;
 80018fe:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <main+0x1d8>)
 8001900:	2280      	movs	r2, #128	@ 0x80
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = RF_D0_GPIO_Port;
 8001906:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <main+0x1d8>)
 8001908:	4a63      	ldr	r2, [pc, #396]	@ (8001a98 <main+0x1e0>)
 800190a:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = RF_D0_Pin;
 800190c:	4b60      	ldr	r3, [pc, #384]	@ (8001a90 <main+0x1d8>)
 800190e:	4a63      	ldr	r2, [pc, #396]	@ (8001a9c <main+0x1e4>)
 8001910:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001912:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <main+0x1d8>)
 8001914:	4a62      	ldr	r2, [pc, #392]	@ (8001aa0 <main+0x1e8>)
 8001916:	619a      	str	r2, [r3, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 f8c6 	bl	8001aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191c:	f7ff fe9c 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 8001920:	f7ff fe7c 	bl	800161c <MX_DMA_Init>
  MX_SPI1_Init();
 8001924:	f000 f992 	bl	8001c4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001928:	f000 fa76 	bl	8001e18 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800192c:	f7ff fd9e 	bl	800146c <MX_ADC1_Init>
  MX_RTC_Init();
 8001930:	f000 f90e 	bl	8001b50 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LoRa_init(&myLoRa);
 8001934:	4b56      	ldr	r3, [pc, #344]	@ (8001a90 <main+0x1d8>)
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff fca4 	bl	8001284 <LoRa_init>
  HAL_Delay(500);
 800193c:	23fa      	movs	r3, #250	@ 0xfa
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	0018      	movs	r0, r3
 8001942:	f000 fbc9 	bl	80020d8 <HAL_Delay>
  LoRa_startReceiving(&myLoRa);
 8001946:	4b52      	ldr	r3, [pc, #328]	@ (8001a90 <main+0x1d8>)
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff fc8e 	bl	800126a <LoRa_startReceiving>
  uint8_t packet_size = 0;*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) {
 800194e:	4b55      	ldr	r3, [pc, #340]	@ (8001aa4 <main+0x1ec>)
 8001950:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	04db      	lsls	r3, r3, #19
 8001956:	4013      	ands	r3, r2
 8001958:	d012      	beq.n	8001980 <main+0xc8>
		for(int i = 0; i < 10; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800195e:	e00b      	b.n	8001978 <main+0xc0>
		{
		  HAL_GPIO_TogglePin(HEART_BEAT_GPIO_Port, HEART_BEAT_Pin);
 8001960:	23a0      	movs	r3, #160	@ 0xa0
 8001962:	05db      	lsls	r3, r3, #23
 8001964:	2108      	movs	r1, #8
 8001966:	0018      	movs	r0, r3
 8001968:	f001 fc6e 	bl	8003248 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	@ 0x64
 800196e:	f000 fbb3 	bl	80020d8 <HAL_Delay>
		for(int i = 0; i < 10; i++)
 8001972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001974:	3301      	adds	r3, #1
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800197a:	2b09      	cmp	r3, #9
 800197c:	ddf0      	ble.n	8001960 <main+0xa8>
 800197e:	e048      	b.n	8001a12 <main+0x15a>
		}
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) {
 8001980:	4b48      	ldr	r3, [pc, #288]	@ (8001aa4 <main+0x1ec>)
 8001982:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	059b      	lsls	r3, r3, #22
 8001988:	4013      	ands	r3, r2
 800198a:	d004      	beq.n	8001996 <main+0xde>
	    counter = 2;
 800198c:	233f      	movs	r3, #63	@ 0x3f
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e03d      	b.n	8001a12 <main+0x15a>
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PWRRST)) {
 8001996:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <main+0x1ec>)
 8001998:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	051b      	lsls	r3, r3, #20
 800199e:	4013      	ands	r3, r2
 80019a0:	d004      	beq.n	80019ac <main+0xf4>
	    counter = 3;
 80019a2:	233f      	movs	r3, #63	@ 0x3f
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2203      	movs	r2, #3
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e032      	b.n	8001a12 <main+0x15a>
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) {
 80019ac:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa4 <main+0x1ec>)
 80019ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	055b      	lsls	r3, r3, #21
 80019b4:	4013      	ands	r3, r2
 80019b6:	d004      	beq.n	80019c2 <main+0x10a>
	    counter = 4;
 80019b8:	233f      	movs	r3, #63	@ 0x3f
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2204      	movs	r2, #4
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e027      	b.n	8001a12 <main+0x15a>
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) {
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <main+0x1ec>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da04      	bge.n	80019d4 <main+0x11c>
	    counter = 5;
 80019ca:	233f      	movs	r3, #63	@ 0x3f
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	2205      	movs	r2, #5
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e01e      	b.n	8001a12 <main+0x15a>
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY)) {
 80019d4:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <main+0x1ec>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d004      	beq.n	80019e8 <main+0x130>
	    counter = 5;
 80019de:	233f      	movs	r3, #63	@ 0x3f
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2205      	movs	r2, #5
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e014      	b.n	8001a12 <main+0x15a>
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) {
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <main+0x1ec>)
 80019ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	05db      	lsls	r3, r3, #23
 80019f0:	4013      	ands	r3, r2
 80019f2:	d004      	beq.n	80019fe <main+0x146>
	    counter = 5;
 80019f4:	233f      	movs	r3, #63	@ 0x3f
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	2205      	movs	r2, #5
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e009      	b.n	8001a12 <main+0x15a>
	} else if (__HAL_RCC_GET_FLAG(RCC_FLAG_OBLRST)){
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <main+0x1ec>)
 8001a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	049b      	lsls	r3, r3, #18
 8001a06:	4013      	ands	r3, r2
 8001a08:	d003      	beq.n	8001a12 <main+0x15a>
	    counter = 4;
 8001a0a:	233f      	movs	r3, #63	@ 0x3f
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2204      	movs	r2, #4
 8001a10:	701a      	strb	r2, [r3, #0]
		  /*HAL_GPIO_WritePin(HEART_BEAT_GPIO_Port, HEART_BEAT_Pin, 0);
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(HEART_BEAT_GPIO_Port, HEART_BEAT_Pin, 1);
		  HAL_Delay(1000);*/
	  }
	  levelVar = readLevel();
 8001a12:	2537      	movs	r5, #55	@ 0x37
 8001a14:	197c      	adds	r4, r7, r5
 8001a16:	f7ff fec3 	bl	80017a0 <readLevel>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	7023      	strb	r3, [r4, #0]
	  bufTx[0] = (levelVar/10)|0x30;
 8001a1e:	002c      	movs	r4, r5
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	210a      	movs	r1, #10
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7fe fb6a 	bl	8000100 <__udivsi3>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2230      	movs	r2, #48	@ 0x30
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	2530      	movs	r5, #48	@ 0x30
 8001a38:	197b      	adds	r3, r7, r5
 8001a3a:	701a      	strb	r2, [r3, #0]
	  bufTx[1] = (levelVar%10)|0x30;
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	210a      	movs	r1, #10
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7fe fbe2 	bl	800020c <__aeabi_uidivmod>
 8001a48:	000b      	movs	r3, r1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2230      	movs	r2, #48	@ 0x30
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	197b      	adds	r3, r7, r5
 8001a54:	705a      	strb	r2, [r3, #1]
	  LoRa_transmit(&myLoRa, (uint8_t*)bufTx, 2, 100);
 8001a56:	1979      	adds	r1, r7, r5
 8001a58:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <main+0x1d8>)
 8001a5a:	2364      	movs	r3, #100	@ 0x64
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f7ff fb99 	bl	8001194 <LoRa_transmit>
	  if(counter < 3)
 8001a62:	223f      	movs	r2, #63	@ 0x3f
 8001a64:	18bb      	adds	r3, r7, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d806      	bhi.n	8001a7a <main+0x1c2>
		  counter++;
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	18bb      	adds	r3, r7, r2
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	3201      	adds	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e005      	b.n	8001a86 <main+0x1ce>
	  else
	  {
		  counter = 0;
 8001a7a:	233f      	movs	r3, #63	@ 0x3f
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
		  enterShutDown();
 8001a82:	f7ff fee9 	bl	8001858 <enterShutDown>
	  }
	  HAL_Delay(100);
 8001a86:	2064      	movs	r0, #100	@ 0x64
 8001a88:	f000 fb26 	bl	80020d8 <HAL_Delay>
	  levelVar = readLevel();
 8001a8c:	e7c1      	b.n	8001a12 <main+0x15a>
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	200000e8 	.word	0x200000e8
 8001a94:	50000400 	.word	0x50000400
 8001a98:	50000800 	.word	0x50000800
 8001a9c:	ffff8000 	.word	0xffff8000
 8001aa0:	20000140 	.word	0x20000140
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b093      	sub	sp, #76	@ 0x4c
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	2414      	movs	r4, #20
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	2334      	movs	r3, #52	@ 0x34
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	2100      	movs	r1, #0
 8001aba:	f004 f883 	bl	8005bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	2310      	movs	r3, #16
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f004 f87c 	bl	8005bc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f001 fc03 	bl	80032dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	220a      	movs	r2, #10
 8001ada:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	2280      	movs	r2, #128	@ 0x80
 8001ae8:	0192      	lsls	r2, r2, #6
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	2240      	movs	r2, #64	@ 0x40
 8001af0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	2201      	movs	r2, #1
 8001af6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	0018      	movs	r0, r3
 8001b02:	f001 fc37 	bl	8003374 <HAL_RCC_OscConfig>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b0a:	f000 f81a 	bl	8001b42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f001 ff31 	bl	8003994 <HAL_RCC_ClockConfig>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b36:	f000 f804 	bl	8001b42 <Error_Handler>
  }
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b013      	add	sp, #76	@ 0x4c
 8001b40:	bd90      	pop	{r4, r7, pc}

08001b42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b46:	b672      	cpsid	i
}
 8001b48:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	e7fd      	b.n	8001b4a <Error_Handler+0x8>
	...

08001b50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b56:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <MX_RTC_Init+0x6c>)
 8001b58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b62:	227f      	movs	r2, #127	@ 0x7f
 8001b64:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b68:	22ff      	movs	r2, #255	@ 0xff
 8001b6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	05d2      	lsls	r2, r2, #23
 8001b84:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b86:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f002 f9d0 	bl	8003f34 <HAL_RTC_Init>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d001      	beq.n	8001b9c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f7ff ffd3 	bl	8001b42 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_RTC_Init+0x68>)
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	2114      	movs	r1, #20
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f002 fb14 	bl	80041d0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001bac:	f7ff ffc9 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	20000114 	.word	0x20000114
 8001bbc:	40002800 	.word	0x40002800

08001bc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	@ 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	2410      	movs	r4, #16
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2318      	movs	r3, #24
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f003 fff6 	bl	8005bc4 <memset>
  if(rtcHandle->Instance==RTC)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <HAL_RTC_MspInit+0x84>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12c      	bne.n	8001c3c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	0292      	lsls	r2, r2, #10
 8001be8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2280      	movs	r2, #128	@ 0x80
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f002 f877 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bfe:	f7ff ffa0 	bl	8001b42 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_RTC_MspInit+0x88>)
 8001c04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_RTC_MspInit+0x88>)
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0209      	lsls	r1, r1, #8
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_RTC_MspInit+0x88>)
 8001c12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_RTC_MspInit+0x88>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	00c9      	lsls	r1, r1, #3
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_RTC_MspInit+0x88>)
 8001c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2002      	movs	r0, #2
 8001c32:	f000 ffad 	bl	8002b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001c36:	2002      	movs	r0, #2
 8001c38:	f000 ffbf 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c3c:	46c0      	nop			@ (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b00b      	add	sp, #44	@ 0x2c
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	40002800 	.word	0x40002800
 8001c48:	40021000 	.word	0x40021000

08001c4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c52:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <MX_SPI1_Init+0x78>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c58:	2282      	movs	r2, #130	@ 0x82
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c66:	22e0      	movs	r2, #224	@ 0xe0
 8001c68:	00d2      	lsls	r2, r2, #3
 8001c6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c7a:	2280      	movs	r2, #128	@ 0x80
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <MX_SPI1_Init+0x74>)
 8001cac:	0018      	movs	r0, r3
 8001cae:	f002 fb4f 	bl	8004350 <HAL_SPI_Init>
 8001cb2:	1e03      	subs	r3, r0, #0
 8001cb4:	d001      	beq.n	8001cba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cb6:	f7ff ff44 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000140 	.word	0x20000140
 8001cc4:	40013000 	.word	0x40013000

08001cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b08b      	sub	sp, #44	@ 0x2c
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	2414      	movs	r4, #20
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	2314      	movs	r3, #20
 8001cd8:	001a      	movs	r2, r3
 8001cda:	2100      	movs	r1, #0
 8001cdc:	f003 ff72 	bl	8005bc4 <memset>
  if(spiHandle->Instance==SPI1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d54 <HAL_SPI_MspInit+0x8c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d130      	bne.n	8001d4c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_SPI_MspInit+0x90>)
 8001cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_SPI_MspInit+0x90>)
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	0149      	lsls	r1, r1, #5
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_SPI_MspInit+0x90>)
 8001cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	015b      	lsls	r3, r3, #5
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <HAL_SPI_MspInit+0x90>)
 8001d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_SPI_MspInit+0x90>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d12:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_SPI_MspInit+0x90>)
 8001d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d16:	2201      	movs	r2, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8001d1e:	0021      	movs	r1, r4
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_SPI_MspInit+0x94>)
 8001d24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	2202      	movs	r2, #2
 8001d2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	187a      	adds	r2, r7, r1
 8001d40:	23a0      	movs	r3, #160	@ 0xa0
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	0011      	movs	r1, r2
 8001d46:	0018      	movs	r0, r3
 8001d48:	f001 f8e0 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b00b      	add	sp, #44	@ 0x2c
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	40013000 	.word	0x40013000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	00000806 	.word	0x00000806

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_MspInit+0x44>)
 8001d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_MspInit+0x44>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_MspInit+0x44>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_MspInit+0x44>)
 8001d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_MspInit+0x44>)
 8001d84:	2180      	movs	r1, #128	@ 0x80
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_MspInit+0x44>)
 8001d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	055b      	lsls	r3, r3, #21
 8001d94:	4013      	ands	r3, r2
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	40021000 	.word	0x40021000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dac:	46c0      	nop			@ (mov r8, r8)
 8001dae:	e7fd      	b.n	8001dac <NMI_Handler+0x4>

08001db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	e7fd      	b.n	8001db4 <HardFault_Handler+0x4>

08001db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dbc:	46c0      	nop			@ (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f000 f966 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	46c0      	nop			@ (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <RTC_TAMP_IRQHandler+0x14>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f002 fa8e 	bl	8004304 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	20000114 	.word	0x20000114

08001df4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <DMA1_Channel1_IRQHandler+0x14>)
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 ff84 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	2000008c 	.word	0x2000008c

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e1e:	4a24      	ldr	r2, [pc, #144]	@ (8001eb0 <MX_USART1_UART_Init+0x98>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e22:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e24:	2296      	movs	r2, #150	@ 0x96
 8001e26:	0192      	lsls	r2, r2, #6
 8001e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f003 f9a0 	bl	80051a8 <HAL_UART_Init>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e6c:	f7ff fe69 	bl	8001b42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e70:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e72:	2100      	movs	r1, #0
 8001e74:	0018      	movs	r0, r3
 8001e76:	f003 fdc5 	bl	8005a04 <HAL_UARTEx_SetTxFifoThreshold>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e7e:	f7ff fe60 	bl	8001b42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e84:	2100      	movs	r1, #0
 8001e86:	0018      	movs	r0, r3
 8001e88:	f003 fdfc 	bl	8005a84 <HAL_UARTEx_SetRxFifoThreshold>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f7ff fe57 	bl	8001b42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <MX_USART1_UART_Init+0x94>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f003 fd7a 	bl	8005990 <HAL_UARTEx_DisableFifoMode>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ea0:	f7ff fe4f 	bl	8001b42 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	200001a4 	.word	0x200001a4
 8001eb0:	40013800 	.word	0x40013800

08001eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b091      	sub	sp, #68	@ 0x44
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	232c      	movs	r3, #44	@ 0x2c
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	2314      	movs	r3, #20
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f003 fe7c 	bl	8005bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	2414      	movs	r4, #20
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	2318      	movs	r3, #24
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	f003 fe74 	bl	8005bc4 <memset>
  if(uartHandle->Instance==USART1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_UART_MspInit+0xb8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d13d      	bne.n	8001f62 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ee6:	193b      	adds	r3, r7, r4
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f001 fef7 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	1e03      	subs	r3, r0, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001efe:	f7ff fe20 	bl	8001b42 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_UART_MspInit+0xbc>)
 8001f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_UART_MspInit+0xbc>)
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	01c9      	lsls	r1, r1, #7
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <HAL_UART_MspInit+0xbc>)
 8001f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	01db      	lsls	r3, r3, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_UART_MspInit+0xbc>)
 8001f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <HAL_UART_MspInit+0xbc>)
 8001f24:	2102      	movs	r1, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_UART_MspInit+0xbc>)
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001f36:	212c      	movs	r1, #44	@ 0x2c
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	22c0      	movs	r2, #192	@ 0xc0
 8001f3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2202      	movs	r2, #2
 8001f42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	4a06      	ldr	r2, [pc, #24]	@ (8001f74 <HAL_UART_MspInit+0xc0>)
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f000 ffd5 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b011      	add	sp, #68	@ 0x44
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40021000 	.word	0x40021000
 8001f74:	50000400 	.word	0x50000400

08001f78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f78:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f7c:	f7ff ff46 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <LoopForever+0xe>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc4 <LoopForever+0x16>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fa6:	f003 fe15 	bl	8005bd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001faa:	f7ff fc85 	bl	80018b8 <main>

08001fae <LoopForever>:

LoopForever:
  b LoopForever
 8001fae:	e7fe      	b.n	8001fae <LoopForever>
  ldr   r0, =_estack
 8001fb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fbc:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 8001fc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fc4:	2000023c 	.word	0x2000023c

08001fc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_Init+0x3c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Init+0x3c>)
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	0049      	lsls	r1, r1, #1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f000 f810 	bl	800200c <HAL_InitTick>
 8001fec:	1e03      	subs	r3, r0, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e001      	b.n	8001ffc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff feb2 	bl	8001d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	781b      	ldrb	r3, [r3, #0]
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40022000 	.word	0x40022000

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800201c:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <HAL_InitTick+0x88>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d02b      	beq.n	800207c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <HAL_InitTick+0x8c>)
 8002026:	681c      	ldr	r4, [r3, #0]
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <HAL_InitTick+0x88>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	0019      	movs	r1, r3
 800202e:	23fa      	movs	r3, #250	@ 0xfa
 8002030:	0098      	lsls	r0, r3, #2
 8002032:	f7fe f865 	bl	8000100 <__udivsi3>
 8002036:	0003      	movs	r3, r0
 8002038:	0019      	movs	r1, r3
 800203a:	0020      	movs	r0, r4
 800203c:	f7fe f860 	bl	8000100 <__udivsi3>
 8002040:	0003      	movs	r3, r0
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fdc9 	bl	8002bda <HAL_SYSTICK_Config>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d112      	bne.n	8002072 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d80a      	bhi.n	8002068 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	2301      	movs	r3, #1
 8002056:	425b      	negs	r3, r3
 8002058:	2200      	movs	r2, #0
 800205a:	0018      	movs	r0, r3
 800205c:	f000 fd98 	bl	8002b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_InitTick+0x90>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00d      	b.n	8002084 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e008      	b.n	8002084 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002072:	230f      	movs	r3, #15
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e003      	b.n	8002084 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b005      	add	sp, #20
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	20000008 	.word	0x20000008
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <HAL_IncTick+0x1c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	001a      	movs	r2, r3
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_IncTick+0x20>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	18d2      	adds	r2, r2, r3
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_IncTick+0x20>)
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000238 	.word	0x20000238

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b02      	ldr	r3, [pc, #8]	@ (80020d4 <HAL_GetTick+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	20000238 	.word	0x20000238

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3301      	adds	r3, #1
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	001a      	movs	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	f7ff ffe0 	bl	80020c4 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <HAL_SuspendTick+0x18>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_SuspendTick+0x18>)
 800212a:	2102      	movs	r1, #2
 800212c:	438a      	bics	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
}
 8002130:	46c0      	nop			@ (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	e000e010 	.word	0xe000e010

0800213c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800214c:	401a      	ands	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	601a      	str	r2, [r3, #0]
}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	fe3fffff 	.word	0xfe3fffff

08002164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	23e0      	movs	r3, #224	@ 0xe0
 8002172:	045b      	lsls	r3, r3, #17
 8002174:	4013      	ands	r3, r2
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}

0800217e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	2104      	movs	r1, #4
 8002192:	400a      	ands	r2, r1
 8002194:	2107      	movs	r1, #7
 8002196:	4091      	lsls	r1, r2
 8002198:	000a      	movs	r2, r1
 800219a:	43d2      	mvns	r2, r2
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2104      	movs	r1, #4
 80021a2:	400b      	ands	r3, r1
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4099      	lsls	r1, r3
 80021a8:	000b      	movs	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	2104      	movs	r1, #4
 80021ca:	400a      	ands	r2, r1
 80021cc:	2107      	movs	r1, #7
 80021ce:	4091      	lsls	r1, r2
 80021d0:	000a      	movs	r2, r1
 80021d2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2104      	movs	r1, #4
 80021d8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021da:	40da      	lsrs	r2, r3
 80021dc:	0013      	movs	r3, r2
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	211f      	movs	r1, #31
 80021fa:	400a      	ands	r2, r1
 80021fc:	210f      	movs	r1, #15
 80021fe:	4091      	lsls	r1, r2
 8002200:	000a      	movs	r2, r1
 8002202:	43d2      	mvns	r2, r2
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	210f      	movs	r1, #15
 800220c:	4019      	ands	r1, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	201f      	movs	r0, #31
 8002212:	4003      	ands	r3, r0
 8002214:	4099      	lsls	r1, r3
 8002216:	000b      	movs	r3, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}

08002226 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	035b      	lsls	r3, r3, #13
 8002238:	0b5b      	lsrs	r3, r3, #13
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	0352      	lsls	r2, r2, #13
 800225a:	0b52      	lsrs	r2, r2, #13
 800225c:	43d2      	mvns	r2, r2
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	0212      	lsls	r2, r2, #8
 8002280:	43d2      	mvns	r2, r2
 8002282:	401a      	ands	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	400b      	ands	r3, r1
 800228c:	4904      	ldr	r1, [pc, #16]	@ (80022a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800228e:	400b      	ands	r3, r1
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b004      	add	sp, #16
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	07ffff00 	.word	0x07ffff00

080022a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	0552      	lsls	r2, r2, #21
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	6fffffe8 	.word	0x6fffffe8

080022cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	401a      	ands	r2, r3
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	055b      	lsls	r3, r3, #21
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d101      	bne.n	80022ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <LL_ADC_IsEnabled+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_IsEnabled+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	2b04      	cmp	r3, #4
 8002328:	d101      	bne.n	800232e <LL_ADC_REG_IsConversionOngoing+0x18>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	231f      	movs	r3, #31
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e17f      	b.n	800265e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff f8e5 	bl	8001538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2254      	movs	r2, #84	@ 0x54
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff ffa3 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d115      	bne.n	80023b6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	0018      	movs	r0, r3
 8002390:	f7ff ff88 	bl	80022a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002394:	4bb4      	ldr	r3, [pc, #720]	@ (8002668 <HAL_ADC_Init+0x330>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	49b4      	ldr	r1, [pc, #720]	@ (800266c <HAL_ADC_Init+0x334>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7fd feb0 	bl	8000100 <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff ff86 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	2210      	movs	r2, #16
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	2201      	movs	r2, #1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023dc:	231f      	movs	r3, #31
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff ff94 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80023ee:	0003      	movs	r3, r0
 80023f0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	2210      	movs	r2, #16
 80023f8:	4013      	ands	r3, r2
 80023fa:	d000      	beq.n	80023fe <HAL_ADC_Init+0xc6>
 80023fc:	e122      	b.n	8002644 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d000      	beq.n	8002406 <HAL_ADC_Init+0xce>
 8002404:	e11e      	b.n	8002644 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	4a99      	ldr	r2, [pc, #612]	@ (8002670 <HAL_ADC_Init+0x338>)
 800240c:	4013      	ands	r3, r2
 800240e:	2202      	movs	r2, #2
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff ff6a 	bl	80022f4 <LL_ADC_IsEnabled>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d000      	beq.n	8002426 <HAL_ADC_Init+0xee>
 8002424:	e0ad      	b.n	8002582 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7e1b      	ldrb	r3, [r3, #24]
 800242e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002430:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7e5b      	ldrb	r3, [r3, #25]
 8002436:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002438:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e9b      	ldrb	r3, [r3, #26]
 800243e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002440:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_ADC_Init+0x118>
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	e000      	b.n	8002452 <HAL_ADC_Init+0x11a>
 8002450:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002452:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002458:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	da04      	bge.n	800246c <HAL_ADC_Init+0x134>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	e001      	b.n	8002470 <HAL_ADC_Init+0x138>
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002470:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	212c      	movs	r1, #44	@ 0x2c
 8002476:	5c5b      	ldrb	r3, [r3, r1]
 8002478:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800247a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	5c9b      	ldrb	r3, [r3, r2]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d115      	bne.n	80024b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e9b      	ldrb	r3, [r3, #26]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2280      	movs	r2, #128	@ 0x80
 8002498:	0252      	lsls	r2, r2, #9
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	e00b      	b.n	80024b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a4:	2220      	movs	r2, #32
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	2201      	movs	r2, #1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024c4:	23e0      	movs	r3, #224	@ 0xe0
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <HAL_ADC_Init+0x33c>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0f9b      	lsrs	r3, r3, #30
 80024f2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024f8:	4313      	orrs	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	223c      	movs	r2, #60	@ 0x3c
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d111      	bne.n	800252e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	0f9b      	lsrs	r3, r3, #30
 8002510:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002516:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800251c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002522:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	2201      	movs	r2, #1
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a50      	ldr	r2, [pc, #320]	@ (8002678 <HAL_ADC_Init+0x340>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	430a      	orrs	r2, r1
 8002542:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	23c0      	movs	r3, #192	@ 0xc0
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	429a      	cmp	r2, r3
 800254e:	d018      	beq.n	8002582 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	05db      	lsls	r3, r3, #23
 8002558:	429a      	cmp	r2, r3
 800255a:	d012      	beq.n	8002582 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	429a      	cmp	r2, r3
 8002566:	d00c      	beq.n	8002582 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002568:	4b44      	ldr	r3, [pc, #272]	@ (800267c <HAL_ADC_Init+0x344>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a44      	ldr	r2, [pc, #272]	@ (8002680 <HAL_ADC_Init+0x348>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	23f0      	movs	r3, #240	@ 0xf0
 8002578:	039b      	lsls	r3, r3, #14
 800257a:	401a      	ands	r2, r3
 800257c:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <HAL_ADC_Init+0x344>)
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258a:	001a      	movs	r2, r3
 800258c:	2100      	movs	r1, #0
 800258e:	f7ff fdf6 	bl	800217e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259a:	493a      	ldr	r1, [pc, #232]	@ (8002684 <HAL_ADC_Init+0x34c>)
 800259c:	001a      	movs	r2, r3
 800259e:	f7ff fdee 	bl	800217e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2110      	movs	r1, #16
 80025b6:	4249      	negs	r1, r1
 80025b8:	430a      	orrs	r2, r1
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80025bc:	e018      	b.n	80025f0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	039b      	lsls	r3, r3, #14
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d112      	bne.n	80025f0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	221c      	movs	r2, #28
 80025da:	4013      	ands	r3, r2
 80025dc:	2210      	movs	r2, #16
 80025de:	4252      	negs	r2, r2
 80025e0:	409a      	lsls	r2, r3
 80025e2:	0011      	movs	r1, r2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2100      	movs	r1, #0
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7ff fdde 	bl	80021b8 <LL_ADC_GetSamplingTimeCommonChannels>
 80025fc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002602:	429a      	cmp	r2, r3
 8002604:	d10b      	bne.n	800261e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	2203      	movs	r2, #3
 8002612:	4393      	bics	r3, r2
 8002614:	2201      	movs	r2, #1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800261c:	e01c      	b.n	8002658 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	2212      	movs	r2, #18
 8002624:	4393      	bics	r3, r2
 8002626:	2210      	movs	r2, #16
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2201      	movs	r2, #1
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002642:	e009      	b.n	8002658 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	2210      	movs	r2, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002650:	231f      	movs	r3, #31
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002658:	231f      	movs	r3, #31
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b008      	add	sp, #32
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	20000000 	.word	0x20000000
 800266c:	00030d40 	.word	0x00030d40
 8002670:	fffffefd 	.word	0xfffffefd
 8002674:	ffde0201 	.word	0xffde0201
 8002678:	1ffffc02 	.word	0x1ffffc02
 800267c:	40012708 	.word	0x40012708
 8002680:	ffc3ffff 	.word	0xffc3ffff
 8002684:	07ffff04 	.word	0x07ffff04

08002688 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002692:	2317      	movs	r3, #23
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2254      	movs	r2, #84	@ 0x54
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x24>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e1c0      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x3a6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2254      	movs	r2, #84	@ 0x54
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff fe2c 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d000      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x3c>
 80026c2:	e1a3      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d100      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x46>
 80026cc:	e143      	b.n	8002956 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d004      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026de:	4ac1      	ldr	r2, [pc, #772]	@ (80029e4 <HAL_ADC_ConfigChannel+0x35c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d108      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0019      	movs	r1, r3
 80026ee:	0010      	movs	r0, r2
 80026f0:	f7ff fd99 	bl	8002226 <LL_ADC_REG_SetSequencerChAdd>
 80026f4:	e0c9      	b.n	800288a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	211f      	movs	r1, #31
 8002700:	400b      	ands	r3, r1
 8002702:	210f      	movs	r1, #15
 8002704:	4099      	lsls	r1, r3
 8002706:	000b      	movs	r3, r1
 8002708:	43db      	mvns	r3, r3
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	035b      	lsls	r3, r3, #13
 8002714:	0b5b      	lsrs	r3, r3, #13
 8002716:	d105      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x9c>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	221f      	movs	r2, #31
 8002720:	4013      	ands	r3, r2
 8002722:	e098      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d000      	beq.n	8002730 <HAL_ADC_ConfigChannel+0xa8>
 800272e:	e091      	b.n	8002854 <HAL_ADC_ConfigChannel+0x1cc>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2202      	movs	r2, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d000      	beq.n	800273c <HAL_ADC_ConfigChannel+0xb4>
 800273a:	e089      	b.n	8002850 <HAL_ADC_ConfigChannel+0x1c8>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d000      	beq.n	8002748 <HAL_ADC_ConfigChannel+0xc0>
 8002746:	e081      	b.n	800284c <HAL_ADC_ConfigChannel+0x1c4>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	d000      	beq.n	8002754 <HAL_ADC_ConfigChannel+0xcc>
 8002752:	e079      	b.n	8002848 <HAL_ADC_ConfigChannel+0x1c0>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2210      	movs	r2, #16
 800275a:	4013      	ands	r3, r2
 800275c:	d000      	beq.n	8002760 <HAL_ADC_ConfigChannel+0xd8>
 800275e:	e071      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1bc>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2220      	movs	r2, #32
 8002766:	4013      	ands	r3, r2
 8002768:	d000      	beq.n	800276c <HAL_ADC_ConfigChannel+0xe4>
 800276a:	e069      	b.n	8002840 <HAL_ADC_ConfigChannel+0x1b8>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2240      	movs	r2, #64	@ 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	d000      	beq.n	8002778 <HAL_ADC_ConfigChannel+0xf0>
 8002776:	e061      	b.n	800283c <HAL_ADC_ConfigChannel+0x1b4>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2280      	movs	r2, #128	@ 0x80
 800277e:	4013      	ands	r3, r2
 8002780:	d000      	beq.n	8002784 <HAL_ADC_ConfigChannel+0xfc>
 8002782:	e059      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1b0>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d151      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1ac>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4013      	ands	r3, r2
 800279a:	d149      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1a8>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4013      	ands	r3, r2
 80027a6:	d141      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1a4>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d139      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1a0>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	@ 0x80
 80027ba:	015b      	lsls	r3, r3, #5
 80027bc:	4013      	ands	r3, r2
 80027be:	d131      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x19c>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	019b      	lsls	r3, r3, #6
 80027c8:	4013      	ands	r3, r2
 80027ca:	d129      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x198>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	01db      	lsls	r3, r3, #7
 80027d4:	4013      	ands	r3, r2
 80027d6:	d121      	bne.n	800281c <HAL_ADC_ConfigChannel+0x194>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	4013      	ands	r3, r2
 80027e2:	d119      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x190>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	4013      	ands	r3, r2
 80027ee:	d111      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x18c>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	4013      	ands	r3, r2
 80027fa:	d109      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x188>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	02db      	lsls	r3, r3, #11
 8002804:	4013      	ands	r3, r2
 8002806:	d001      	beq.n	800280c <HAL_ADC_ConfigChannel+0x184>
 8002808:	2312      	movs	r3, #18
 800280a:	e024      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 800280c:	2300      	movs	r3, #0
 800280e:	e022      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002810:	2311      	movs	r3, #17
 8002812:	e020      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002814:	2310      	movs	r3, #16
 8002816:	e01e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002818:	230f      	movs	r3, #15
 800281a:	e01c      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 800281c:	230e      	movs	r3, #14
 800281e:	e01a      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002820:	230d      	movs	r3, #13
 8002822:	e018      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002824:	230c      	movs	r3, #12
 8002826:	e016      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002828:	230b      	movs	r3, #11
 800282a:	e014      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 800282c:	230a      	movs	r3, #10
 800282e:	e012      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002830:	2309      	movs	r3, #9
 8002832:	e010      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002834:	2308      	movs	r3, #8
 8002836:	e00e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002838:	2307      	movs	r3, #7
 800283a:	e00c      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 800283c:	2306      	movs	r3, #6
 800283e:	e00a      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002840:	2305      	movs	r3, #5
 8002842:	e008      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002844:	2304      	movs	r3, #4
 8002846:	e006      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002848:	2303      	movs	r3, #3
 800284a:	e004      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 800284c:	2302      	movs	r3, #2
 800284e:	e002      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1ce>
 8002854:	2300      	movs	r3, #0
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6852      	ldr	r2, [r2, #4]
 800285a:	201f      	movs	r0, #31
 800285c:	4002      	ands	r2, r0
 800285e:	4093      	lsls	r3, r2
 8002860:	000a      	movs	r2, r1
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	429a      	cmp	r2, r3
 8002876:	d808      	bhi.n	800288a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	001a      	movs	r2, r3
 8002886:	f7ff fcae 	bl	80021e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	001a      	movs	r2, r3
 8002898:	f7ff fce8 	bl	800226c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db00      	blt.n	80028a6 <HAL_ADC_ConfigChannel+0x21e>
 80028a4:	e0bc      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a6:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fc5b 	bl	8002164 <LL_ADC_GetCommonPathInternalCh>
 80028ae:	0003      	movs	r3, r0
 80028b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4d      	ldr	r2, [pc, #308]	@ (80029ec <HAL_ADC_ConfigChannel+0x364>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d122      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028c4:	d11d      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	0412      	lsls	r2, r2, #16
 80028cc:	4313      	orrs	r3, r2
 80028ce:	4a46      	ldr	r2, [pc, #280]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 80028d0:	0019      	movs	r1, r3
 80028d2:	0010      	movs	r0, r2
 80028d4:	f7ff fc32 	bl	800213c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d8:	4b45      	ldr	r3, [pc, #276]	@ (80029f0 <HAL_ADC_ConfigChannel+0x368>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4945      	ldr	r1, [pc, #276]	@ (80029f4 <HAL_ADC_ConfigChannel+0x36c>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc0e 	bl	8000100 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	0013      	movs	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	189b      	adds	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028f2:	e002      	b.n	80028fa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f9      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002900:	e08e      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a3c      	ldr	r2, [pc, #240]	@ (80029f8 <HAL_ADC_ConfigChannel+0x370>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d10e      	bne.n	800292a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	045b      	lsls	r3, r3, #17
 8002912:	4013      	ands	r3, r2
 8002914:	d109      	bne.n	800292a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2280      	movs	r2, #128	@ 0x80
 800291a:	0452      	lsls	r2, r2, #17
 800291c:	4313      	orrs	r3, r2
 800291e:	4a32      	ldr	r2, [pc, #200]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 8002920:	0019      	movs	r1, r3
 8002922:	0010      	movs	r0, r2
 8002924:	f7ff fc0a 	bl	800213c <LL_ADC_SetCommonPathInternalCh>
 8002928:	e07a      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a33      	ldr	r2, [pc, #204]	@ (80029fc <HAL_ADC_ConfigChannel+0x374>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d000      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x2ae>
 8002934:	e074      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	03db      	lsls	r3, r3, #15
 800293c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800293e:	d000      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x2ba>
 8002940:	e06e      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2280      	movs	r2, #128	@ 0x80
 8002946:	03d2      	lsls	r2, r2, #15
 8002948:	4313      	orrs	r3, r2
 800294a:	4a27      	ldr	r2, [pc, #156]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f7ff fbf4 	bl	800213c <LL_ADC_SetCommonPathInternalCh>
 8002954:	e064      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	429a      	cmp	r2, r3
 8002960:	d004      	beq.n	800296c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002966:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <HAL_ADC_ConfigChannel+0x35c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d107      	bne.n	800297c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0019      	movs	r1, r3
 8002976:	0010      	movs	r0, r2
 8002978:	f7ff fc66 	bl	8002248 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	da4d      	bge.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002984:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff fbec 	bl	8002164 <LL_ADC_GetCommonPathInternalCh>
 800298c:	0003      	movs	r3, r0
 800298e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a15      	ldr	r2, [pc, #84]	@ (80029ec <HAL_ADC_ConfigChannel+0x364>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d108      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4a18      	ldr	r2, [pc, #96]	@ (8002a00 <HAL_ADC_ConfigChannel+0x378>)
 800299e:	4013      	ands	r3, r2
 80029a0:	4a11      	ldr	r2, [pc, #68]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f7ff fbc9 	bl	800213c <LL_ADC_SetCommonPathInternalCh>
 80029aa:	e039      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <HAL_ADC_ConfigChannel+0x370>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d108      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <HAL_ADC_ConfigChannel+0x37c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 80029be:	0019      	movs	r1, r3
 80029c0:	0010      	movs	r0, r2
 80029c2:	f7ff fbbb 	bl	800213c <LL_ADC_SetCommonPathInternalCh>
 80029c6:	e02b      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0b      	ldr	r2, [pc, #44]	@ (80029fc <HAL_ADC_ConfigChannel+0x374>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d126      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a08 <HAL_ADC_ConfigChannel+0x380>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	4a03      	ldr	r2, [pc, #12]	@ (80029e8 <HAL_ADC_ConfigChannel+0x360>)
 80029da:	0019      	movs	r1, r3
 80029dc:	0010      	movs	r0, r2
 80029de:	f7ff fbad 	bl	800213c <LL_ADC_SetCommonPathInternalCh>
 80029e2:	e01d      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x398>
 80029e4:	80000004 	.word	0x80000004
 80029e8:	40012708 	.word	0x40012708
 80029ec:	b0001000 	.word	0xb0001000
 80029f0:	20000000 	.word	0x20000000
 80029f4:	00030d40 	.word	0x00030d40
 80029f8:	b8004000 	.word	0xb8004000
 80029fc:	b4002000 	.word	0xb4002000
 8002a00:	ff7fffff 	.word	0xff7fffff
 8002a04:	feffffff 	.word	0xfeffffff
 8002a08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	2220      	movs	r2, #32
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a18:	2317      	movs	r3, #23
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2254      	movs	r2, #84	@ 0x54
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002a28:	2317      	movs	r3, #23
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	781b      	ldrb	r3, [r3, #0]
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b006      	add	sp, #24
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)

08002a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0002      	movs	r2, r0
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a4a:	d809      	bhi.n	8002a60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	001a      	movs	r2, r3
 8002a52:	231f      	movs	r3, #31
 8002a54:	401a      	ands	r2, r3
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <__NVIC_EnableIRQ+0x30>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4091      	lsls	r1, r2
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0002      	movs	r2, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a80:	d828      	bhi.n	8002ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a82:	4a2f      	ldr	r2, [pc, #188]	@ (8002b40 <__NVIC_SetPriority+0xd4>)
 8002a84:	1dfb      	adds	r3, r7, #7
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b25b      	sxtb	r3, r3
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	33c0      	adds	r3, #192	@ 0xc0
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	589b      	ldr	r3, [r3, r2]
 8002a92:	1dfa      	adds	r2, r7, #7
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	0011      	movs	r1, r2
 8002a98:	2203      	movs	r2, #3
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	00d2      	lsls	r2, r2, #3
 8002a9e:	21ff      	movs	r1, #255	@ 0xff
 8002aa0:	4091      	lsls	r1, r2
 8002aa2:	000a      	movs	r2, r1
 8002aa4:	43d2      	mvns	r2, r2
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	22ff      	movs	r2, #255	@ 0xff
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	2303      	movs	r3, #3
 8002aba:	4003      	ands	r3, r0
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ac0:	481f      	ldr	r0, [pc, #124]	@ (8002b40 <__NVIC_SetPriority+0xd4>)
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	430a      	orrs	r2, r1
 8002acc:	33c0      	adds	r3, #192	@ 0xc0
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ad2:	e031      	b.n	8002b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b44 <__NVIC_SetPriority+0xd8>)
 8002ad6:	1dfb      	adds	r3, r7, #7
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	0019      	movs	r1, r3
 8002adc:	230f      	movs	r3, #15
 8002ade:	400b      	ands	r3, r1
 8002ae0:	3b08      	subs	r3, #8
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3306      	adds	r3, #6
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	3304      	adds	r3, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1dfa      	adds	r2, r7, #7
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	0011      	movs	r1, r2
 8002af4:	2203      	movs	r2, #3
 8002af6:	400a      	ands	r2, r1
 8002af8:	00d2      	lsls	r2, r2, #3
 8002afa:	21ff      	movs	r1, #255	@ 0xff
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	43d2      	mvns	r2, r2
 8002b02:	401a      	ands	r2, r3
 8002b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	22ff      	movs	r2, #255	@ 0xff
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	0018      	movs	r0, r3
 8002b14:	2303      	movs	r3, #3
 8002b16:	4003      	ands	r3, r0
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b1c:	4809      	ldr	r0, [pc, #36]	@ (8002b44 <__NVIC_SetPriority+0xd8>)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	001c      	movs	r4, r3
 8002b24:	230f      	movs	r3, #15
 8002b26:	4023      	ands	r3, r4
 8002b28:	3b08      	subs	r3, #8
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	3306      	adds	r3, #6
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	18c3      	adds	r3, r0, r3
 8002b34:	3304      	adds	r3, #4
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b003      	add	sp, #12
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	2380      	movs	r3, #128	@ 0x80
 8002b56:	045b      	lsls	r3, r3, #17
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d301      	bcc.n	8002b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e010      	b.n	8002b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <SysTick_Config+0x44>)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	3a01      	subs	r2, #1
 8002b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b68:	2301      	movs	r3, #1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7ff ff7c 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <SysTick_Config+0x44>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <SysTick_Config+0x44>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	1c02      	adds	r2, r0, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b004      	add	sp, #16
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff ff33 	bl	8002a38 <__NVIC_EnableIRQ>
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff ffaf 	bl	8002b48 <SysTick_Config>
 8002bea:	0003      	movs	r3, r0
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e077      	b.n	8002cf6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d00 <HAL_DMA_Init+0x10c>)
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	4463      	add	r3, ip
 8002c10:	2114      	movs	r1, #20
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fd fa74 	bl	8000100 <__udivsi3>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2225      	movs	r2, #37	@ 0x25
 8002c24:	2102      	movs	r1, #2
 8002c26:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4934      	ldr	r1, [pc, #208]	@ (8002d04 <HAL_DMA_Init+0x110>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f8fb 	bl	8002e6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	01db      	lsls	r3, r3, #7
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d102      	bne.n	8002c88 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	213f      	movs	r1, #63	@ 0x3f
 8002c92:	400a      	ands	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c9e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d011      	beq.n	8002ccc <HAL_DMA_Init+0xd8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d80d      	bhi.n	8002ccc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f906 	bl	8002ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e008      	b.n	8002cde <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2225      	movs	r2, #37	@ 0x25
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	@ 0x24
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	bffdfff8 	.word	0xbffdfff8
 8002d04:	ffff800f 	.word	0xffff800f

08002d08 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002d10:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	221c      	movs	r2, #28
 8002d24:	4013      	ands	r3, r2
 8002d26:	2204      	movs	r2, #4
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	0013      	movs	r3, r2
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x7a>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2204      	movs	r2, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	d023      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2220      	movs	r2, #32
 8002d42:	4013      	ands	r3, r2
 8002d44:	d107      	bne.n	8002d56 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2104      	movs	r1, #4
 8002d52:	438a      	bics	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002d56:	4b44      	ldr	r3, [pc, #272]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	221c      	movs	r2, #28
 8002d60:	4013      	ands	r3, r2
 8002d62:	2204      	movs	r2, #4
 8002d64:	409a      	lsls	r2, r3
 8002d66:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_DMA_IRQHandler+0x6e>
 8002d74:	e073      	b.n	8002e5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002d80:	e06d      	b.n	8002e5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	221c      	movs	r2, #28
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	0013      	movs	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	d02e      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xec>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d02a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2220      	movs	r2, #32
 8002da6:	4013      	ands	r3, r2
 8002da8:	d10b      	bne.n	8002dc2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	210a      	movs	r1, #10
 8002db6:	438a      	bics	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2225      	movs	r2, #37	@ 0x25
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002dc2:	4b29      	ldr	r3, [pc, #164]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	221c      	movs	r2, #28
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2202      	movs	r2, #2
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	@ 0x24
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03a      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	0010      	movs	r0, r2
 8002df0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002df2:	e034      	b.n	8002e5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	221c      	movs	r2, #28
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	0013      	movs	r3, r2
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	d02b      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x158>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d027      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	210e      	movs	r1, #14
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	221c      	movs	r2, #28
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <HAL_DMA_IRQHandler+0x160>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2225      	movs	r2, #37	@ 0x25
 8002e40:	2101      	movs	r1, #1
 8002e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46c0      	nop			@ (mov r8, r8)
}
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40020000 	.word	0x40020000

08002e6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	4a10      	ldr	r2, [pc, #64]	@ (8002ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002e7c:	4694      	mov	ip, r2
 8002e7e:	4463      	add	r3, ip
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	001a      	movs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	23ff      	movs	r3, #255	@ 0xff
 8002e90:	4013      	ands	r3, r2
 8002e92:	3b08      	subs	r3, #8
 8002e94:	2114      	movs	r1, #20
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fd f932 	bl	8000100 <__udivsi3>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002ea4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	221f      	movs	r2, #31
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	10008200 	.word	0x10008200
 8002ec0:	40020880 	.word	0x40020880

08002ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	223f      	movs	r2, #63	@ 0x3f
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002eda:	4694      	mov	ip, r2
 8002edc:	4463      	add	r3, ip
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	1000823f 	.word	0x1000823f
 8002f08:	40020940 	.word	0x40020940

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1a:	e147      	b.n	80031ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4091      	lsls	r1, r2
 8002f26:	000a      	movs	r2, r1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d100      	bne.n	8002f34 <HAL_GPIO_Init+0x28>
 8002f32:	e138      	b.n	80031a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d005      	beq.n	8002f4c <HAL_GPIO_Init+0x40>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d130      	bne.n	8002fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	0013      	movs	r3, r2
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f82:	2201      	movs	r2, #1
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
 8002f88:	0013      	movs	r3, r2
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	2201      	movs	r2, #1
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d017      	beq.n	8002fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	0013      	movs	r3, r2
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	0013      	movs	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2203      	movs	r2, #3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d123      	bne.n	800303e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	58d3      	ldr	r3, [r2, r3]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2207      	movs	r2, #7
 8003008:	4013      	ands	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	43da      	mvns	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2107      	movs	r1, #7
 8003022:	400b      	ands	r3, r1
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	6939      	ldr	r1, [r7, #16]
 800303c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	409a      	lsls	r2, r3
 800304c:	0013      	movs	r3, r2
 800304e:	43da      	mvns	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	401a      	ands	r2, r3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	409a      	lsls	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	23c0      	movs	r3, #192	@ 0xc0
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	4013      	ands	r3, r2
 800307c:	d100      	bne.n	8003080 <HAL_GPIO_Init+0x174>
 800307e:	e092      	b.n	80031a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003080:	4a50      	ldr	r2, [pc, #320]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	3318      	adds	r3, #24
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	589b      	ldr	r3, [r3, r2]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2203      	movs	r2, #3
 8003092:	4013      	ands	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	220f      	movs	r2, #15
 8003098:	409a      	lsls	r2, r3
 800309a:	0013      	movs	r3, r2
 800309c:	43da      	mvns	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	23a0      	movs	r3, #160	@ 0xa0
 80030a8:	05db      	lsls	r3, r3, #23
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x1ca>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a45      	ldr	r2, [pc, #276]	@ (80031c8 <HAL_GPIO_Init+0x2bc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x1c6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a44      	ldr	r2, [pc, #272]	@ (80031cc <HAL_GPIO_Init+0x2c0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x1c2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a43      	ldr	r2, [pc, #268]	@ (80031d0 <HAL_GPIO_Init+0x2c4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x1be>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x1cc>
 80030ca:	2305      	movs	r3, #5
 80030cc:	e004      	b.n	80030d8 <HAL_GPIO_Init+0x1cc>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_Init+0x1cc>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_GPIO_Init+0x1cc>
 80030d6:	2300      	movs	r3, #0
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	2103      	movs	r1, #3
 80030dc:	400a      	ands	r2, r1
 80030de:	00d2      	lsls	r2, r2, #3
 80030e0:	4093      	lsls	r3, r2
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80030e8:	4936      	ldr	r1, [pc, #216]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3318      	adds	r3, #24
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f6:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	43da      	mvns	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	035b      	lsls	r3, r3, #13
 800310e:	4013      	ands	r3, r2
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800311a:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003120:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	43da      	mvns	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	039b      	lsls	r3, r3, #14
 8003138:	4013      	ands	r3, r2
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003144:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800314a:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 800314c:	2384      	movs	r3, #132	@ 0x84
 800314e:	58d3      	ldr	r3, [r2, r3]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43da      	mvns	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	029b      	lsls	r3, r3, #10
 8003164:	4013      	ands	r3, r2
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003170:	4914      	ldr	r1, [pc, #80]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003172:	2284      	movs	r2, #132	@ 0x84
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003178:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	58d3      	ldr	r3, [r2, r3]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	4013      	ands	r3, r2
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800319e:	4909      	ldr	r1, [pc, #36]	@ (80031c4 <HAL_GPIO_Init+0x2b8>)
 80031a0:	2280      	movs	r2, #128	@ 0x80
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	40da      	lsrs	r2, r3
 80031b4:	1e13      	subs	r3, r2, #0
 80031b6:	d000      	beq.n	80031ba <HAL_GPIO_Init+0x2ae>
 80031b8:	e6b0      	b.n	8002f1c <HAL_GPIO_Init+0x10>
  }
}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b006      	add	sp, #24
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021800 	.word	0x40021800
 80031c8:	50000400 	.word	0x50000400
 80031cc:	50000800 	.word	0x50000800
 80031d0:	50000c00 	.word	0x50000c00

080031d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	000a      	movs	r2, r1
 80031de:	1cbb      	adds	r3, r7, #2
 80031e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	1cba      	adds	r2, r7, #2
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	4013      	ands	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031ee:	230f      	movs	r3, #15
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e003      	b.n	8003200 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031f8:	230f      	movs	r3, #15
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b004      	add	sp, #16
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	0008      	movs	r0, r1
 8003218:	0011      	movs	r1, r2
 800321a:	1cbb      	adds	r3, r7, #2
 800321c:	1c02      	adds	r2, r0, #0
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	1c7b      	adds	r3, r7, #1
 8003222:	1c0a      	adds	r2, r1, #0
 8003224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003226:	1c7b      	adds	r3, r7, #1
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800322e:	1cbb      	adds	r3, r7, #2
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003236:	e003      	b.n	8003240 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003238:	1cbb      	adds	r3, r7, #2
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	000a      	movs	r2, r1
 8003252:	1cbb      	adds	r3, r7, #2
 8003254:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800325c:	1cbb      	adds	r3, r7, #2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	1cb9      	adds	r1, r7, #2
 800326c:	8809      	ldrh	r1, [r1, #0]
 800326e:	400b      	ands	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_PWR_DisableWakeUpPin>:
  *                     PWR_WAKEUP_PIN4,PWR_WAKEUP_PIN5(*),PWR_WAKEUP_PIN6
  * @note (*) availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8003288:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	212b      	movs	r1, #43	@ 0x2b
 8003290:	400b      	ands	r3, r1
 8003292:	43d9      	mvns	r1, r3
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8003296:	400a      	ands	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	40007000 	.word	0x40007000

080032a8 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2207      	movs	r2, #7
 80032b2:	4393      	bics	r3, r2
 80032b4:	001a      	movs	r2, r3
 80032b6:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80032b8:	2103      	movs	r1, #3
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80032c4:	2104      	movs	r1, #4
 80032c6:	430a      	orrs	r2, r1
 80032c8:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80032ca:	bf30      	wfi
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	40007000 	.word	0x40007000
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11f      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003300:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	0013      	movs	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	189b      	adds	r3, r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4912      	ldr	r1, [pc, #72]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800330e:	0018      	movs	r0, r3
 8003310:	f7fc fef6 	bl	8000100 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	3301      	adds	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800331a:	e008      	b.n	800332e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3b01      	subs	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e001      	b.n	800332e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e009      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	401a      	ands	r2, r3
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	429a      	cmp	r2, r3
 800333e:	d0ed      	beq.n	800331c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	b004      	add	sp, #16
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	40007000 	.word	0x40007000
 8003350:	fffff9ff 	.word	0xfffff9ff
 8003354:	20000000 	.word	0x20000000
 8003358:	000f4240 	.word	0x000f4240

0800335c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	23e0      	movs	r3, #224	@ 0xe0
 8003366:	01db      	lsls	r3, r3, #7
 8003368:	4013      	ands	r3, r2
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e2f3      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2201      	movs	r2, #1
 800338c:	4013      	ands	r3, r2
 800338e:	d100      	bne.n	8003392 <HAL_RCC_OscConfig+0x1e>
 8003390:	e07c      	b.n	800348c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003392:	4bc3      	ldr	r3, [pc, #780]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2238      	movs	r2, #56	@ 0x38
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339c:	4bc0      	ldr	r3, [pc, #768]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2203      	movs	r2, #3
 80033a2:	4013      	ands	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3e>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4bb9      	ldr	r3, [pc, #740]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	4013      	ands	r3, r2
 80033c2:	d062      	beq.n	800348a <HAL_RCC_OscConfig+0x116>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d15e      	bne.n	800348a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e2ce      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	2380      	movs	r3, #128	@ 0x80
 80033d6:	025b      	lsls	r3, r3, #9
 80033d8:	429a      	cmp	r2, r3
 80033da:	d107      	bne.n	80033ec <HAL_RCC_OscConfig+0x78>
 80033dc:	4bb0      	ldr	r3, [pc, #704]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4baf      	ldr	r3, [pc, #700]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	0249      	lsls	r1, r1, #9
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e020      	b.n	800342e <HAL_RCC_OscConfig+0xba>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	23a0      	movs	r3, #160	@ 0xa0
 80033f2:	02db      	lsls	r3, r3, #11
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d10e      	bne.n	8003416 <HAL_RCC_OscConfig+0xa2>
 80033f8:	4ba9      	ldr	r3, [pc, #676]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4ba8      	ldr	r3, [pc, #672]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80033fe:	2180      	movs	r1, #128	@ 0x80
 8003400:	02c9      	lsls	r1, r1, #11
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	4ba6      	ldr	r3, [pc, #664]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4ba5      	ldr	r3, [pc, #660]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0249      	lsls	r1, r1, #9
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0xba>
 8003416:	4ba2      	ldr	r3, [pc, #648]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4ba1      	ldr	r3, [pc, #644]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800341c:	49a1      	ldr	r1, [pc, #644]	@ (80036a4 <HAL_RCC_OscConfig+0x330>)
 800341e:	400a      	ands	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	4b9f      	ldr	r3, [pc, #636]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b9e      	ldr	r3, [pc, #632]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003428:	499f      	ldr	r1, [pc, #636]	@ (80036a8 <HAL_RCC_OscConfig+0x334>)
 800342a:	400a      	ands	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d014      	beq.n	8003460 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fe45 	bl	80020c4 <HAL_GetTick>
 800343a:	0003      	movs	r3, r0
 800343c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fe40 	bl	80020c4 <HAL_GetTick>
 8003444:	0002      	movs	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e28d      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	4b93      	ldr	r3, [pc, #588]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	029b      	lsls	r3, r3, #10
 800345a:	4013      	ands	r3, r2
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xcc>
 800345e:	e015      	b.n	800348c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fe30 	bl	80020c4 <HAL_GetTick>
 8003464:	0003      	movs	r3, r0
 8003466:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346a:	f7fe fe2b 	bl	80020c4 <HAL_GetTick>
 800346e:	0002      	movs	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	@ 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e278      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347c:	4b88      	ldr	r3, [pc, #544]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	029b      	lsls	r3, r3, #10
 8003484:	4013      	ands	r3, r2
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0xf6>
 8003488:	e000      	b.n	800348c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	d100      	bne.n	8003498 <HAL_RCC_OscConfig+0x124>
 8003496:	e099      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003498:	4b81      	ldr	r3, [pc, #516]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2238      	movs	r2, #56	@ 0x38
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a2:	4b7f      	ldr	r3, [pc, #508]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2203      	movs	r2, #3
 80034a8:	4013      	ands	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_OscConfig+0x144>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d002      	beq.n	80034be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d135      	bne.n	800352a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034be:	4b78      	ldr	r3, [pc, #480]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4013      	ands	r3, r2
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x162>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e24b      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b72      	ldr	r3, [pc, #456]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a74      	ldr	r2, [pc, #464]	@ (80036ac <HAL_RCC_OscConfig+0x338>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	021a      	lsls	r2, r3, #8
 80034e6:	4b6e      	ldr	r3, [pc, #440]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034f2:	4b6b      	ldr	r3, [pc, #428]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6e      	ldr	r2, [pc, #440]	@ (80036b0 <HAL_RCC_OscConfig+0x33c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	4b67      	ldr	r3, [pc, #412]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003506:	4b66      	ldr	r3, [pc, #408]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	0adb      	lsrs	r3, r3, #11
 800350c:	2207      	movs	r2, #7
 800350e:	4013      	ands	r3, r2
 8003510:	4a68      	ldr	r2, [pc, #416]	@ (80036b4 <HAL_RCC_OscConfig+0x340>)
 8003512:	40da      	lsrs	r2, r3
 8003514:	4b68      	ldr	r3, [pc, #416]	@ (80036b8 <HAL_RCC_OscConfig+0x344>)
 8003516:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003518:	4b68      	ldr	r3, [pc, #416]	@ (80036bc <HAL_RCC_OscConfig+0x348>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0018      	movs	r0, r3
 800351e:	f7fe fd75 	bl	800200c <HAL_InitTick>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d051      	beq.n	80035ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e221      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003532:	4b5b      	ldr	r3, [pc, #364]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5e      	ldr	r2, [pc, #376]	@ (80036b0 <HAL_RCC_OscConfig+0x33c>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	4b57      	ldr	r3, [pc, #348]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003546:	4b56      	ldr	r3, [pc, #344]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b55      	ldr	r3, [pc, #340]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800354c:	2180      	movs	r1, #128	@ 0x80
 800354e:	0049      	lsls	r1, r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fdb6 	bl	80020c4 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe fdb1 	bl	80020c4 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1fe      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003570:	4b4b      	ldr	r3, [pc, #300]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4013      	ands	r3, r2
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b48      	ldr	r3, [pc, #288]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	@ (80036ac <HAL_RCC_OscConfig+0x338>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	021a      	lsls	r2, r3, #8
 800358c:	4b44      	ldr	r3, [pc, #272]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e01b      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003594:	4b42      	ldr	r3, [pc, #264]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800359a:	4949      	ldr	r1, [pc, #292]	@ (80036c0 <HAL_RCC_OscConfig+0x34c>)
 800359c:	400a      	ands	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fd90 	bl	80020c4 <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fe fd8b 	bl	80020c4 <HAL_GetTick>
 80035ae:	0002      	movs	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1d8      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035bc:	4b38      	ldr	r3, [pc, #224]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x236>
 80035c8:	e000      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	4013      	ands	r3, r2
 80035d4:	d047      	beq.n	8003666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80035d6:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2238      	movs	r2, #56	@ 0x38
 80035dc:	4013      	ands	r3, r2
 80035de:	2b18      	cmp	r3, #24
 80035e0:	d10a      	bne.n	80035f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80035e2:	4b2f      	ldr	r3, [pc, #188]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	2202      	movs	r2, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	d03c      	beq.n	8003666 <HAL_RCC_OscConfig+0x2f2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d138      	bne.n	8003666 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e1ba      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d019      	beq.n	8003634 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003600:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003602:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003604:	4b26      	ldr	r3, [pc, #152]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003606:	2101      	movs	r1, #1
 8003608:	430a      	orrs	r2, r1
 800360a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fd5a 	bl	80020c4 <HAL_GetTick>
 8003610:	0003      	movs	r3, r0
 8003612:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fe fd55 	bl	80020c4 <HAL_GetTick>
 800361a:	0002      	movs	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a2      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003628:	4b1d      	ldr	r3, [pc, #116]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800362a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362c:	2202      	movs	r2, #2
 800362e:	4013      	ands	r3, r2
 8003630:	d0f1      	beq.n	8003616 <HAL_RCC_OscConfig+0x2a2>
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003634:	4b1a      	ldr	r3, [pc, #104]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003636:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800363a:	2101      	movs	r1, #1
 800363c:	438a      	bics	r2, r1
 800363e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fd40 	bl	80020c4 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364a:	f7fe fd3b 	bl	80020c4 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e188      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800365c:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800365e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003660:	2202      	movs	r2, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d1f1      	bne.n	800364a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2204      	movs	r2, #4
 800366c:	4013      	ands	r3, r2
 800366e:	d100      	bne.n	8003672 <HAL_RCC_OscConfig+0x2fe>
 8003670:	e0c6      	b.n	8003800 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	231f      	movs	r3, #31
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2238      	movs	r2, #56	@ 0x38
 8003680:	4013      	ands	r3, r2
 8003682:	2b20      	cmp	r3, #32
 8003684:	d11e      	bne.n	80036c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_OscConfig+0x32c>)
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2202      	movs	r2, #2
 800368c:	4013      	ands	r3, r2
 800368e:	d100      	bne.n	8003692 <HAL_RCC_OscConfig+0x31e>
 8003690:	e0b6      	b.n	8003800 <HAL_RCC_OscConfig+0x48c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d000      	beq.n	800369c <HAL_RCC_OscConfig+0x328>
 800369a:	e0b1      	b.n	8003800 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e166      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
 80036a0:	40021000 	.word	0x40021000
 80036a4:	fffeffff 	.word	0xfffeffff
 80036a8:	fffbffff 	.word	0xfffbffff
 80036ac:	ffff80ff 	.word	0xffff80ff
 80036b0:	ffffc7ff 	.word	0xffffc7ff
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004
 80036c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036c4:	4bac      	ldr	r3, [pc, #688]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80036c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	4013      	ands	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x360>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x362>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d011      	beq.n	80036fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4ba7      	ldr	r3, [pc, #668]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80036dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036de:	4ba6      	ldr	r3, [pc, #664]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	0549      	lsls	r1, r1, #21
 80036e4:	430a      	orrs	r2, r1
 80036e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036e8:	4ba3      	ldr	r3, [pc, #652]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80036ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	055b      	lsls	r3, r3, #21
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80036f6:	231f      	movs	r3, #31
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fe:	4b9f      	ldr	r3, [pc, #636]	@ (800397c <HAL_RCC_OscConfig+0x608>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4013      	ands	r3, r2
 8003708:	d11a      	bne.n	8003740 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370a:	4b9c      	ldr	r3, [pc, #624]	@ (800397c <HAL_RCC_OscConfig+0x608>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b9b      	ldr	r3, [pc, #620]	@ (800397c <HAL_RCC_OscConfig+0x608>)
 8003710:	2180      	movs	r1, #128	@ 0x80
 8003712:	0049      	lsls	r1, r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003718:	f7fe fcd4 	bl	80020c4 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fe fccf 	bl	80020c4 <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e11c      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003734:	4b91      	ldr	r3, [pc, #580]	@ (800397c <HAL_RCC_OscConfig+0x608>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x3e2>
 8003748:	4b8b      	ldr	r3, [pc, #556]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800374a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800374c:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800374e:	2101      	movs	r1, #1
 8003750:	430a      	orrs	r2, r1
 8003752:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003754:	e01c      	b.n	8003790 <HAL_RCC_OscConfig+0x41c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x404>
 800375e:	4b86      	ldr	r3, [pc, #536]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003762:	4b85      	ldr	r3, [pc, #532]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003764:	2104      	movs	r1, #4
 8003766:	430a      	orrs	r2, r1
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c
 800376a:	4b83      	ldr	r3, [pc, #524]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800376c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800376e:	4b82      	ldr	r3, [pc, #520]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003770:	2101      	movs	r1, #1
 8003772:	430a      	orrs	r2, r1
 8003774:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0x41c>
 8003778:	4b7f      	ldr	r3, [pc, #508]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800377a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800377c:	4b7e      	ldr	r3, [pc, #504]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800377e:	2101      	movs	r1, #1
 8003780:	438a      	bics	r2, r1
 8003782:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003784:	4b7c      	ldr	r3, [pc, #496]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003786:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003788:	4b7b      	ldr	r3, [pc, #492]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800378a:	2104      	movs	r1, #4
 800378c:	438a      	bics	r2, r1
 800378e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d014      	beq.n	80037c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fc94 	bl	80020c4 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a0:	e009      	b.n	80037b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fc8f 	bl	80020c4 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	4a74      	ldr	r2, [pc, #464]	@ (8003980 <HAL_RCC_OscConfig+0x60c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0db      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	4b70      	ldr	r3, [pc, #448]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x42e>
 80037c0:	e013      	b.n	80037ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fc7f 	bl	80020c4 <HAL_GetTick>
 80037c6:	0003      	movs	r3, r0
 80037c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ca:	e009      	b.n	80037e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fe fc7a 	bl	80020c4 <HAL_GetTick>
 80037d0:	0002      	movs	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003980 <HAL_RCC_OscConfig+0x60c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0c6      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e0:	4b65      	ldr	r3, [pc, #404]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	2202      	movs	r2, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80037ea:	231f      	movs	r3, #31
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b60      	ldr	r3, [pc, #384]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80037f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80037fa:	4962      	ldr	r1, [pc, #392]	@ (8003984 <HAL_RCC_OscConfig+0x610>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d100      	bne.n	800380a <HAL_RCC_OscConfig+0x496>
 8003808:	e0b0      	b.n	800396c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2238      	movs	r2, #56	@ 0x38
 8003810:	4013      	ands	r3, r2
 8003812:	2b10      	cmp	r3, #16
 8003814:	d100      	bne.n	8003818 <HAL_RCC_OscConfig+0x4a4>
 8003816:	e078      	b.n	800390a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d153      	bne.n	80038c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b55      	ldr	r3, [pc, #340]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b54      	ldr	r3, [pc, #336]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003826:	4958      	ldr	r1, [pc, #352]	@ (8003988 <HAL_RCC_OscConfig+0x614>)
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fc4a 	bl	80020c4 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003836:	f7fe fc45 	bl	80020c4 <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e092      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003848:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	049b      	lsls	r3, r3, #18
 8003850:	4013      	ands	r3, r2
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003854:	4b48      	ldr	r3, [pc, #288]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a4c      	ldr	r2, [pc, #304]	@ (800398c <HAL_RCC_OscConfig+0x618>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	431a      	orrs	r2, r3
 800387c:	4b3e      	ldr	r3, [pc, #248]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 800387e:	430a      	orrs	r2, r1
 8003880:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003882:	4b3d      	ldr	r3, [pc, #244]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003888:	2180      	movs	r1, #128	@ 0x80
 800388a:	0449      	lsls	r1, r1, #17
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003890:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	4b38      	ldr	r3, [pc, #224]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003896:	2180      	movs	r1, #128	@ 0x80
 8003898:	0549      	lsls	r1, r1, #21
 800389a:	430a      	orrs	r2, r1
 800389c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fe fc11 	bl	80020c4 <HAL_GetTick>
 80038a2:	0003      	movs	r3, r0
 80038a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fc0c 	bl	80020c4 <HAL_GetTick>
 80038ac:	0002      	movs	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e059      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	049b      	lsls	r3, r3, #18
 80038c2:	4013      	ands	r3, r2
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x534>
 80038c6:	e051      	b.n	800396c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80038ce:	492e      	ldr	r1, [pc, #184]	@ (8003988 <HAL_RCC_OscConfig+0x614>)
 80038d0:	400a      	ands	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fbf6 	bl	80020c4 <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe fbf1 	bl	80020c4 <HAL_GetTick>
 80038e2:	0002      	movs	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e03e      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	049b      	lsls	r3, r3, #18
 80038f8:	4013      	ands	r3, r2
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80038fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003902:	4923      	ldr	r1, [pc, #140]	@ (8003990 <HAL_RCC_OscConfig+0x61c>)
 8003904:	400a      	ands	r2, r1
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e030      	b.n	800396c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e02b      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003916:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <HAL_RCC_OscConfig+0x604>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2203      	movs	r2, #3
 8003920:	401a      	ands	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	429a      	cmp	r2, r3
 8003928:	d11e      	bne.n	8003968 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2270      	movs	r2, #112	@ 0x70
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d117      	bne.n	8003968 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	23fe      	movs	r3, #254	@ 0xfe
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	401a      	ands	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d10e      	bne.n	8003968 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	23f8      	movs	r3, #248	@ 0xf8
 800394e:	039b      	lsls	r3, r3, #14
 8003950:	401a      	ands	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	0f5b      	lsrs	r3, r3, #29
 800395e:	075a      	lsls	r2, r3, #29
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b008      	add	sp, #32
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	00001388 	.word	0x00001388
 8003984:	efffffff 	.word	0xefffffff
 8003988:	feffffff 	.word	0xfeffffff
 800398c:	1fc1808c 	.word	0x1fc1808c
 8003990:	effefffc 	.word	0xeffefffc

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0e9      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2207      	movs	r2, #7
 80039ae:	4013      	ands	r3, r2
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d91e      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b73      	ldr	r3, [pc, #460]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2207      	movs	r2, #7
 80039bc:	4393      	bics	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fb7c 	bl	80020c4 <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039d0:	e009      	b.n	80039e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d2:	f7fe fb77 	bl	80020c4 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b88 <HAL_RCC_ClockConfig+0x1f4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0ca      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039e6:	4b67      	ldr	r3, [pc, #412]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2207      	movs	r2, #7
 80039ec:	4013      	ands	r3, r2
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1ee      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2202      	movs	r2, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	d015      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2204      	movs	r2, #4
 8003a04:	4013      	ands	r3, r2
 8003a06:	d006      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a08:	4b60      	ldr	r3, [pc, #384]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a0e:	21e0      	movs	r1, #224	@ 0xe0
 8003a10:	01c9      	lsls	r1, r1, #7
 8003a12:	430a      	orrs	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a16:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003b90 <HAL_RCC_ClockConfig+0x1fc>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4b59      	ldr	r3, [pc, #356]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	d057      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3c:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	029b      	lsls	r3, r3, #10
 8003a44:	4013      	ands	r3, r2
 8003a46:	d12b      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e097      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a54:	4b4d      	ldr	r3, [pc, #308]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	049b      	lsls	r3, r3, #18
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d11f      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e08b      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4013      	ands	r3, r2
 8003a76:	d113      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e07f      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a84:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a88:	2202      	movs	r2, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e074      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	2202      	movs	r2, #2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e06d      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fe fb06 	bl	80020c4 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abc:	e009      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abe:	f7fe fb01 	bl	80020c4 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <HAL_RCC_ClockConfig+0x1f4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e054      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2238      	movs	r2, #56	@ 0x38
 8003ad8:	401a      	ands	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1ec      	bne.n	8003abe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d21e      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2207      	movs	r2, #7
 8003af8:	4393      	bics	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fade 	bl	80020c4 <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b0c:	e009      	b.n	8003b22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0e:	f7fe fad9 	bl	80020c4 <HAL_GetTick>
 8003b12:	0002      	movs	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <HAL_RCC_ClockConfig+0x1f4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e02c      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b22:	4b18      	ldr	r3, [pc, #96]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2207      	movs	r2, #7
 8003b28:	4013      	ands	r3, r2
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3a:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <HAL_RCC_ClockConfig+0x200>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003b4e:	f000 f829 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b52:	0001      	movs	r1, r0
 8003b54:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x204>)
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	58d3      	ldr	r3, [r2, r3]
 8003b64:	221f      	movs	r2, #31
 8003b66:	4013      	ands	r3, r2
 8003b68:	000a      	movs	r2, r1
 8003b6a:	40da      	lsrs	r2, r3
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_ClockConfig+0x208>)
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_ClockConfig+0x20c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fe fa49 	bl	800200c <HAL_InitTick>
 8003b7a:	0003      	movs	r3, r0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40022000 	.word	0x40022000
 8003b88:	00001388 	.word	0x00001388
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	fffff0ff 	.word	0xfffff0ff
 8003b94:	ffff8fff 	.word	0xffff8fff
 8003b98:	08005cd8 	.word	0x08005cd8
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003baa:	4b3c      	ldr	r3, [pc, #240]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2238      	movs	r2, #56	@ 0x38
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003bb4:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0adb      	lsrs	r3, r3, #11
 8003bba:	2207      	movs	r2, #7
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003bc6:	6839      	ldr	r1, [r7, #0]
 8003bc8:	4835      	ldr	r0, [pc, #212]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bca:	f7fc fa99 	bl	8000100 <__udivsi3>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e05d      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd4:	4b31      	ldr	r3, [pc, #196]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2238      	movs	r2, #56	@ 0x38
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003be0:	4b30      	ldr	r3, [pc, #192]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e054      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2238      	movs	r2, #56	@ 0x38
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d138      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfc:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	2207      	movs	r2, #7
 8003c04:	4013      	ands	r3, r2
 8003c06:	3301      	adds	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4824      	ldr	r0, [pc, #144]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c14:	f7fc fa74 	bl	8000100 <__udivsi3>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	227f      	movs	r2, #127	@ 0x7f
 8003c24:	4013      	ands	r3, r2
 8003c26:	434b      	muls	r3, r1
 8003c28:	617b      	str	r3, [r7, #20]
        break;
 8003c2a:	e00d      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	481c      	ldr	r0, [pc, #112]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c30:	f7fc fa66 	bl	8000100 <__udivsi3>
 8003c34:	0003      	movs	r3, r0
 8003c36:	0019      	movs	r1, r3
 8003c38:	4b18      	ldr	r3, [pc, #96]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	227f      	movs	r2, #127	@ 0x7f
 8003c40:	4013      	ands	r3, r2
 8003c42:	434b      	muls	r3, r1
 8003c44:	617b      	str	r3, [r7, #20]
        break;
 8003c46:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003c48:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0f5b      	lsrs	r3, r3, #29
 8003c4e:	2207      	movs	r2, #7
 8003c50:	4013      	ands	r3, r2
 8003c52:	3301      	adds	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	f7fc fa51 	bl	8000100 <__udivsi3>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e015      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c64:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2238      	movs	r2, #56	@ 0x38
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d103      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c70:	2380      	movs	r3, #128	@ 0x80
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c78:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2238      	movs	r2, #56	@ 0x38
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b18      	cmp	r3, #24
 8003c82:	d103      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c84:	23fa      	movs	r3, #250	@ 0xfa
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e001      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c90:	693b      	ldr	r3, [r7, #16]
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b006      	add	sp, #24
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b02      	ldr	r3, [pc, #8]	@ (8003cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	20000000 	.word	0x20000000

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003cc0:	f7ff fff2 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc4:	0004      	movs	r4, r0
 8003cc6:	f7ff fb49 	bl	800335c <LL_RCC_GetAPB1Prescaler>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	0b1a      	lsrs	r2, r3, #12
 8003cce:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd0:	0092      	lsls	r2, r2, #2
 8003cd2:	58d3      	ldr	r3, [r2, r3]
 8003cd4:	221f      	movs	r2, #31
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	40dc      	lsrs	r4, r3
 8003cda:	0023      	movs	r3, r4
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	08005d18 	.word	0x08005d18

08003ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003cf0:	2313      	movs	r3, #19
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf8:	2312      	movs	r3, #18
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	029b      	lsls	r3, r3, #10
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003d0c:	e0a3      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2011      	movs	r0, #17
 8003d10:	183b      	adds	r3, r7, r0
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b7f      	ldr	r3, [pc, #508]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	055b      	lsls	r3, r3, #21
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d110      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d26:	4b7b      	ldr	r3, [pc, #492]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	0549      	lsls	r1, r1, #21
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d30:	4b78      	ldr	r3, [pc, #480]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	055b      	lsls	r3, r3, #21
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3e:	183b      	adds	r3, r7, r0
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d44:	4b74      	ldr	r3, [pc, #464]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b73      	ldr	r3, [pc, #460]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	0049      	lsls	r1, r1, #1
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d52:	f7fe f9b7 	bl	80020c4 <HAL_GetTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5c:	f7fe f9b2 	bl	80020c4 <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d904      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d6a:	2313      	movs	r3, #19
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	2203      	movs	r2, #3
 8003d70:	701a      	strb	r2, [r3, #0]
        break;
 8003d72:	e005      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d74:	4b68      	ldr	r3, [pc, #416]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	@ 0x80
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d0ed      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003d80:	2313      	movs	r3, #19
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d154      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d8a:	4b62      	ldr	r3, [pc, #392]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d8e:	23c0      	movs	r3, #192	@ 0xc0
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4013      	ands	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d019      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d014      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003da6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	4a5c      	ldr	r2, [pc, #368]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003db0:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003db2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003db4:	4b57      	ldr	r3, [pc, #348]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003db6:	2180      	movs	r1, #128	@ 0x80
 8003db8:	0249      	lsls	r1, r1, #9
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dbe:	4b55      	ldr	r3, [pc, #340]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dc2:	4b54      	ldr	r3, [pc, #336]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dc4:	4956      	ldr	r1, [pc, #344]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dca:	4b52      	ldr	r3, [pc, #328]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d016      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe f974 	bl	80020c4 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de0:	e00c      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fe f96f 	bl	80020c4 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	4a4d      	ldr	r2, [pc, #308]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d904      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003df2:	2313      	movs	r3, #19
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	2203      	movs	r2, #3
 8003df8:	701a      	strb	r2, [r3, #0]
            break;
 8003dfa:	e004      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	4b45      	ldr	r3, [pc, #276]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e00:	2202      	movs	r2, #2
 8003e02:	4013      	ands	r3, r2
 8003e04:	d0ed      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003e06:	2313      	movs	r3, #19
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e10:	4b40      	ldr	r3, [pc, #256]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	4a41      	ldr	r2, [pc, #260]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e20:	430a      	orrs	r2, r1
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e24:	e00c      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e26:	2312      	movs	r3, #18
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2213      	movs	r2, #19
 8003e2c:	18ba      	adds	r2, r7, r2
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e005      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	2312      	movs	r3, #18
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2213      	movs	r2, #19
 8003e3a:	18ba      	adds	r2, r7, r2
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e40:	2311      	movs	r3, #17
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e4e:	4b31      	ldr	r3, [pc, #196]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e50:	4935      	ldr	r1, [pc, #212]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e60:	4b2c      	ldr	r3, [pc, #176]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	2203      	movs	r2, #3
 8003e66:	4393      	bics	r3, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e70:	430a      	orrs	r2, r1
 8003e72:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e7e:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	0019      	movs	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	4b21      	ldr	r3, [pc, #132]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	@ 0x80
 8003e98:	01db      	lsls	r3, r3, #7
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d015      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	0899      	lsrs	r1, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003eac:	430a      	orrs	r2, r1
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d106      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ebc:	4b15      	ldr	r3, [pc, #84]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	0249      	lsls	r1, r1, #9
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d016      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	01db      	lsls	r3, r3, #7
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003efc:	2180      	movs	r1, #128	@ 0x80
 8003efe:	0249      	lsls	r1, r1, #9
 8003f00:	430a      	orrs	r2, r1
 8003f02:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003f04:	2312      	movs	r3, #18
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	781b      	ldrb	r3, [r3, #0]
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b006      	add	sp, #24
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	fffffcff 	.word	0xfffffcff
 8003f20:	fffeffff 	.word	0xfffeffff
 8003f24:	00001388 	.word	0x00001388
 8003f28:	efffffff 	.word	0xefffffff
 8003f2c:	ffffcfff 	.word	0xffffcfff
 8003f30:	ffff3fff 	.word	0xffff3fff

08003f34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f3c:	230f      	movs	r3, #15
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d100      	bne.n	8003f4c <HAL_RTC_Init+0x18>
 8003f4a:	e08c      	b.n	8004066 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2229      	movs	r2, #41	@ 0x29
 8003f50:	5c9b      	ldrb	r3, [r3, r2]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2228      	movs	r2, #40	@ 0x28
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2288      	movs	r2, #136	@ 0x88
 8003f64:	0212      	lsls	r2, r2, #8
 8003f66:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd fe28 	bl	8001bc0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2229      	movs	r2, #41	@ 0x29
 8003f74:	2102      	movs	r1, #2
 8003f76:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d062      	beq.n	800404c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	22ca      	movs	r2, #202	@ 0xca
 8003f8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2253      	movs	r2, #83	@ 0x53
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003f96:	250f      	movs	r5, #15
 8003f98:	197c      	adds	r4, r7, r5
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 f891 	bl	80040c4 <RTC_EnterInitMode>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8003fa6:	0028      	movs	r0, r5
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d12c      	bne.n	800400a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	492e      	ldr	r1, [pc, #184]	@ (8004074 <HAL_RTC_Init+0x140>)
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6912      	ldr	r2, [r2, #16]
 8003fe6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6919      	ldr	r1, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	041a      	lsls	r2, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003ffc:	183c      	adds	r4, r7, r0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0018      	movs	r0, r3
 8004002:	f000 f8a1 	bl	8004148 <RTC_ExitInitMode>
 8004006:	0003      	movs	r3, r0
 8004008:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800400a:	230f      	movs	r3, #15
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d116      	bne.n	8004042 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	00d2      	lsls	r2, r2, #3
 8004020:	08d2      	lsrs	r2, r2, #3
 8004022:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	22ff      	movs	r2, #255	@ 0xff
 8004048:	625a      	str	r2, [r3, #36]	@ 0x24
 800404a:	e003      	b.n	8004054 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800404c:	230f      	movs	r3, #15
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004054:	230f      	movs	r3, #15
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2229      	movs	r2, #41	@ 0x29
 8004062:	2101      	movs	r1, #1
 8004064:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004066:	230f      	movs	r3, #15
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bdb0      	pop	{r4, r5, r7, pc}
 8004074:	fb8fffbf 	.word	0xfb8fffbf

08004078 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0e      	ldr	r2, [pc, #56]	@ (80040c0 <HAL_RTC_WaitForSynchro+0x48>)
 8004086:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004088:	f7fe f81c 	bl	80020c4 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004090:	e00a      	b.n	80040a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004092:	f7fe f817 	bl	80020c4 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	23fa      	movs	r3, #250	@ 0xfa
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d901      	bls.n	80040a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e006      	b.n	80040b6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	4013      	ands	r3, r2
 80040b2:	d0ee      	beq.n	8004092 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b004      	add	sp, #16
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	0001005f 	.word	0x0001005f

080040c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80040cc:	230f      	movs	r3, #15
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2240      	movs	r2, #64	@ 0x40
 80040dc:	4013      	ands	r3, r2
 80040de:	d12c      	bne.n	800413a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2180      	movs	r1, #128	@ 0x80
 80040ec:	430a      	orrs	r2, r1
 80040ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040f0:	f7fd ffe8 	bl	80020c4 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80040f8:	e014      	b.n	8004124 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80040fa:	f7fd ffe3 	bl	80020c4 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	200f      	movs	r0, #15
 8004106:	183b      	adds	r3, r7, r0
 8004108:	1839      	adds	r1, r7, r0
 800410a:	7809      	ldrb	r1, [r1, #0]
 800410c:	7019      	strb	r1, [r3, #0]
 800410e:	23fa      	movs	r3, #250	@ 0xfa
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	429a      	cmp	r2, r3
 8004114:	d906      	bls.n	8004124 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004116:	183b      	adds	r3, r7, r0
 8004118:	2203      	movs	r2, #3
 800411a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2229      	movs	r2, #41	@ 0x29
 8004120:	2103      	movs	r1, #3
 8004122:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2240      	movs	r2, #64	@ 0x40
 800412c:	4013      	ands	r3, r2
 800412e:	d104      	bne.n	800413a <RTC_EnterInitMode+0x76>
 8004130:	230f      	movs	r3, #15
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d1df      	bne.n	80040fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800413a:	230f      	movs	r3, #15
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	781b      	ldrb	r3, [r3, #0]
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	b004      	add	sp, #16
 8004146:	bd80      	pop	{r7, pc}

08004148 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	240f      	movs	r4, #15
 8004152:	193b      	adds	r3, r7, r4
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004158:	4b1c      	ldr	r3, [pc, #112]	@ (80041cc <RTC_ExitInitMode+0x84>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <RTC_ExitInitMode+0x84>)
 800415e:	2180      	movs	r1, #128	@ 0x80
 8004160:	438a      	bics	r2, r1
 8004162:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004164:	4b19      	ldr	r3, [pc, #100]	@ (80041cc <RTC_ExitInitMode+0x84>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2220      	movs	r2, #32
 800416a:	4013      	ands	r3, r2
 800416c:	d10d      	bne.n	800418a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff ff81 	bl	8004078 <HAL_RTC_WaitForSynchro>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d021      	beq.n	80041be <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2229      	movs	r2, #41	@ 0x29
 800417e:	2103      	movs	r1, #3
 8004180:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004182:	193b      	adds	r3, r7, r4
 8004184:	2203      	movs	r2, #3
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e019      	b.n	80041be <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800418a:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <RTC_ExitInitMode+0x84>)
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <RTC_ExitInitMode+0x84>)
 8004190:	2120      	movs	r1, #32
 8004192:	438a      	bics	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0018      	movs	r0, r3
 800419a:	f7ff ff6d 	bl	8004078 <HAL_RTC_WaitForSynchro>
 800419e:	1e03      	subs	r3, r0, #0
 80041a0:	d007      	beq.n	80041b2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2229      	movs	r2, #41	@ 0x29
 80041a6:	2103      	movs	r1, #3
 80041a8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80041aa:	230f      	movs	r3, #15
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2203      	movs	r2, #3
 80041b0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <RTC_ExitInitMode+0x84>)
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <RTC_ExitInitMode+0x84>)
 80041b8:	2120      	movs	r1, #32
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b005      	add	sp, #20
 80041ca:	bd90      	pop	{r4, r7, pc}
 80041cc:	40002800 	.word	0x40002800

080041d0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2228      	movs	r2, #40	@ 0x28
 80041e0:	5c9b      	ldrb	r3, [r3, r2]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e082      	b.n	80042f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2228      	movs	r2, #40	@ 0x28
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2229      	movs	r2, #41	@ 0x29
 80041f6:	2102      	movs	r1, #2
 80041f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	22ca      	movs	r2, #202	@ 0xca
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2253      	movs	r2, #83	@ 0x53
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4938      	ldr	r1, [pc, #224]	@ (80042f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8004216:	400a      	ands	r2, r1
 8004218:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2104      	movs	r1, #4
 8004226:	430a      	orrs	r2, r1
 8004228:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800422a:	4b34      	ldr	r3, [pc, #208]	@ (80042fc <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2240      	movs	r2, #64	@ 0x40
 8004230:	4013      	ands	r3, r2
 8004232:	d121      	bne.n	8004278 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8004234:	f7fd ff46 	bl	80020c4 <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800423c:	e016      	b.n	800426c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800423e:	f7fd ff41 	bl	80020c4 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	23fa      	movs	r3, #250	@ 0xfa
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d90d      	bls.n	800426c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	22ff      	movs	r2, #255	@ 0xff
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2229      	movs	r2, #41	@ 0x29
 800425c:	2103      	movs	r1, #3
 800425e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2228      	movs	r2, #40	@ 0x28
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e041      	b.n	80042f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2204      	movs	r2, #4
 8004274:	4013      	ands	r3, r2
 8004276:	d0e2      	beq.n	800423e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2107      	movs	r1, #7
 800428c:	438a      	bics	r2, r1
 800428e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6999      	ldr	r1, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	430a      	orrs	r2, r1
 800429e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80042a0:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	58d3      	ldr	r3, [r2, r3]
 80042a6:	4916      	ldr	r1, [pc, #88]	@ (8004300 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80042a8:	2280      	movs	r2, #128	@ 0x80
 80042aa:	0312      	lsls	r2, r2, #12
 80042ac:	4313      	orrs	r3, r2
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2180      	movs	r1, #128	@ 0x80
 80042be:	01c9      	lsls	r1, r1, #7
 80042c0:	430a      	orrs	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2180      	movs	r1, #128	@ 0x80
 80042d0:	00c9      	lsls	r1, r1, #3
 80042d2:	430a      	orrs	r2, r1
 80042d4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2229      	movs	r2, #41	@ 0x29
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2228      	movs	r2, #40	@ 0x28
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b006      	add	sp, #24
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	fffffbff 	.word	0xfffffbff
 80042fc:	40002800 	.word	0x40002800
 8004300:	40021800 	.word	0x40021800

08004304 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	2204      	movs	r2, #4
 8004314:	4013      	ands	r3, r2
 8004316:	d00b      	beq.n	8004330 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2104      	movs	r1, #4
 8004324:	430a      	orrs	r2, r1
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f808 	bl	8004340 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2229      	movs	r2, #41	@ 0x29
 8004334:	2101      	movs	r1, #1
 8004336:	5499      	strb	r1, [r3, r2]
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0a8      	b.n	80044b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	2382      	movs	r3, #130	@ 0x82
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	429a      	cmp	r2, r3
 8004374:	d009      	beq.n	800438a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	61da      	str	r2, [r3, #28]
 800437c:	e005      	b.n	800438a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	225d      	movs	r2, #93	@ 0x5d
 8004394:	5c9b      	ldrb	r3, [r3, r2]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	225c      	movs	r2, #92	@ 0x5c
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0018      	movs	r0, r3
 80043a8:	f7fd fc8e 	bl	8001cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	225d      	movs	r2, #93	@ 0x5d
 80043b0:	2102      	movs	r1, #2
 80043b2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2140      	movs	r1, #64	@ 0x40
 80043c0:	438a      	bics	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	23e0      	movs	r3, #224	@ 0xe0
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d902      	bls.n	80043d6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e002      	b.n	80043dc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043d6:	2380      	movs	r3, #128	@ 0x80
 80043d8:	015b      	lsls	r3, r3, #5
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	23f0      	movs	r3, #240	@ 0xf0
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d008      	beq.n	80043fa <HAL_SPI_Init+0xaa>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	23e0      	movs	r3, #224	@ 0xe0
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d002      	beq.n	80043fa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	2382      	movs	r3, #130	@ 0x82
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	2384      	movs	r3, #132	@ 0x84
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	400b      	ands	r3, r1
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2102      	movs	r1, #2
 8004416:	400b      	ands	r3, r1
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2101      	movs	r1, #1
 8004420:	400b      	ands	r3, r1
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6999      	ldr	r1, [r3, #24]
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	400b      	ands	r3, r1
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2138      	movs	r1, #56	@ 0x38
 8004436:	400b      	ands	r3, r1
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	2180      	movs	r1, #128	@ 0x80
 8004440:	400b      	ands	r3, r1
 8004442:	431a      	orrs	r2, r3
 8004444:	0011      	movs	r1, r2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	401a      	ands	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	2204      	movs	r2, #4
 8004460:	401a      	ands	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2110      	movs	r1, #16
 8004468:	400b      	ands	r3, r1
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004470:	2108      	movs	r1, #8
 8004472:	400b      	ands	r3, r1
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68d9      	ldr	r1, [r3, #12]
 800447a:	23f0      	movs	r3, #240	@ 0xf0
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	400b      	ands	r3, r1
 8004480:	431a      	orrs	r2, r3
 8004482:	0011      	movs	r1, r2
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	015b      	lsls	r3, r3, #5
 800448a:	401a      	ands	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4907      	ldr	r1, [pc, #28]	@ (80044bc <HAL_SPI_Init+0x16c>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	225d      	movs	r2, #93	@ 0x5d
 80044ae:	2101      	movs	r1, #1
 80044b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b004      	add	sp, #16
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	fffff7ff 	.word	0xfffff7ff

080044c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	1dbb      	adds	r3, r7, #6
 80044ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044d0:	231f      	movs	r3, #31
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	225c      	movs	r2, #92	@ 0x5c
 80044dc:	5c9b      	ldrb	r3, [r3, r2]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Transmit+0x26>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e147      	b.n	8004776 <HAL_SPI_Transmit+0x2b6>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	225c      	movs	r2, #92	@ 0x5c
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ee:	f7fd fde9 	bl	80020c4 <HAL_GetTick>
 80044f2:	0003      	movs	r3, r0
 80044f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044f6:	2316      	movs	r3, #22
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	1dba      	adds	r2, r7, #6
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	225d      	movs	r2, #93	@ 0x5d
 8004504:	5c9b      	ldrb	r3, [r3, r2]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d004      	beq.n	8004516 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800450c:	231f      	movs	r3, #31
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2202      	movs	r2, #2
 8004512:	701a      	strb	r2, [r3, #0]
    goto error;
 8004514:	e128      	b.n	8004768 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_SPI_Transmit+0x64>
 800451c:	1dbb      	adds	r3, r7, #6
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004524:	231f      	movs	r3, #31
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
    goto error;
 800452c:	e11c      	b.n	8004768 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	225d      	movs	r2, #93	@ 0x5d
 8004532:	2103      	movs	r1, #3
 8004534:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1dba      	adds	r2, r7, #6
 8004546:	8812      	ldrh	r2, [r2, #0]
 8004548:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1dba      	adds	r2, r7, #6
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2244      	movs	r2, #68	@ 0x44
 800455c:	2100      	movs	r1, #0
 800455e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2246      	movs	r2, #70	@ 0x46
 8004564:	2100      	movs	r1, #0
 8004566:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	429a      	cmp	r2, r3
 800457e:	d110      	bne.n	80045a2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2140      	movs	r1, #64	@ 0x40
 800458c:	438a      	bics	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2180      	movs	r1, #128	@ 0x80
 800459c:	01c9      	lsls	r1, r1, #7
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2240      	movs	r2, #64	@ 0x40
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	d007      	beq.n	80045c0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	23e0      	movs	r3, #224	@ 0xe0
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d952      	bls.n	8004672 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_SPI_Transmit+0x11e>
 80045d4:	2316      	movs	r3, #22
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d143      	bne.n	8004666 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	881a      	ldrh	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ee:	1c9a      	adds	r2, r3, #2
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004602:	e030      	b.n	8004666 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d112      	bne.n	8004638 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	881a      	ldrh	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	1c9a      	adds	r2, r3, #2
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004636:	e016      	b.n	8004666 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004638:	f7fd fd44 	bl	80020c4 <HAL_GetTick>
 800463c:	0002      	movs	r2, r0
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d802      	bhi.n	800464e <HAL_SPI_Transmit+0x18e>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	d102      	bne.n	8004654 <HAL_SPI_Transmit+0x194>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d108      	bne.n	8004666 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004654:	231f      	movs	r3, #31
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2203      	movs	r2, #3
 800465a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	225d      	movs	r2, #93	@ 0x5d
 8004660:	2101      	movs	r1, #1
 8004662:	5499      	strb	r1, [r3, r2]
          goto error;
 8004664:	e080      	b.n	8004768 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1c9      	bne.n	8004604 <HAL_SPI_Transmit+0x144>
 8004670:	e053      	b.n	800471a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_SPI_Transmit+0x1c4>
 800467a:	2316      	movs	r3, #22
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d145      	bne.n	8004710 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80046aa:	e031      	b.n	8004710 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d113      	bne.n	80046e2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046e0:	e016      	b.n	8004710 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e2:	f7fd fcef 	bl	80020c4 <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d802      	bhi.n	80046f8 <HAL_SPI_Transmit+0x238>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Transmit+0x23e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80046fe:	231f      	movs	r3, #31
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2203      	movs	r2, #3
 8004704:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	225d      	movs	r2, #93	@ 0x5d
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
          goto error;
 800470e:	e02b      	b.n	8004768 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1c8      	bne.n	80046ac <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 fcfb 	bl	800511c <SPI_EndRxTxTransaction>
 8004726:	1e03      	subs	r3, r0, #0
 8004728:	d002      	beq.n	8004730 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004756:	231f      	movs	r3, #31
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e003      	b.n	8004768 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	225d      	movs	r2, #93	@ 0x5d
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	225c      	movs	r2, #92	@ 0x5c
 800476c:	2100      	movs	r1, #0
 800476e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	781b      	ldrb	r3, [r3, #0]
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b008      	add	sp, #32
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	@ 0x24
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	1dbb      	adds	r3, r7, #6
 800478e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004790:	2117      	movs	r1, #23
 8004792:	187b      	adds	r3, r7, r1
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	225d      	movs	r2, #93	@ 0x5d
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d003      	beq.n	80047ac <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80047a4:	187b      	adds	r3, r7, r1
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80047aa:	e12b      	b.n	8004a04 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	2382      	movs	r3, #130	@ 0x82
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d113      	bne.n	80047e0 <HAL_SPI_Receive+0x60>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10f      	bne.n	80047e0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	225d      	movs	r2, #93	@ 0x5d
 80047c4:	2104      	movs	r1, #4
 80047c6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047c8:	1dbb      	adds	r3, r7, #6
 80047ca:	881c      	ldrh	r4, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	0023      	movs	r3, r4
 80047d8:	f000 f924 	bl	8004a24 <HAL_SPI_TransmitReceive>
 80047dc:	0003      	movs	r3, r0
 80047de:	e118      	b.n	8004a12 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	225c      	movs	r2, #92	@ 0x5c
 80047e4:	5c9b      	ldrb	r3, [r3, r2]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_SPI_Receive+0x6e>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e111      	b.n	8004a12 <HAL_SPI_Receive+0x292>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	225c      	movs	r2, #92	@ 0x5c
 80047f2:	2101      	movs	r1, #1
 80047f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f6:	f7fd fc65 	bl	80020c4 <HAL_GetTick>
 80047fa:	0003      	movs	r3, r0
 80047fc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_SPI_Receive+0x8c>
 8004804:	1dbb      	adds	r3, r7, #6
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800480c:	2317      	movs	r3, #23
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2201      	movs	r2, #1
 8004812:	701a      	strb	r2, [r3, #0]
    goto error;
 8004814:	e0f6      	b.n	8004a04 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	225d      	movs	r2, #93	@ 0x5d
 800481a:	2104      	movs	r1, #4
 800481c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1dba      	adds	r2, r7, #6
 800482e:	2144      	movs	r1, #68	@ 0x44
 8004830:	8812      	ldrh	r2, [r2, #0]
 8004832:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1dba      	adds	r2, r7, #6
 8004838:	2146      	movs	r1, #70	@ 0x46
 800483a:	8812      	ldrh	r2, [r2, #0]
 800483c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	23e0      	movs	r3, #224	@ 0xe0
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	429a      	cmp	r2, r3
 8004866:	d908      	bls.n	800487a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	496a      	ldr	r1, [pc, #424]	@ (8004a1c <HAL_SPI_Receive+0x29c>)
 8004874:	400a      	ands	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	e008      	b.n	800488c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2180      	movs	r1, #128	@ 0x80
 8004886:	0149      	lsls	r1, r1, #5
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	429a      	cmp	r2, r3
 8004896:	d10f      	bne.n	80048b8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2140      	movs	r1, #64	@ 0x40
 80048a4:	438a      	bics	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	495b      	ldr	r1, [pc, #364]	@ (8004a20 <HAL_SPI_Receive+0x2a0>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d007      	beq.n	80048d6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2140      	movs	r1, #64	@ 0x40
 80048d2:	430a      	orrs	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	23e0      	movs	r3, #224	@ 0xe0
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	429a      	cmp	r2, r3
 80048e0:	d900      	bls.n	80048e4 <HAL_SPI_Receive+0x164>
 80048e2:	e071      	b.n	80049c8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048e4:	e035      	b.n	8004952 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d117      	bne.n	8004924 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	001a      	movs	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2246      	movs	r2, #70	@ 0x46
 8004914:	5a9b      	ldrh	r3, [r3, r2]
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b299      	uxth	r1, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2246      	movs	r2, #70	@ 0x46
 8004920:	5299      	strh	r1, [r3, r2]
 8004922:	e016      	b.n	8004952 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004924:	f7fd fbce 	bl	80020c4 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d802      	bhi.n	800493a <HAL_SPI_Receive+0x1ba>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	d102      	bne.n	8004940 <HAL_SPI_Receive+0x1c0>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d108      	bne.n	8004952 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8004940:	2317      	movs	r3, #23
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	2203      	movs	r2, #3
 8004946:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	225d      	movs	r2, #93	@ 0x5d
 800494c:	2101      	movs	r1, #1
 800494e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004950:	e058      	b.n	8004a04 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2246      	movs	r2, #70	@ 0x46
 8004956:	5a9b      	ldrh	r3, [r3, r2]
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1c3      	bne.n	80048e6 <HAL_SPI_Receive+0x166>
 800495e:	e039      	b.n	80049d4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2201      	movs	r2, #1
 8004968:	4013      	ands	r3, r2
 800496a:	2b01      	cmp	r3, #1
 800496c:	d115      	bne.n	800499a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	b292      	uxth	r2, r2
 800497a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	1c9a      	adds	r2, r3, #2
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2246      	movs	r2, #70	@ 0x46
 800498a:	5a9b      	ldrh	r3, [r3, r2]
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b299      	uxth	r1, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2246      	movs	r2, #70	@ 0x46
 8004996:	5299      	strh	r1, [r3, r2]
 8004998:	e016      	b.n	80049c8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800499a:	f7fd fb93 	bl	80020c4 <HAL_GetTick>
 800499e:	0002      	movs	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d802      	bhi.n	80049b0 <HAL_SPI_Receive+0x230>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_SPI_Receive+0x236>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d108      	bne.n	80049c8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80049b6:	2317      	movs	r3, #23
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	225d      	movs	r2, #93	@ 0x5d
 80049c2:	2101      	movs	r1, #1
 80049c4:	5499      	strb	r1, [r3, r2]
          goto error;
 80049c6:	e01d      	b.n	8004a04 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2246      	movs	r2, #70	@ 0x46
 80049cc:	5a9b      	ldrh	r3, [r3, r2]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1c5      	bne.n	8004960 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fb40 	bl	8005060 <SPI_EndRxTransaction>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80049f2:	2317      	movs	r3, #23
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e003      	b.n	8004a04 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	225d      	movs	r2, #93	@ 0x5d
 8004a00:	2101      	movs	r1, #1
 8004a02:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	225c      	movs	r2, #92	@ 0x5c
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a0c:	2317      	movs	r3, #23
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	781b      	ldrb	r3, [r3, #0]
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b007      	add	sp, #28
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	ffffefff 	.word	0xffffefff
 8004a20:	ffffbfff 	.word	0xffffbfff

08004a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	001a      	movs	r2, r3
 8004a32:	1cbb      	adds	r3, r7, #2
 8004a34:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a36:	2301      	movs	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a3a:	2323      	movs	r3, #35	@ 0x23
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	225c      	movs	r2, #92	@ 0x5c
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x2c>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e1c4      	b.n	8004dda <HAL_SPI_TransmitReceive+0x3b6>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	225c      	movs	r2, #92	@ 0x5c
 8004a54:	2101      	movs	r1, #1
 8004a56:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a58:	f7fd fb34 	bl	80020c4 <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a60:	201b      	movs	r0, #27
 8004a62:	183b      	adds	r3, r7, r0
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	215d      	movs	r1, #93	@ 0x5d
 8004a68:	5c52      	ldrb	r2, [r2, r1]
 8004a6a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a72:	2312      	movs	r3, #18
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	1cba      	adds	r2, r7, #2
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a7c:	183b      	adds	r3, r7, r0
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d011      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x84>
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	2382      	movs	r3, #130	@ 0x82
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d107      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x7a>
 8004a96:	183b      	adds	r3, r7, r0
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d004      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004a9e:	2323      	movs	r3, #35	@ 0x23
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
    goto error;
 8004aa6:	e191      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x98>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x98>
 8004ab4:	1cbb      	adds	r3, r7, #2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004abc:	2323      	movs	r3, #35	@ 0x23
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ac4:	e182      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	225d      	movs	r2, #93	@ 0x5d
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	225d      	movs	r2, #93	@ 0x5d
 8004ad6:	2105      	movs	r1, #5
 8004ad8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1cba      	adds	r2, r7, #2
 8004aea:	2146      	movs	r1, #70	@ 0x46
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1cba      	adds	r2, r7, #2
 8004af4:	2144      	movs	r1, #68	@ 0x44
 8004af6:	8812      	ldrh	r2, [r2, #0]
 8004af8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1cba      	adds	r2, r7, #2
 8004b04:	8812      	ldrh	r2, [r2, #0]
 8004b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1cba      	adds	r2, r7, #2
 8004b0c:	8812      	ldrh	r2, [r2, #0]
 8004b0e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	23e0      	movs	r3, #224	@ 0xe0
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d908      	bls.n	8004b3a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	49ac      	ldr	r1, [pc, #688]	@ (8004de4 <HAL_SPI_TransmitReceive+0x3c0>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	e008      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2180      	movs	r1, #128	@ 0x80
 8004b46:	0149      	lsls	r1, r1, #5
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2240      	movs	r2, #64	@ 0x40
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d007      	beq.n	8004b6a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2140      	movs	r1, #64	@ 0x40
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	23e0      	movs	r3, #224	@ 0xe0
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d800      	bhi.n	8004b78 <HAL_SPI_TransmitReceive+0x154>
 8004b76:	e083      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_SPI_TransmitReceive+0x168>
 8004b80:	2312      	movs	r3, #18
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d000      	beq.n	8004b8c <HAL_SPI_TransmitReceive+0x168>
 8004b8a:	e06d      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb0:	e05a      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d4>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d4>
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d113      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d11c      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x21c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2246      	movs	r2, #70	@ 0x46
 8004c0a:	5a9b      	ldrh	r3, [r3, r2]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2246      	movs	r2, #70	@ 0x46
 8004c2e:	5a9b      	ldrh	r3, [r3, r2]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b299      	uxth	r1, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2246      	movs	r2, #70	@ 0x46
 8004c3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c40:	f7fd fa40 	bl	80020c4 <HAL_GetTick>
 8004c44:	0002      	movs	r2, r0
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d80b      	bhi.n	8004c68 <HAL_SPI_TransmitReceive+0x244>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	3301      	adds	r3, #1
 8004c54:	d008      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8004c56:	2323      	movs	r3, #35	@ 0x23
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	225d      	movs	r2, #93	@ 0x5d
 8004c62:	2101      	movs	r1, #1
 8004c64:	5499      	strb	r1, [r3, r2]
        goto error;
 8004c66:	e0b1      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d19f      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x18e>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2246      	movs	r2, #70	@ 0x46
 8004c76:	5a9b      	ldrh	r3, [r3, r2]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d199      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x18e>
 8004c7e:	e089      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x270>
 8004c88:	2312      	movs	r3, #18
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d000      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x270>
 8004c92:	e074      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cba:	e060      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d11c      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x2e0>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x2e0>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d114      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d11e      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x32c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2246      	movs	r2, #70	@ 0x46
 8004d16:	5a9b      	ldrh	r3, [r3, r2]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	001a      	movs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	7812      	ldrb	r2, [r2, #0]
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2246      	movs	r2, #70	@ 0x46
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b299      	uxth	r1, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2246      	movs	r2, #70	@ 0x46
 8004d4a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d50:	f7fd f9b8 	bl	80020c4 <HAL_GetTick>
 8004d54:	0002      	movs	r2, r0
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d802      	bhi.n	8004d66 <HAL_SPI_TransmitReceive+0x342>
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	3301      	adds	r3, #1
 8004d64:	d102      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x348>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d108      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8004d6c:	2323      	movs	r3, #35	@ 0x23
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2203      	movs	r2, #3
 8004d72:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	225d      	movs	r2, #93	@ 0x5d
 8004d78:	2101      	movs	r1, #1
 8004d7a:	5499      	strb	r1, [r3, r2]
        goto error;
 8004d7c:	e026      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d199      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x298>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2246      	movs	r2, #70	@ 0x46
 8004d8c:	5a9b      	ldrh	r3, [r3, r2]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d193      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f9be 	bl	800511c <SPI_EndRxTxTransaction>
 8004da0:	1e03      	subs	r3, r0, #0
 8004da2:	d006      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004da4:	2323      	movs	r3, #35	@ 0x23
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004dba:	2323      	movs	r3, #35	@ 0x23
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	225d      	movs	r2, #93	@ 0x5d
 8004dc8:	2101      	movs	r1, #1
 8004dca:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	225c      	movs	r2, #92	@ 0x5c
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004dd4:	2323      	movs	r3, #35	@ 0x23
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	781b      	ldrb	r3, [r3, #0]
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b00a      	add	sp, #40	@ 0x28
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	ffffefff 	.word	0xffffefff

08004de8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	225d      	movs	r2, #93	@ 0x5d
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	b2db      	uxtb	r3, r3
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e10:	f7fd f958 	bl	80020c4 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	18d3      	adds	r3, r2, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e20:	f7fd f950 	bl	80020c4 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e28:	4b3a      	ldr	r3, [pc, #232]	@ (8004f14 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	015b      	lsls	r3, r3, #5
 8004e2e:	0d1b      	lsrs	r3, r3, #20
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	4353      	muls	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e36:	e058      	b.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	d055      	beq.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e3e:	f7fd f941 	bl	80020c4 <HAL_GetTick>
 8004e42:	0002      	movs	r2, r0
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d902      	bls.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d142      	bne.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	21e0      	movs	r1, #224	@ 0xe0
 8004e60:	438a      	bics	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	2382      	movs	r3, #130	@ 0x82
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d113      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d005      	beq.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d107      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2140      	movs	r1, #64	@ 0x40
 8004e94:	438a      	bics	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e9c:	2380      	movs	r3, #128	@ 0x80
 8004e9e:	019b      	lsls	r3, r3, #6
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d110      	bne.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	491a      	ldr	r1, [pc, #104]	@ (8004f18 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2180      	movs	r1, #128	@ 0x80
 8004ec0:	0189      	lsls	r1, r1, #6
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	225d      	movs	r2, #93	@ 0x5d
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	225c      	movs	r2, #92	@ 0x5c
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e017      	b.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	425a      	negs	r2, r3
 8004efa:	4153      	adcs	r3, r2
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	001a      	movs	r2, r3
 8004f00:	1dfb      	adds	r3, r7, #7
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d197      	bne.n	8004e38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b008      	add	sp, #32
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	20000000 	.word	0x20000000
 8004f18:	ffffdfff 	.word	0xffffdfff

08004f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	@ 0x28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f2a:	2317      	movs	r3, #23
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f32:	f7fd f8c7 	bl	80020c4 <HAL_GetTick>
 8004f36:	0002      	movs	r2, r0
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	18d3      	adds	r3, r2, r3
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f42:	f7fd f8bf 	bl	80020c4 <HAL_GetTick>
 8004f46:	0003      	movs	r3, r0
 8004f48:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f52:	4b41      	ldr	r3, [pc, #260]	@ (8005058 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	0013      	movs	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	00da      	lsls	r2, r3, #3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	0d1b      	lsrs	r3, r3, #20
 8004f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f64:	4353      	muls	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f68:	e068      	b.n	800503c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	23c0      	movs	r3, #192	@ 0xc0
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d10a      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	2117      	movs	r1, #23
 8004f82:	187b      	adds	r3, r7, r1
 8004f84:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	d055      	beq.n	800503c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f90:	f7fd f898 	bl	80020c4 <HAL_GetTick>
 8004f94:	0002      	movs	r2, r0
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d902      	bls.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d142      	bne.n	800502c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	21e0      	movs	r1, #224	@ 0xe0
 8004fb2:	438a      	bics	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	2382      	movs	r3, #130	@ 0x82
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d113      	bne.n	8004fea <SPI_WaitFifoStateUntilTimeout+0xce>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d005      	beq.n	8004fda <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d107      	bne.n	8004fea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2140      	movs	r1, #64	@ 0x40
 8004fe6:	438a      	bics	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d110      	bne.n	8005018 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4916      	ldr	r1, [pc, #88]	@ (800505c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005002:	400a      	ands	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2180      	movs	r1, #128	@ 0x80
 8005012:	0189      	lsls	r1, r1, #6
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	225d      	movs	r2, #93	@ 0x5d
 800501c:	2101      	movs	r1, #1
 800501e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	225c      	movs	r2, #92	@ 0x5c
 8005024:	2100      	movs	r1, #0
 8005026:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e010      	b.n	800504e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	3b01      	subs	r3, #1
 800503a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d18e      	bne.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b00a      	add	sp, #40	@ 0x28
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	20000000 	.word	0x20000000
 800505c:	ffffdfff 	.word	0xffffdfff

08005060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	2382      	movs	r3, #130	@ 0x82
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	429a      	cmp	r2, r3
 8005076:	d113      	bne.n	80050a0 <SPI_EndRxTransaction+0x40>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	2380      	movs	r3, #128	@ 0x80
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	429a      	cmp	r2, r3
 800508e:	d107      	bne.n	80050a0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2140      	movs	r1, #64	@ 0x40
 800509c:	438a      	bics	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	0013      	movs	r3, r2
 80050aa:	2200      	movs	r2, #0
 80050ac:	2180      	movs	r1, #128	@ 0x80
 80050ae:	f7ff fea7 	bl	8004e00 <SPI_WaitFlagStateUntilTimeout>
 80050b2:	1e03      	subs	r3, r0, #0
 80050b4:	d007      	beq.n	80050c6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ba:	2220      	movs	r2, #32
 80050bc:	431a      	orrs	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e026      	b.n	8005114 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	2382      	movs	r3, #130	@ 0x82
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d11f      	bne.n	8005112 <SPI_EndRxTransaction+0xb2>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	2380      	movs	r3, #128	@ 0x80
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	429a      	cmp	r2, r3
 80050dc:	d005      	beq.n	80050ea <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	2380      	movs	r3, #128	@ 0x80
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d113      	bne.n	8005112 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	23c0      	movs	r3, #192	@ 0xc0
 80050ee:	00d9      	lsls	r1, r3, #3
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	0013      	movs	r3, r2
 80050f8:	2200      	movs	r2, #0
 80050fa:	f7ff ff0f 	bl	8004f1c <SPI_WaitFifoStateUntilTimeout>
 80050fe:	1e03      	subs	r3, r0, #0
 8005100:	d007      	beq.n	8005112 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	2220      	movs	r2, #32
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e000      	b.n	8005114 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}

0800511c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	23c0      	movs	r3, #192	@ 0xc0
 800512c:	0159      	lsls	r1, r3, #5
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	0013      	movs	r3, r2
 8005136:	2200      	movs	r2, #0
 8005138:	f7ff fef0 	bl	8004f1c <SPI_WaitFifoStateUntilTimeout>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d007      	beq.n	8005150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005144:	2220      	movs	r2, #32
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e027      	b.n	80051a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	0013      	movs	r3, r2
 800515a:	2200      	movs	r2, #0
 800515c:	2180      	movs	r1, #128	@ 0x80
 800515e:	f7ff fe4f 	bl	8004e00 <SPI_WaitFlagStateUntilTimeout>
 8005162:	1e03      	subs	r3, r0, #0
 8005164:	d007      	beq.n	8005176 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516a:	2220      	movs	r2, #32
 800516c:	431a      	orrs	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e014      	b.n	80051a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	23c0      	movs	r3, #192	@ 0xc0
 800517a:	00d9      	lsls	r1, r3, #3
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	0013      	movs	r3, r2
 8005184:	2200      	movs	r2, #0
 8005186:	f7ff fec9 	bl	8004f1c <SPI_WaitFifoStateUntilTimeout>
 800518a:	1e03      	subs	r3, r0, #0
 800518c:	d007      	beq.n	800519e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005192:	2220      	movs	r2, #32
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e046      	b.n	8005248 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2288      	movs	r2, #136	@ 0x88
 80051be:	589b      	ldr	r3, [r3, r2]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d107      	bne.n	80051d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2284      	movs	r2, #132	@ 0x84
 80051c8:	2100      	movs	r1, #0
 80051ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f7fc fe70 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2288      	movs	r2, #136	@ 0x88
 80051d8:	2124      	movs	r1, #36	@ 0x24
 80051da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2101      	movs	r1, #1
 80051e8:	438a      	bics	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 f996 	bl	8005528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f828 	bl	8005254 <UART_SetConfig>
 8005204:	0003      	movs	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e01c      	b.n	8005248 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	490d      	ldr	r1, [pc, #52]	@ (8005250 <HAL_UART_Init+0xa8>)
 800521a:	400a      	ands	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	212a      	movs	r1, #42	@ 0x2a
 800522a:	438a      	bics	r2, r1
 800522c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0018      	movs	r0, r3
 8005242:	f000 fa25 	bl	8005690 <UART_CheckIdleState>
 8005246:	0003      	movs	r3, r0
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b002      	add	sp, #8
 800524e:	bd80      	pop	{r7, pc}
 8005250:	ffffb7ff 	.word	0xffffb7ff

08005254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525c:	231a      	movs	r3, #26
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4aa1      	ldr	r2, [pc, #644]	@ (8005508 <UART_SetConfig+0x2b4>)
 8005284:	4013      	ands	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a9c      	ldr	r2, [pc, #624]	@ (800550c <UART_SetConfig+0x2b8>)
 800529a:	4013      	ands	r3, r2
 800529c:	0019      	movs	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a93      	ldr	r2, [pc, #588]	@ (8005510 <UART_SetConfig+0x2bc>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	0019      	movs	r1, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	220f      	movs	r2, #15
 80052d8:	4393      	bics	r3, r2
 80052da:	0019      	movs	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a89      	ldr	r2, [pc, #548]	@ (8005514 <UART_SetConfig+0x2c0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d127      	bne.n	8005342 <UART_SetConfig+0xee>
 80052f2:	4b89      	ldr	r3, [pc, #548]	@ (8005518 <UART_SetConfig+0x2c4>)
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	2203      	movs	r2, #3
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d017      	beq.n	800532e <UART_SetConfig+0xda>
 80052fe:	d81b      	bhi.n	8005338 <UART_SetConfig+0xe4>
 8005300:	2b02      	cmp	r3, #2
 8005302:	d00a      	beq.n	800531a <UART_SetConfig+0xc6>
 8005304:	d818      	bhi.n	8005338 <UART_SetConfig+0xe4>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <UART_SetConfig+0xbc>
 800530a:	2b01      	cmp	r3, #1
 800530c:	d00a      	beq.n	8005324 <UART_SetConfig+0xd0>
 800530e:	e013      	b.n	8005338 <UART_SetConfig+0xe4>
 8005310:	231b      	movs	r3, #27
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e021      	b.n	800535e <UART_SetConfig+0x10a>
 800531a:	231b      	movs	r3, #27
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e01c      	b.n	800535e <UART_SetConfig+0x10a>
 8005324:	231b      	movs	r3, #27
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2204      	movs	r2, #4
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e017      	b.n	800535e <UART_SetConfig+0x10a>
 800532e:	231b      	movs	r3, #27
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2208      	movs	r2, #8
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x10a>
 8005338:	231b      	movs	r3, #27
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2210      	movs	r2, #16
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x10a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a75      	ldr	r2, [pc, #468]	@ (800551c <UART_SetConfig+0x2c8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d104      	bne.n	8005356 <UART_SetConfig+0x102>
 800534c:	231b      	movs	r3, #27
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e003      	b.n	800535e <UART_SetConfig+0x10a>
 8005356:	231b      	movs	r3, #27
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	2210      	movs	r2, #16
 800535c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	2380      	movs	r3, #128	@ 0x80
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	429a      	cmp	r2, r3
 8005368:	d000      	beq.n	800536c <UART_SetConfig+0x118>
 800536a:	e065      	b.n	8005438 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800536c:	231b      	movs	r3, #27
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b08      	cmp	r3, #8
 8005374:	d015      	beq.n	80053a2 <UART_SetConfig+0x14e>
 8005376:	dc18      	bgt.n	80053aa <UART_SetConfig+0x156>
 8005378:	2b04      	cmp	r3, #4
 800537a:	d00d      	beq.n	8005398 <UART_SetConfig+0x144>
 800537c:	dc15      	bgt.n	80053aa <UART_SetConfig+0x156>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <UART_SetConfig+0x134>
 8005382:	2b02      	cmp	r3, #2
 8005384:	d005      	beq.n	8005392 <UART_SetConfig+0x13e>
 8005386:	e010      	b.n	80053aa <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fc98 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 800538c:	0003      	movs	r3, r0
 800538e:	617b      	str	r3, [r7, #20]
        break;
 8005390:	e012      	b.n	80053b8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005392:	4b63      	ldr	r3, [pc, #396]	@ (8005520 <UART_SetConfig+0x2cc>)
 8005394:	617b      	str	r3, [r7, #20]
        break;
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005398:	f7fe fc04 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 800539c:	0003      	movs	r3, r0
 800539e:	617b      	str	r3, [r7, #20]
        break;
 80053a0:	e00a      	b.n	80053b8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a2:	2380      	movs	r3, #128	@ 0x80
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
        break;
 80053a8:	e006      	b.n	80053b8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053ae:	231a      	movs	r3, #26
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
        break;
 80053b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d100      	bne.n	80053c0 <UART_SetConfig+0x16c>
 80053be:	e08d      	b.n	80054dc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053c4:	4b57      	ldr	r3, [pc, #348]	@ (8005524 <UART_SetConfig+0x2d0>)
 80053c6:	0052      	lsls	r2, r2, #1
 80053c8:	5ad3      	ldrh	r3, [r2, r3]
 80053ca:	0019      	movs	r1, r3
 80053cc:	6978      	ldr	r0, [r7, #20]
 80053ce:	f7fa fe97 	bl	8000100 <__udivsi3>
 80053d2:	0003      	movs	r3, r0
 80053d4:	005a      	lsls	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	18d2      	adds	r2, r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	0019      	movs	r1, r3
 80053e4:	0010      	movs	r0, r2
 80053e6:	f7fa fe8b 	bl	8000100 <__udivsi3>
 80053ea:	0003      	movs	r3, r0
 80053ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b0f      	cmp	r3, #15
 80053f2:	d91c      	bls.n	800542e <UART_SetConfig+0x1da>
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	025b      	lsls	r3, r3, #9
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d217      	bcs.n	800542e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	b29a      	uxth	r2, r3
 8005402:	200e      	movs	r0, #14
 8005404:	183b      	adds	r3, r7, r0
 8005406:	210f      	movs	r1, #15
 8005408:	438a      	bics	r2, r1
 800540a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	2207      	movs	r2, #7
 8005414:	4013      	ands	r3, r2
 8005416:	b299      	uxth	r1, r3
 8005418:	183b      	adds	r3, r7, r0
 800541a:	183a      	adds	r2, r7, r0
 800541c:	8812      	ldrh	r2, [r2, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	183a      	adds	r2, r7, r0
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e056      	b.n	80054dc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800542e:	231a      	movs	r3, #26
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e051      	b.n	80054dc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005438:	231b      	movs	r3, #27
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d015      	beq.n	800546e <UART_SetConfig+0x21a>
 8005442:	dc18      	bgt.n	8005476 <UART_SetConfig+0x222>
 8005444:	2b04      	cmp	r3, #4
 8005446:	d00d      	beq.n	8005464 <UART_SetConfig+0x210>
 8005448:	dc15      	bgt.n	8005476 <UART_SetConfig+0x222>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <UART_SetConfig+0x200>
 800544e:	2b02      	cmp	r3, #2
 8005450:	d005      	beq.n	800545e <UART_SetConfig+0x20a>
 8005452:	e010      	b.n	8005476 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fe fc32 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 8005458:	0003      	movs	r3, r0
 800545a:	617b      	str	r3, [r7, #20]
        break;
 800545c:	e012      	b.n	8005484 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545e:	4b30      	ldr	r3, [pc, #192]	@ (8005520 <UART_SetConfig+0x2cc>)
 8005460:	617b      	str	r3, [r7, #20]
        break;
 8005462:	e00f      	b.n	8005484 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005464:	f7fe fb9e 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8005468:	0003      	movs	r3, r0
 800546a:	617b      	str	r3, [r7, #20]
        break;
 800546c:	e00a      	b.n	8005484 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546e:	2380      	movs	r3, #128	@ 0x80
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	617b      	str	r3, [r7, #20]
        break;
 8005474:	e006      	b.n	8005484 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800547a:	231a      	movs	r3, #26
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	2201      	movs	r2, #1
 8005480:	701a      	strb	r2, [r3, #0]
        break;
 8005482:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d028      	beq.n	80054dc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800548e:	4b25      	ldr	r3, [pc, #148]	@ (8005524 <UART_SetConfig+0x2d0>)
 8005490:	0052      	lsls	r2, r2, #1
 8005492:	5ad3      	ldrh	r3, [r2, r3]
 8005494:	0019      	movs	r1, r3
 8005496:	6978      	ldr	r0, [r7, #20]
 8005498:	f7fa fe32 	bl	8000100 <__udivsi3>
 800549c:	0003      	movs	r3, r0
 800549e:	001a      	movs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	18d2      	adds	r2, r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0019      	movs	r1, r3
 80054ae:	0010      	movs	r0, r2
 80054b0:	f7fa fe26 	bl	8000100 <__udivsi3>
 80054b4:	0003      	movs	r3, r0
 80054b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d90a      	bls.n	80054d4 <UART_SetConfig+0x280>
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	2380      	movs	r3, #128	@ 0x80
 80054c2:	025b      	lsls	r3, r3, #9
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d205      	bcs.n	80054d4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	e003      	b.n	80054dc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80054d4:	231a      	movs	r3, #26
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	2201      	movs	r2, #1
 80054da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	226a      	movs	r2, #106	@ 0x6a
 80054e0:	2101      	movs	r1, #1
 80054e2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2268      	movs	r2, #104	@ 0x68
 80054e8:	2101      	movs	r1, #1
 80054ea:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054f8:	231a      	movs	r3, #26
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	781b      	ldrb	r3, [r3, #0]
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b008      	add	sp, #32
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	cfff69f3 	.word	0xcfff69f3
 800550c:	ffffcfff 	.word	0xffffcfff
 8005510:	11fff4ff 	.word	0x11fff4ff
 8005514:	40013800 	.word	0x40013800
 8005518:	40021000 	.word	0x40021000
 800551c:	40004400 	.word	0x40004400
 8005520:	00f42400 	.word	0x00f42400
 8005524:	08005d38 	.word	0x08005d38

08005528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	2208      	movs	r2, #8
 8005536:	4013      	ands	r3, r2
 8005538:	d00b      	beq.n	8005552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a4a      	ldr	r2, [pc, #296]	@ (800566c <UART_AdvFeatureConfig+0x144>)
 8005542:	4013      	ands	r3, r2
 8005544:	0019      	movs	r1, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	2201      	movs	r2, #1
 8005558:	4013      	ands	r3, r2
 800555a:	d00b      	beq.n	8005574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4a43      	ldr	r2, [pc, #268]	@ (8005670 <UART_AdvFeatureConfig+0x148>)
 8005564:	4013      	ands	r3, r2
 8005566:	0019      	movs	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	2202      	movs	r2, #2
 800557a:	4013      	ands	r3, r2
 800557c:	d00b      	beq.n	8005596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a3b      	ldr	r2, [pc, #236]	@ (8005674 <UART_AdvFeatureConfig+0x14c>)
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	2204      	movs	r2, #4
 800559c:	4013      	ands	r3, r2
 800559e:	d00b      	beq.n	80055b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a34      	ldr	r2, [pc, #208]	@ (8005678 <UART_AdvFeatureConfig+0x150>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	0019      	movs	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	2210      	movs	r2, #16
 80055be:	4013      	ands	r3, r2
 80055c0:	d00b      	beq.n	80055da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a2c      	ldr	r2, [pc, #176]	@ (800567c <UART_AdvFeatureConfig+0x154>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	2220      	movs	r2, #32
 80055e0:	4013      	ands	r3, r2
 80055e2:	d00b      	beq.n	80055fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	4a25      	ldr	r2, [pc, #148]	@ (8005680 <UART_AdvFeatureConfig+0x158>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	0019      	movs	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	2240      	movs	r2, #64	@ 0x40
 8005602:	4013      	ands	r3, r2
 8005604:	d01d      	beq.n	8005642 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <UART_AdvFeatureConfig+0x15c>)
 800560e:	4013      	ands	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005622:	2380      	movs	r3, #128	@ 0x80
 8005624:	035b      	lsls	r3, r3, #13
 8005626:	429a      	cmp	r2, r3
 8005628:	d10b      	bne.n	8005642 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a15      	ldr	r2, [pc, #84]	@ (8005688 <UART_AdvFeatureConfig+0x160>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	2280      	movs	r2, #128	@ 0x80
 8005648:	4013      	ands	r3, r2
 800564a:	d00b      	beq.n	8005664 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4a0e      	ldr	r2, [pc, #56]	@ (800568c <UART_AdvFeatureConfig+0x164>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }
}
 8005664:	46c0      	nop			@ (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}
 800566c:	ffff7fff 	.word	0xffff7fff
 8005670:	fffdffff 	.word	0xfffdffff
 8005674:	fffeffff 	.word	0xfffeffff
 8005678:	fffbffff 	.word	0xfffbffff
 800567c:	ffffefff 	.word	0xffffefff
 8005680:	ffffdfff 	.word	0xffffdfff
 8005684:	ffefffff 	.word	0xffefffff
 8005688:	ff9fffff 	.word	0xff9fffff
 800568c:	fff7ffff 	.word	0xfff7ffff

08005690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b092      	sub	sp, #72	@ 0x48
 8005694:	af02      	add	r7, sp, #8
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2290      	movs	r2, #144	@ 0x90
 800569c:	2100      	movs	r1, #0
 800569e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a0:	f7fc fd10 	bl	80020c4 <HAL_GetTick>
 80056a4:	0003      	movs	r3, r0
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2208      	movs	r2, #8
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d12d      	bne.n	8005712 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b8:	2280      	movs	r2, #128	@ 0x80
 80056ba:	0391      	lsls	r1, r2, #14
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4a47      	ldr	r2, [pc, #284]	@ (80057dc <UART_CheckIdleState+0x14c>)
 80056c0:	9200      	str	r2, [sp, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f000 f88e 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 80056c8:	1e03      	subs	r3, r0, #0
 80056ca:	d022      	beq.n	8005712 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056cc:	f3ef 8310 	mrs	r3, PRIMASK
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056d6:	2301      	movs	r3, #1
 80056d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2180      	movs	r1, #128	@ 0x80
 80056ee:	438a      	bics	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f8:	f383 8810 	msr	PRIMASK, r3
}
 80056fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2288      	movs	r2, #136	@ 0x88
 8005702:	2120      	movs	r1, #32
 8005704:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2284      	movs	r2, #132	@ 0x84
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e060      	b.n	80057d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2204      	movs	r2, #4
 800571a:	4013      	ands	r3, r2
 800571c:	2b04      	cmp	r3, #4
 800571e:	d146      	bne.n	80057ae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005722:	2280      	movs	r2, #128	@ 0x80
 8005724:	03d1      	lsls	r1, r2, #15
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4a2c      	ldr	r2, [pc, #176]	@ (80057dc <UART_CheckIdleState+0x14c>)
 800572a:	9200      	str	r2, [sp, #0]
 800572c:	2200      	movs	r2, #0
 800572e:	f000 f859 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d03b      	beq.n	80057ae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	60fb      	str	r3, [r7, #12]
  return(result);
 800573c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005740:	2301      	movs	r3, #1
 8005742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4922      	ldr	r1, [pc, #136]	@ (80057e0 <UART_CheckIdleState+0x150>)
 8005758:	400a      	ands	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005768:	f3ef 8310 	mrs	r3, PRIMASK
 800576c:	61bb      	str	r3, [r7, #24]
  return(result);
 800576e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	633b      	str	r3, [r7, #48]	@ 0x30
 8005772:	2301      	movs	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			@ (mov r8, r8)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	438a      	bics	r2, r1
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	228c      	movs	r2, #140	@ 0x8c
 800579e:	2120      	movs	r1, #32
 80057a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2284      	movs	r2, #132	@ 0x84
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e012      	b.n	80057d4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2288      	movs	r2, #136	@ 0x88
 80057b2:	2120      	movs	r1, #32
 80057b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	228c      	movs	r2, #140	@ 0x8c
 80057ba:	2120      	movs	r1, #32
 80057bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2284      	movs	r2, #132	@ 0x84
 80057ce:	2100      	movs	r1, #0
 80057d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b010      	add	sp, #64	@ 0x40
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	01ffffff 	.word	0x01ffffff
 80057e0:	fffffedf 	.word	0xfffffedf

080057e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	1dfb      	adds	r3, r7, #7
 80057f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f4:	e051      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	3301      	adds	r3, #1
 80057fa:	d04e      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fc fc62 	bl	80020c4 <HAL_GetTick>
 8005800:	0002      	movs	r2, r0
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <UART_WaitOnFlagUntilTimeout+0x2e>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e051      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2204      	movs	r2, #4
 800581e:	4013      	ands	r3, r2
 8005820:	d03b      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b80      	cmp	r3, #128	@ 0x80
 8005826:	d038      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	d035      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	2208      	movs	r2, #8
 8005836:	4013      	ands	r3, r2
 8005838:	2b08      	cmp	r3, #8
 800583a:	d111      	bne.n	8005860 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2208      	movs	r2, #8
 8005842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0018      	movs	r0, r3
 8005848:	f000 f83c 	bl	80058c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2290      	movs	r2, #144	@ 0x90
 8005850:	2108      	movs	r1, #8
 8005852:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2284      	movs	r2, #132	@ 0x84
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e02c      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	401a      	ands	r2, r3
 800586c:	2380      	movs	r3, #128	@ 0x80
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	429a      	cmp	r2, r3
 8005872:	d112      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2280      	movs	r2, #128	@ 0x80
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 f81f 	bl	80058c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2290      	movs	r2, #144	@ 0x90
 800588a:	2120      	movs	r1, #32
 800588c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2284      	movs	r2, #132	@ 0x84
 8005892:	2100      	movs	r1, #0
 8005894:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e00f      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	4013      	ands	r3, r2
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	425a      	negs	r2, r3
 80058aa:	4153      	adcs	r3, r2
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	001a      	movs	r2, r3
 80058b0:	1dfb      	adds	r3, r7, #7
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d09e      	beq.n	80057f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b004      	add	sp, #16
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	@ 0x38
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058cc:	f3ef 8310 	mrs	r3, PRIMASK
 80058d0:	617b      	str	r3, [r7, #20]
  return(result);
 80058d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d6:	2301      	movs	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	46c0      	nop			@ (mov r8, r8)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4926      	ldr	r1, [pc, #152]	@ (8005988 <UART_EndRxTransfer+0xc4>)
 80058ee:	400a      	ands	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f383 8810 	msr	PRIMASK, r3
}
 80058fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005902:	623b      	str	r3, [r7, #32]
  return(result);
 8005904:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005906:	633b      	str	r3, [r7, #48]	@ 0x30
 8005908:	2301      	movs	r3, #1
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	f383 8810 	msr	PRIMASK, r3
}
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	491b      	ldr	r1, [pc, #108]	@ (800598c <UART_EndRxTransfer+0xc8>)
 8005920:	400a      	ands	r2, r1
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d118      	bne.n	800596a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005938:	f3ef 8310 	mrs	r3, PRIMASK
 800593c:	60bb      	str	r3, [r7, #8]
  return(result);
 800593e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005942:	2301      	movs	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2110      	movs	r1, #16
 800595a:	438a      	bics	r2, r1
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f383 8810 	msr	PRIMASK, r3
}
 8005968:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	228c      	movs	r2, #140	@ 0x8c
 800596e:	2120      	movs	r1, #32
 8005970:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b00e      	add	sp, #56	@ 0x38
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	fffffedf 	.word	0xfffffedf
 800598c:	effffffe 	.word	0xeffffffe

08005990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2284      	movs	r2, #132	@ 0x84
 800599c:	5c9b      	ldrb	r3, [r3, r2]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e027      	b.n	80059f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2284      	movs	r2, #132	@ 0x84
 80059aa:	2101      	movs	r1, #1
 80059ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2288      	movs	r2, #136	@ 0x88
 80059b2:	2124      	movs	r1, #36	@ 0x24
 80059b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2101      	movs	r1, #1
 80059ca:	438a      	bics	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005a00 <HAL_UARTEx_DisableFifoMode+0x70>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2288      	movs	r2, #136	@ 0x88
 80059e8:	2120      	movs	r1, #32
 80059ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2284      	movs	r2, #132	@ 0x84
 80059f0:	2100      	movs	r1, #0
 80059f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b004      	add	sp, #16
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	dfffffff 	.word	0xdfffffff

08005a04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2284      	movs	r2, #132	@ 0x84
 8005a12:	5c9b      	ldrb	r3, [r3, r2]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e02e      	b.n	8005a7a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2284      	movs	r2, #132	@ 0x84
 8005a20:	2101      	movs	r1, #1
 8005a22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2288      	movs	r2, #136	@ 0x88
 8005a28:	2124      	movs	r1, #36	@ 0x24
 8005a2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	438a      	bics	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	08d9      	lsrs	r1, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f854 	bl	8005b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2288      	movs	r2, #136	@ 0x88
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2284      	movs	r2, #132	@ 0x84
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b004      	add	sp, #16
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2284      	movs	r2, #132	@ 0x84
 8005a92:	5c9b      	ldrb	r3, [r3, r2]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e02f      	b.n	8005afc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2284      	movs	r2, #132	@ 0x84
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2288      	movs	r2, #136	@ 0x88
 8005aa8:	2124      	movs	r1, #36	@ 0x24
 8005aaa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2101      	movs	r1, #1
 8005ac0:	438a      	bics	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4a0e      	ldr	r2, [pc, #56]	@ (8005b04 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 f813 	bl	8005b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2288      	movs	r2, #136	@ 0x88
 8005aee:	2120      	movs	r1, #32
 8005af0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2284      	movs	r2, #132	@ 0x84
 8005af6:	2100      	movs	r1, #0
 8005af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b004      	add	sp, #16
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	f1ffffff 	.word	0xf1ffffff

08005b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	226a      	movs	r2, #106	@ 0x6a
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2268      	movs	r2, #104	@ 0x68
 8005b24:	2101      	movs	r1, #1
 8005b26:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b28:	e043      	b.n	8005bb2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b2a:	260f      	movs	r6, #15
 8005b2c:	19bb      	adds	r3, r7, r6
 8005b2e:	2208      	movs	r2, #8
 8005b30:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b32:	200e      	movs	r0, #14
 8005b34:	183b      	adds	r3, r7, r0
 8005b36:	2208      	movs	r2, #8
 8005b38:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	0e5b      	lsrs	r3, r3, #25
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	240d      	movs	r4, #13
 8005b46:	193b      	adds	r3, r7, r4
 8005b48:	2107      	movs	r1, #7
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	0f5b      	lsrs	r3, r3, #29
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	250c      	movs	r5, #12
 8005b5a:	197b      	adds	r3, r7, r5
 8005b5c:	2107      	movs	r1, #7
 8005b5e:	400a      	ands	r2, r1
 8005b60:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b62:	183b      	adds	r3, r7, r0
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	197a      	adds	r2, r7, r5
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	4914      	ldr	r1, [pc, #80]	@ (8005bbc <UARTEx_SetNbDataToProcess+0xb4>)
 8005b6c:	5c8a      	ldrb	r2, [r1, r2]
 8005b6e:	435a      	muls	r2, r3
 8005b70:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b72:	197b      	adds	r3, r7, r5
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	4a12      	ldr	r2, [pc, #72]	@ (8005bc0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005b78:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	f7fa fb4a 	bl	8000214 <__divsi3>
 8005b80:	0003      	movs	r3, r0
 8005b82:	b299      	uxth	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	226a      	movs	r2, #106	@ 0x6a
 8005b88:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b8a:	19bb      	adds	r3, r7, r6
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	193a      	adds	r2, r7, r4
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	490a      	ldr	r1, [pc, #40]	@ (8005bbc <UARTEx_SetNbDataToProcess+0xb4>)
 8005b94:	5c8a      	ldrb	r2, [r1, r2]
 8005b96:	435a      	muls	r2, r3
 8005b98:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b9a:	193b      	adds	r3, r7, r4
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	4a08      	ldr	r2, [pc, #32]	@ (8005bc0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	f7fa fb36 	bl	8000214 <__divsi3>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	b299      	uxth	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2268      	movs	r2, #104	@ 0x68
 8005bb0:	5299      	strh	r1, [r3, r2]
}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b005      	add	sp, #20
 8005bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	08005d50 	.word	0x08005d50
 8005bc0:	08005d58 	.word	0x08005d58

08005bc4 <memset>:
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	1882      	adds	r2, r0, r2
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d100      	bne.n	8005bce <memset+0xa>
 8005bcc:	4770      	bx	lr
 8005bce:	7019      	strb	r1, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	e7f9      	b.n	8005bc8 <memset+0x4>

08005bd4 <__libc_init_array>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	4c0c      	ldr	r4, [pc, #48]	@ (8005c0c <__libc_init_array+0x38>)
 8005bda:	4d0d      	ldr	r5, [pc, #52]	@ (8005c10 <__libc_init_array+0x3c>)
 8005bdc:	1b64      	subs	r4, r4, r5
 8005bde:	10a4      	asrs	r4, r4, #2
 8005be0:	42a6      	cmp	r6, r4
 8005be2:	d109      	bne.n	8005bf8 <__libc_init_array+0x24>
 8005be4:	2600      	movs	r6, #0
 8005be6:	f000 f823 	bl	8005c30 <_init>
 8005bea:	4c0a      	ldr	r4, [pc, #40]	@ (8005c14 <__libc_init_array+0x40>)
 8005bec:	4d0a      	ldr	r5, [pc, #40]	@ (8005c18 <__libc_init_array+0x44>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	d105      	bne.n	8005c02 <__libc_init_array+0x2e>
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	00b3      	lsls	r3, r6, #2
 8005bfa:	58eb      	ldr	r3, [r5, r3]
 8005bfc:	4798      	blx	r3
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7ee      	b.n	8005be0 <__libc_init_array+0xc>
 8005c02:	00b3      	lsls	r3, r6, #2
 8005c04:	58eb      	ldr	r3, [r5, r3]
 8005c06:	4798      	blx	r3
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7f2      	b.n	8005bf2 <__libc_init_array+0x1e>
 8005c0c:	08005d60 	.word	0x08005d60
 8005c10:	08005d60 	.word	0x08005d60
 8005c14:	08005d64 	.word	0x08005d64
 8005c18:	08005d60 	.word	0x08005d60

08005c1c <memcpy>:
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d100      	bne.n	8005c26 <memcpy+0xa>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	5ccc      	ldrb	r4, [r1, r3]
 8005c28:	54c4      	strb	r4, [r0, r3]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	e7f8      	b.n	8005c20 <memcpy+0x4>
	...

08005c30 <_init>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr

08005c3c <_fini>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr
